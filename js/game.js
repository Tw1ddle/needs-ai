// Generated by Haxe 4.3.0-rc.1+fc8633e
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var ID = function() { };
ID.__name__ = true;
var Main = function() {
	window.onload = $bind(this,this.onWindowLoaded);
};
Main.__name__ = true;
Main.main = function() {
	new Main();
};
Main.getElement = function(id) {
	return window.document.getElementById(id);
};
Main.prototype = {
	onWindowLoaded: function() {
		this.setupMainButtonEvents();
		SpeechSynth.cancel();
		if(Main.console != null) {
			Main.console.clear();
		} else {
			Main.console = new ui_Console();
		}
		var generator = new game_world_WorldGenerator();
		Main.world = generator.create();
		Main.humanTeamView = new ui_HumanTeamInfoView(Main.world,window.document.getElementById("humanteaminfo"));
		Main.zombieTeamView = new ui_ZombieTeamInfoView(Main.world,window.document.getElementById("zombieteaminfo"));
		Main.console.setupWorldSignals(Main.world);
		Main.console.echo("Round starting...");
		var humans = generator.createHumans();
		var _g = 0;
		while(_g < humans.length) {
			var human = humans[_g];
			++_g;
			human.addFallbackActualizer(new game_actualizers_HumanRoamActualizer());
		}
		var zombies = generator.createZombies();
		var _g = 0;
		while(_g < zombies.length) {
			var zombie = zombies[_g];
			++_g;
			zombie.addFallbackActualizer(new game_actualizers_ZombieRoamActualizer());
		}
		var healths = generator.createHealthPickups();
		var weapons = generator.createWeaponPickups();
		var _g = 0;
		while(_g < humans.length) {
			var human = humans[_g];
			++_g;
			Main.world.logicalWorld.addHuman(human);
		}
		var _g = 0;
		while(_g < zombies.length) {
			var zombie = zombies[_g];
			++_g;
			Main.world.logicalWorld.addZombie(zombie);
		}
		var _g = 0;
		while(_g < healths.length) {
			var health = healths[_g];
			++_g;
			Main.world.logicalWorld.addHealthPickup(health);
		}
		var _g = 0;
		while(_g < weapons.length) {
			var weapon = weapons[_g];
			++_g;
			Main.world.logicalWorld.addWeaponPickup(weapon);
		}
		if(Main.influenceMaps != null) {
			Main.influenceMaps.destroy();
		}
		Main.influenceMaps = new game_world_InfluenceMaps(Main.world);
		window.requestAnimationFrame($bind(this,this.animate));
	}
	,resetGame: function() {
		SpeechSynth.cancel();
		if(Main.console != null) {
			Main.console.clear();
		} else {
			Main.console = new ui_Console();
		}
		var generator = new game_world_WorldGenerator();
		Main.world = generator.create();
		Main.humanTeamView = new ui_HumanTeamInfoView(Main.world,window.document.getElementById("humanteaminfo"));
		Main.zombieTeamView = new ui_ZombieTeamInfoView(Main.world,window.document.getElementById("zombieteaminfo"));
		Main.console.setupWorldSignals(Main.world);
		Main.console.echo("Round starting...");
		var humans = generator.createHumans();
		var _g = 0;
		while(_g < humans.length) {
			var human = humans[_g];
			++_g;
			human.addFallbackActualizer(new game_actualizers_HumanRoamActualizer());
		}
		var zombies = generator.createZombies();
		var _g = 0;
		while(_g < zombies.length) {
			var zombie = zombies[_g];
			++_g;
			zombie.addFallbackActualizer(new game_actualizers_ZombieRoamActualizer());
		}
		var healths = generator.createHealthPickups();
		var weapons = generator.createWeaponPickups();
		var _g = 0;
		while(_g < humans.length) {
			var human = humans[_g];
			++_g;
			Main.world.logicalWorld.addHuman(human);
		}
		var _g = 0;
		while(_g < zombies.length) {
			var zombie = zombies[_g];
			++_g;
			Main.world.logicalWorld.addZombie(zombie);
		}
		var _g = 0;
		while(_g < healths.length) {
			var health = healths[_g];
			++_g;
			Main.world.logicalWorld.addHealthPickup(health);
		}
		var _g = 0;
		while(_g < weapons.length) {
			var weapon = weapons[_g];
			++_g;
			Main.world.logicalWorld.addWeaponPickup(weapon);
		}
		if(Main.influenceMaps != null) {
			Main.influenceMaps.destroy();
		}
		Main.influenceMaps = new game_world_InfluenceMaps(Main.world);
	}
	,render: function(dt) {
		Main.world.render(dt);
		Main.influenceMaps.update(dt);
	}
	,animate: function(time) {
		Main.dt = (time - Main.lastAnimationTime) * 0.001;
		Main.lastAnimationTime = time;
		var dt = Main.dt;
		Main.world.render(dt);
		Main.influenceMaps.update(dt);
		window.requestAnimationFrame($bind(this,this.animate));
	}
	,setupMainButtonEvents: function() {
		var _gthis = this;
		Main.takeTurnButton.addEventListener("click",function(e) {
			Main.world.logicalWorld.update(100,false);
		});
		Main.skipTurnButton.addEventListener("click",function(e) {
			Main.world.logicalWorld.update(100,true);
		});
		Main.resetButton.addEventListener("click",function(e) {
			SpeechSynth.cancel();
			if(Main.console != null) {
				Main.console.clear();
			} else {
				Main.console = new ui_Console();
			}
			var generator = new game_world_WorldGenerator();
			Main.world = generator.create();
			Main.humanTeamView = new ui_HumanTeamInfoView(Main.world,window.document.getElementById("humanteaminfo"));
			Main.zombieTeamView = new ui_ZombieTeamInfoView(Main.world,window.document.getElementById("zombieteaminfo"));
			Main.console.setupWorldSignals(Main.world);
			Main.console.echo("Round starting...");
			var humans = generator.createHumans();
			var _g = 0;
			while(_g < humans.length) {
				var human = humans[_g];
				++_g;
				human.addFallbackActualizer(new game_actualizers_HumanRoamActualizer());
			}
			var zombies = generator.createZombies();
			var _g = 0;
			while(_g < zombies.length) {
				var zombie = zombies[_g];
				++_g;
				zombie.addFallbackActualizer(new game_actualizers_ZombieRoamActualizer());
			}
			var healths = generator.createHealthPickups();
			var weapons = generator.createWeaponPickups();
			var _g = 0;
			while(_g < humans.length) {
				var human = humans[_g];
				++_g;
				Main.world.logicalWorld.addHuman(human);
			}
			var _g = 0;
			while(_g < zombies.length) {
				var zombie = zombies[_g];
				++_g;
				Main.world.logicalWorld.addZombie(zombie);
			}
			var _g = 0;
			while(_g < healths.length) {
				var health = healths[_g];
				++_g;
				Main.world.logicalWorld.addHealthPickup(health);
			}
			var _g = 0;
			while(_g < weapons.length) {
				var weapon = weapons[_g];
				++_g;
				Main.world.logicalWorld.addWeaponPickup(weapon);
			}
			if(Main.influenceMaps != null) {
				Main.influenceMaps.destroy();
			}
			Main.influenceMaps = new game_world_InfluenceMaps(Main.world);
		});
	}
};
Math.__name__ = true;
var SpeechSynth = function() { };
SpeechSynth.__name__ = true;
SpeechSynth.speak = function(text,voice,volume,rate,pitch,onStart,onBoundary,onEnd) {
	if(pitch == null) {
		pitch = 1.0;
	}
	if(rate == null) {
		rate = 1.0;
	}
	if(volume == null) {
		volume = 1.0;
	}
	if(!SpeechSynth.get_supported()) {
		return;
	}
	if(SpeechSynth.get_voices().length == 0) {
		return;
	}
	var utterance = new SpeechSynthesisUtterance(text);
	if(voice != null) {
		utterance.voice = voice;
	} else {
		voice = SpeechSynth.get_voices()[0];
	}
	utterance.volume = volume;
	utterance.rate = rate;
	utterance.pitch = pitch;
	utterance.onstart = onStart;
	utterance.onboundary = onBoundary;
	utterance.onend = onEnd;
	window.speechSynthesis.speak(utterance);
};
SpeechSynth.cancel = function() {
	if(!SpeechSynth.get_supported()) {
		return;
	}
	window.speechSynthesis.cancel();
};
SpeechSynth.getVoiceByName = function(name) {
	if(!SpeechSynth.get_supported()) {
		return null;
	}
	var _g = [];
	var _g1 = 0;
	var _g2 = SpeechSynth.get_voices();
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v.name == name) {
			_g.push(v);
		}
	}
	var namedVoices = _g;
	if(namedVoices.length == 0) {
		return null;
	}
	return namedVoices[0];
};
SpeechSynth.getVoiceByUri = function(uri) {
	if(!SpeechSynth.get_supported()) {
		return null;
	}
	var _g = [];
	var _g1 = 0;
	var _g2 = SpeechSynth.get_voices();
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v.voiceURI == uri) {
			_g.push(v);
		}
	}
	var uriVoices = _g;
	if(uriVoices.length == 0) {
		return null;
	}
	return uriVoices[0];
};
SpeechSynth.get_supported = function() {
	return window.speechSynthesis != null;
};
SpeechSynth.get_voices = function() {
	if(!SpeechSynth.get_supported()) {
		return [];
	}
	var voices = window.speechSynthesis.getVoices();
	if(voices == null) {
		return [];
	}
	return voices;
};
SpeechSynth.get_loaded = function() {
	if(SpeechSynth.get_supported()) {
		return SpeechSynth.get_voices().length != 0;
	} else {
		return false;
	}
};
SpeechSynth.get_speaking = function() {
	if(SpeechSynth.get_supported()) {
		return window.speechSynthesis.speaking;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var UInt = {};
UInt.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
var game_actualizers_Actualizer = function(id) {
	this.id = id;
};
game_actualizers_Actualizer.__name__ = true;
game_actualizers_Actualizer.prototype = {
	actualize: function(params) {
	}
	,get_world: function() {
		return Main.world;
	}
};
var game_actualizers_HumanAttackActualizer = function() {
	game_actualizers_Actualizer.call(this,"Attacking Zombies");
};
game_actualizers_HumanAttackActualizer.__name__ = true;
game_actualizers_HumanAttackActualizer.__super__ = game_actualizers_Actualizer;
game_actualizers_HumanAttackActualizer.prototype = $extend(game_actualizers_Actualizer.prototype,{
	actualize: function(params) {
		game_actualizers_Actualizer.prototype.actualize.call(this,params);
		var me = params.h["subject_actor"];
		var target = params.h["target_actor"];
		if(me == null || target == null) {
			return;
		}
	}
});
var game_actualizers_HumanGatherSuppliesActualizer = function() {
	game_actualizers_Actualizer.call(this,"Gathering Supplies");
};
game_actualizers_HumanGatherSuppliesActualizer.__name__ = true;
game_actualizers_HumanGatherSuppliesActualizer.__super__ = game_actualizers_Actualizer;
game_actualizers_HumanGatherSuppliesActualizer.prototype = $extend(game_actualizers_Actualizer.prototype,{
	actualize: function(params) {
		game_actualizers_Actualizer.prototype.actualize.call(this,params);
	}
});
var game_actualizers_HumanPanicActualizer = function() {
	game_actualizers_Actualizer.call(this,"Panicking");
};
game_actualizers_HumanPanicActualizer.__name__ = true;
game_actualizers_HumanPanicActualizer.__super__ = game_actualizers_Actualizer;
game_actualizers_HumanPanicActualizer.prototype = $extend(game_actualizers_Actualizer.prototype,{
	actualize: function(params) {
		game_actualizers_Actualizer.prototype.actualize.call(this,params);
	}
});
var game_actualizers_HumanRetreatActualizer = function() {
	game_actualizers_Actualizer.call(this,"Retreating");
};
game_actualizers_HumanRetreatActualizer.__name__ = true;
game_actualizers_HumanRetreatActualizer.__super__ = game_actualizers_Actualizer;
game_actualizers_HumanRetreatActualizer.prototype = $extend(game_actualizers_Actualizer.prototype,{
	actualize: function(params) {
		game_actualizers_Actualizer.prototype.actualize.call(this,params);
	}
});
var game_actualizers_HumanRoamActualizer = function() {
	game_actualizers_Actualizer.call(this,"Wandering");
};
game_actualizers_HumanRoamActualizer.__name__ = true;
game_actualizers_HumanRoamActualizer.__super__ = game_actualizers_Actualizer;
game_actualizers_HumanRoamActualizer.prototype = $extend(game_actualizers_Actualizer.prototype,{
	actualize: function(params) {
		game_actualizers_Actualizer.prototype.actualize.call(this,params);
		var me = params.h["subject_actor"];
		if(me == null) {
			return;
		}
		var xDir = Math.random() > 0.5;
		var yDir = Math.random() > 0.5;
		me.setPosition(me.x + (xDir ? 1.0 : -1.0),me.y + (yDir ? 1.0 : -1.0));
	}
});
var game_actualizers_ZombieAttackActualizer = function() {
	game_actualizers_Actualizer.call(this,"Attacking Humans");
};
game_actualizers_ZombieAttackActualizer.__name__ = true;
game_actualizers_ZombieAttackActualizer.__super__ = game_actualizers_Actualizer;
game_actualizers_ZombieAttackActualizer.prototype = $extend(game_actualizers_Actualizer.prototype,{
	actualize: function(params) {
		game_actualizers_Actualizer.prototype.actualize.call(this,params);
	}
});
var game_actualizers_ZombiePursueActualizer = function() {
	game_actualizers_Actualizer.call(this,"Pursuing Humans");
};
game_actualizers_ZombiePursueActualizer.__name__ = true;
game_actualizers_ZombiePursueActualizer.__super__ = game_actualizers_Actualizer;
game_actualizers_ZombiePursueActualizer.prototype = $extend(game_actualizers_Actualizer.prototype,{
	actualize: function(params) {
		game_actualizers_Actualizer.prototype.actualize.call(this,params);
		var me = params.h["subject_actor"];
		var target = params.h["target_actor"];
		if(me == null || target == null) {
			return;
		}
	}
});
var game_actualizers_ZombieRoamActualizer = function() {
	game_actualizers_Actualizer.call(this,"Wandering");
};
game_actualizers_ZombieRoamActualizer.__name__ = true;
game_actualizers_ZombieRoamActualizer.__super__ = game_actualizers_Actualizer;
game_actualizers_ZombieRoamActualizer.prototype = $extend(game_actualizers_Actualizer.prototype,{
	actualize: function(params) {
		game_actualizers_Actualizer.prototype.actualize.call(this,params);
		var me = params.h["subject_actor"];
		if(me == null) {
			return;
		}
		var xDir = Math.random() > 0.5;
		var yDir = Math.random() > 0.5;
		me.setPosition(me.x + (xDir ? 1.0 : -1.0),me.y + (yDir ? 1.0 : -1.0));
	}
});
var game_actualizers_SharedActualizers = function() { };
game_actualizers_SharedActualizers.__name__ = true;
var game_ai_ChatterDirector = function(world) {
	this.onUtteranceChanged = [];
	var _gthis = this;
	var roundStartingInput = new game_ai_inputs_RoundStartingInput(game_ai_ids_InputId.RoundStartingInput,world);
	var roundStartConsiderations = [new needs_ai_Consideration(game_ai_ids_ChatterConsiderationId.IsRoundStarting,"Round Starting Consideration",roundStartingInput,needs_responses_Linear.make(1,0))];
	var approvalConsiderations = [];
	var disapprovalConsiderations = [];
	var fireConsiderations = [];
	var needHealthConsiderations = [];
	var needWeaponConsiderations = [];
	var onKillConsiderations = [];
	var angryConsiderations = [];
	var panicConsiderations = [];
	var tauntConsiderations = [];
	var praiseConsiderations = [];
	var zombieGroanConsiderations = [];
	var zombieTauntConsiderations = [];
	var roundEndConsiderations = [];
	var makeActions = function(utterances,considerations) {
		var actions = [];
		var _g = 0;
		while(_g < utterances.length) {
			var utterance = utterances[_g];
			++_g;
			var id = game_ai_ids_ChatterActionId.UTTER(utterance,null);
			actions.push(new needs_ai_Action(id,Std.string(id),considerations));
		}
		return actions;
	};
	var roundStartActions = makeActions(game_util_Utterances.round_start,roundStartConsiderations);
	var approvalActions = makeActions(game_util_Utterances.approve,approvalConsiderations);
	var disapprovalActions = makeActions(game_util_Utterances.disapprove,disapprovalConsiderations);
	var fireActions = makeActions(game_util_Utterances.fire,fireConsiderations);
	var needHealthActions = makeActions(game_util_Utterances.need_health,needHealthConsiderations);
	var needWeaponActions = makeActions(game_util_Utterances.need_weapon,needWeaponConsiderations);
	var onKillActions = makeActions(game_util_Utterances.on_kill,onKillConsiderations);
	var angryActions = makeActions(game_util_Utterances.angry,angryConsiderations);
	var panicActions = makeActions(game_util_Utterances.panic,panicConsiderations);
	var tauntActions = makeActions(game_util_Utterances.taunt,tauntConsiderations);
	var praiseActions = makeActions(game_util_Utterances.praise,praiseConsiderations);
	var zombieGroanActions = makeActions(game_util_Utterances.zombie_groan,zombieGroanConsiderations);
	var zombieTauntActions = makeActions(game_util_Utterances.zombie_taunt,zombieTauntConsiderations);
	var roundEndActions = makeActions(game_util_Utterances.round_end,roundEndConsiderations);
	var roundStartActionSet = new needs_ai_ActionSet(game_ai_ids_ChatterActionSetId.ROUND_START,"Round Start Action Set",roundStartActions);
	var approvalActionSet = new needs_ai_ActionSet(game_ai_ids_ChatterActionSetId.APPROVE,"Approval Action Set",approvalActions);
	var disapprovalActionSet = new needs_ai_ActionSet(game_ai_ids_ChatterActionSetId.DISAPPROVE,"Disapproval Action Set",disapprovalActions);
	var fireActionSet = new needs_ai_ActionSet(game_ai_ids_ChatterActionSetId.FIRE,"Fire Action Set",fireActions);
	var needHealthActionSet = new needs_ai_ActionSet(game_ai_ids_ChatterActionSetId.NEED_HEALTH,"Need Health Action Set",needHealthActions);
	var needWeaponActionSet = new needs_ai_ActionSet(game_ai_ids_ChatterActionSetId.NEED_WEAPON,"Need Weapon Action Set",needWeaponActions);
	var onKillActionSet = new needs_ai_ActionSet(game_ai_ids_ChatterActionSetId.ON_KILL,"On Kill Action Set",onKillActions);
	var angryActionSet = new needs_ai_ActionSet(game_ai_ids_ChatterActionSetId.ANGRY,"Angry Action Set",angryActions);
	var panicActionSet = new needs_ai_ActionSet(game_ai_ids_ChatterActionSetId.PANIC,"Panic Action Set",panicActions);
	var tauntActionSet = new needs_ai_ActionSet(game_ai_ids_ChatterActionSetId.TAUNT,"Taunt Action Set",tauntActions);
	var praiseActionSet = new needs_ai_ActionSet(game_ai_ids_ChatterActionSetId.PRAISE,"Praise Action Set",praiseActions);
	var zombieGroanActionSet = new needs_ai_ActionSet(game_ai_ids_ChatterActionSetId.ZOMBIE_GROAN,"Zombie Groan Action Set",zombieGroanActions);
	var zombieTauntActionSet = new needs_ai_ActionSet(game_ai_ids_ChatterActionSetId.ZOMBIE_TAUNT,"Zombie Taunt Action Set",zombieTauntActions);
	var roundEndActionSet = new needs_ai_ActionSet(game_ai_ids_ChatterActionSetId.ROUND_END,"Round End Action Set",roundEndActions);
	var actionSets = [roundStartActionSet,approvalActionSet,disapprovalActionSet,fireActionSet,needHealthActionSet,needWeaponActionSet,onKillActionSet,angryActionSet,panicActionSet,tauntActionSet,praiseActionSet,zombieGroanActionSet,zombieTauntActionSet,roundEndActionSet];
	var reasoner = new needs_ai_Reasoner(game_ai_ids_ChatterReasonerId.UtteranceReasoner,"Utterance Reasoner",actionSets);
	var reasoner1 = reasoner;
	reasoner.selectActionSet = function() {
		return needs_ai_ActionSetScoringStrategies.passthroughScoringStrategy(reasoner1);
	};
	var reasoner2 = reasoner;
	reasoner.selectAction = function() {
		return needs_ai_ReasonerActionPickingStrategies.randomInPreferredActionSet(reasoner2);
	};
	this.brain = new needs_ai_Brain(game_ai_ids_ChatterBrainId.Chatterer,[reasoner]);
	this.brain.onActionChanged.push(function(reasoner,before,after) {
		var this1 = _gthis.onUtteranceChanged;
		var data0 = before == null ? null : before.id;
		var data1 = after == null ? null : after.id;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(data0,data1);
		}
	});
};
game_ai_ChatterDirector.__name__ = true;
game_ai_ChatterDirector.prototype = {
	think: function(dt) {
		this.brain.update();
	}
};
var game_ai_ids_ChatterActionId = $hxEnums["game.ai.ids.ChatterActionId"] = { __ename__:true,__constructs__:null
	,UTTER: ($_=function(utterance,who) { return {_hx_index:0,utterance:utterance,who:who,__enum__:"game.ai.ids.ChatterActionId",toString:$estr}; },$_._hx_name="UTTER",$_.__params__ = ["utterance","who"],$_)
};
game_ai_ids_ChatterActionId.__constructs__ = [game_ai_ids_ChatterActionId.UTTER];
var game_ai_ids_ChatterActionSetId = $hxEnums["game.ai.ids.ChatterActionSetId"] = { __ename__:true,__constructs__:null
	,ROUND_START: {_hx_name:"ROUND_START",_hx_index:0,__enum__:"game.ai.ids.ChatterActionSetId",toString:$estr}
	,APPROVE: {_hx_name:"APPROVE",_hx_index:1,__enum__:"game.ai.ids.ChatterActionSetId",toString:$estr}
	,DISAPPROVE: {_hx_name:"DISAPPROVE",_hx_index:2,__enum__:"game.ai.ids.ChatterActionSetId",toString:$estr}
	,FIRE: {_hx_name:"FIRE",_hx_index:3,__enum__:"game.ai.ids.ChatterActionSetId",toString:$estr}
	,NEED_WEAPON: {_hx_name:"NEED_WEAPON",_hx_index:4,__enum__:"game.ai.ids.ChatterActionSetId",toString:$estr}
	,NEED_HEALTH: {_hx_name:"NEED_HEALTH",_hx_index:5,__enum__:"game.ai.ids.ChatterActionSetId",toString:$estr}
	,PANIC: {_hx_name:"PANIC",_hx_index:6,__enum__:"game.ai.ids.ChatterActionSetId",toString:$estr}
	,ANGRY: {_hx_name:"ANGRY",_hx_index:7,__enum__:"game.ai.ids.ChatterActionSetId",toString:$estr}
	,TAUNT: {_hx_name:"TAUNT",_hx_index:8,__enum__:"game.ai.ids.ChatterActionSetId",toString:$estr}
	,PRAISE: {_hx_name:"PRAISE",_hx_index:9,__enum__:"game.ai.ids.ChatterActionSetId",toString:$estr}
	,ON_KILL: {_hx_name:"ON_KILL",_hx_index:10,__enum__:"game.ai.ids.ChatterActionSetId",toString:$estr}
	,ROUND_END: {_hx_name:"ROUND_END",_hx_index:11,__enum__:"game.ai.ids.ChatterActionSetId",toString:$estr}
	,ZOMBIE_GROAN: {_hx_name:"ZOMBIE_GROAN",_hx_index:12,__enum__:"game.ai.ids.ChatterActionSetId",toString:$estr}
	,ZOMBIE_TAUNT: {_hx_name:"ZOMBIE_TAUNT",_hx_index:13,__enum__:"game.ai.ids.ChatterActionSetId",toString:$estr}
};
game_ai_ids_ChatterActionSetId.__constructs__ = [game_ai_ids_ChatterActionSetId.ROUND_START,game_ai_ids_ChatterActionSetId.APPROVE,game_ai_ids_ChatterActionSetId.DISAPPROVE,game_ai_ids_ChatterActionSetId.FIRE,game_ai_ids_ChatterActionSetId.NEED_WEAPON,game_ai_ids_ChatterActionSetId.NEED_HEALTH,game_ai_ids_ChatterActionSetId.PANIC,game_ai_ids_ChatterActionSetId.ANGRY,game_ai_ids_ChatterActionSetId.TAUNT,game_ai_ids_ChatterActionSetId.PRAISE,game_ai_ids_ChatterActionSetId.ON_KILL,game_ai_ids_ChatterActionSetId.ROUND_END,game_ai_ids_ChatterActionSetId.ZOMBIE_GROAN,game_ai_ids_ChatterActionSetId.ZOMBIE_TAUNT];
var game_ai_ids_ChatterBrainId = $hxEnums["game.ai.ids.ChatterBrainId"] = { __ename__:true,__constructs__:null
	,Chatterer: {_hx_name:"Chatterer",_hx_index:0,__enum__:"game.ai.ids.ChatterBrainId",toString:$estr}
};
game_ai_ids_ChatterBrainId.__constructs__ = [game_ai_ids_ChatterBrainId.Chatterer];
var game_ai_ids_ChatterConsiderationId = $hxEnums["game.ai.ids.ChatterConsiderationId"] = { __ename__:true,__constructs__:null
	,IsRoundStarting: {_hx_name:"IsRoundStarting",_hx_index:0,__enum__:"game.ai.ids.ChatterConsiderationId",toString:$estr}
};
game_ai_ids_ChatterConsiderationId.__constructs__ = [game_ai_ids_ChatterConsiderationId.IsRoundStarting];
var game_ai_ids_ChatterReasonerId = $hxEnums["game.ai.ids.ChatterReasonerId"] = { __ename__:true,__constructs__:null
	,UtteranceReasoner: {_hx_name:"UtteranceReasoner",_hx_index:0,__enum__:"game.ai.ids.ChatterReasonerId",toString:$estr}
};
game_ai_ids_ChatterReasonerId.__constructs__ = [game_ai_ids_ChatterReasonerId.UtteranceReasoner];
var game_ai_ids_InputId = $hxEnums["game.ai.ids.InputId"] = { __ename__:true,__constructs__:null
	,PerceivedZombieThreatInput: {_hx_name:"PerceivedZombieThreatInput",_hx_index:0,__enum__:"game.ai.ids.InputId",toString:$estr}
	,PerceivedHumanStrengthInput: {_hx_name:"PerceivedHumanStrengthInput",_hx_index:1,__enum__:"game.ai.ids.InputId",toString:$estr}
	,PerceivedSuppliesHeldInput: {_hx_name:"PerceivedSuppliesHeldInput",_hx_index:2,__enum__:"game.ai.ids.InputId",toString:$estr}
	,PerceivedSuppliesPresenceInput: {_hx_name:"PerceivedSuppliesPresenceInput",_hx_index:3,__enum__:"game.ai.ids.InputId",toString:$estr}
	,RoundStartingInput: {_hx_name:"RoundStartingInput",_hx_index:4,__enum__:"game.ai.ids.InputId",toString:$estr}
};
game_ai_ids_InputId.__constructs__ = [game_ai_ids_InputId.PerceivedZombieThreatInput,game_ai_ids_InputId.PerceivedHumanStrengthInput,game_ai_ids_InputId.PerceivedSuppliesHeldInput,game_ai_ids_InputId.PerceivedSuppliesPresenceInput,game_ai_ids_InputId.RoundStartingInput];
var game_ai_ids_NpcActionId = $hxEnums["game.ai.ids.NpcActionId"] = { __ename__:true,__constructs__:null
	,Attack: {_hx_name:"Attack",_hx_index:0,__enum__:"game.ai.ids.NpcActionId",toString:$estr}
	,GatherSupplies: {_hx_name:"GatherSupplies",_hx_index:1,__enum__:"game.ai.ids.NpcActionId",toString:$estr}
	,Retreat: {_hx_name:"Retreat",_hx_index:2,__enum__:"game.ai.ids.NpcActionId",toString:$estr}
	,Panic: {_hx_name:"Panic",_hx_index:3,__enum__:"game.ai.ids.NpcActionId",toString:$estr}
};
game_ai_ids_NpcActionId.__constructs__ = [game_ai_ids_NpcActionId.Attack,game_ai_ids_NpcActionId.GatherSupplies,game_ai_ids_NpcActionId.Retreat,game_ai_ids_NpcActionId.Panic];
var game_ai_ids_NpcActionSetId = $hxEnums["game.ai.ids.NpcActionSetId"] = { __ename__:true,__constructs__:null
	,Survival: {_hx_name:"Survival",_hx_index:0,__enum__:"game.ai.ids.NpcActionSetId",toString:$estr}
	,GroupChatter: {_hx_name:"GroupChatter",_hx_index:1,__enum__:"game.ai.ids.NpcActionSetId",toString:$estr}
	,SelfChatter: {_hx_name:"SelfChatter",_hx_index:2,__enum__:"game.ai.ids.NpcActionSetId",toString:$estr}
};
game_ai_ids_NpcActionSetId.__constructs__ = [game_ai_ids_NpcActionSetId.Survival,game_ai_ids_NpcActionSetId.GroupChatter,game_ai_ids_NpcActionSetId.SelfChatter];
var game_ai_ids_NpcBrainId = $hxEnums["game.ai.ids.NpcBrainId"] = { __ename__:true,__constructs__:null
	,Human: {_hx_name:"Human",_hx_index:0,__enum__:"game.ai.ids.NpcBrainId",toString:$estr}
	,Zombie: {_hx_name:"Zombie",_hx_index:1,__enum__:"game.ai.ids.NpcBrainId",toString:$estr}
};
game_ai_ids_NpcBrainId.__constructs__ = [game_ai_ids_NpcBrainId.Human,game_ai_ids_NpcBrainId.Zombie];
var game_ai_ids_NpcConsiderationId = $hxEnums["game.ai.ids.NpcConsiderationId"] = { __ename__:true,__constructs__:null
	,PerceivedZombieThreat: {_hx_name:"PerceivedZombieThreat",_hx_index:0,__enum__:"game.ai.ids.NpcConsiderationId",toString:$estr}
	,PerceivedHumanStrength: {_hx_name:"PerceivedHumanStrength",_hx_index:1,__enum__:"game.ai.ids.NpcConsiderationId",toString:$estr}
	,SuppliesHeld: {_hx_name:"SuppliesHeld",_hx_index:2,__enum__:"game.ai.ids.NpcConsiderationId",toString:$estr}
	,SuppliesPresence: {_hx_name:"SuppliesPresence",_hx_index:3,__enum__:"game.ai.ids.NpcConsiderationId",toString:$estr}
};
game_ai_ids_NpcConsiderationId.__constructs__ = [game_ai_ids_NpcConsiderationId.PerceivedZombieThreat,game_ai_ids_NpcConsiderationId.PerceivedHumanStrength,game_ai_ids_NpcConsiderationId.SuppliesHeld,game_ai_ids_NpcConsiderationId.SuppliesPresence];
var game_ai_ids_NpcReasonerId = $hxEnums["game.ai.ids.NpcReasonerId"] = { __ename__:true,__constructs__:null
	,Gameplay: {_hx_name:"Gameplay",_hx_index:0,__enum__:"game.ai.ids.NpcReasonerId",toString:$estr}
};
game_ai_ids_NpcReasonerId.__constructs__ = [game_ai_ids_NpcReasonerId.Gameplay];
var needs_inputs_Input = function() {
	this.id = null;
	this.instanceId = needs_util_InstanceId.instanceId++;
};
needs_inputs_Input.__name__ = true;
needs_inputs_Input.prototype = {
	evaluate: function(response) {
		return 0.0;
	}
};
var game_ai_inputs_PerceivedThreatInput = function(id,referencePoint,world) {
	needs_inputs_Input.call(this);
	this.id = id;
	this.referencePoint = referencePoint;
	this.world = world;
};
game_ai_inputs_PerceivedThreatInput.__name__ = true;
game_ai_inputs_PerceivedThreatInput.__super__ = needs_inputs_Input;
game_ai_inputs_PerceivedThreatInput.prototype = $extend(needs_inputs_Input.prototype,{
	evaluate: function(response) {
		return response(1.0);
	}
});
var game_ai_inputs_RoundStartingInput = function(id,world) {
	needs_inputs_Input.call(this);
	this.id = id;
	this.world = world;
};
game_ai_inputs_RoundStartingInput.__name__ = true;
game_ai_inputs_RoundStartingInput.__super__ = needs_inputs_Input;
game_ai_inputs_RoundStartingInput.prototype = $extend(needs_inputs_Input.prototype,{
	evaluate: function(response) {
		var updateCount = this.world.logicalWorld.updateCount;
		return response(Math.max(1,1 / (updateCount + 0.5)));
	}
});
var game_ai_inputs_SuppliesHeldInput = function(id,human,world) {
	needs_inputs_Input.call(this);
	this.id = id;
	this.human = human;
	this.world = world;
};
game_ai_inputs_SuppliesHeldInput.__name__ = true;
game_ai_inputs_SuppliesHeldInput.__super__ = needs_inputs_Input;
game_ai_inputs_SuppliesHeldInput.prototype = $extend(needs_inputs_Input.prototype,{
	evaluate: function(response) {
		return response(1.0);
	}
});
var game_ai_inputs_SuppliesPresenceInput = function(id,human,world) {
	needs_inputs_Input.call(this);
	this.id = id;
	this.human = human;
	this.world = world;
};
game_ai_inputs_SuppliesPresenceInput.__name__ = true;
game_ai_inputs_SuppliesPresenceInput.__super__ = needs_inputs_Input;
game_ai_inputs_SuppliesPresenceInput.prototype = $extend(needs_inputs_Input.prototype,{
	evaluate: function(response) {
		return response(1.0);
	}
});
var game_npcs_PersonalityTraits = $hxEnums["game.npcs.PersonalityTraits"] = { __ename__:true,__constructs__:null
	,AGGRESSIVE: ($_=function(amount) { return {_hx_index:0,amount:amount,__enum__:"game.npcs.PersonalityTraits",toString:$estr}; },$_._hx_name="AGGRESSIVE",$_.__params__ = ["amount"],$_)
	,AIMLESS: {_hx_name:"AIMLESS",_hx_index:1,__enum__:"game.npcs.PersonalityTraits",toString:$estr}
	,CHEERFUL: {_hx_name:"CHEERFUL",_hx_index:2,__enum__:"game.npcs.PersonalityTraits",toString:$estr}
	,CRAZY: {_hx_name:"CRAZY",_hx_index:3,__enum__:"game.npcs.PersonalityTraits",toString:$estr}
	,DARING: ($_=function(amount) { return {_hx_index:4,amount:amount,__enum__:"game.npcs.PersonalityTraits",toString:$estr}; },$_._hx_name="DARING",$_.__params__ = ["amount"],$_)
	,FEARFUL: ($_=function(amount) { return {_hx_index:5,amount:amount,__enum__:"game.npcs.PersonalityTraits",toString:$estr}; },$_._hx_name="FEARFUL",$_.__params__ = ["amount"],$_)
	,GUNLOVING: ($_=function(amount) { return {_hx_index:6,amount:amount,__enum__:"game.npcs.PersonalityTraits",toString:$estr}; },$_._hx_name="GUNLOVING",$_.__params__ = ["amount"],$_)
	,PARANOID: {_hx_name:"PARANOID",_hx_index:7,__enum__:"game.npcs.PersonalityTraits",toString:$estr}
	,PATIENT: {_hx_name:"PATIENT",_hx_index:8,__enum__:"game.npcs.PersonalityTraits",toString:$estr}
	,QUIET: {_hx_name:"QUIET",_hx_index:9,__enum__:"game.npcs.PersonalityTraits",toString:$estr}
	,WATCHFUL: ($_=function(amount) { return {_hx_index:10,amount:amount,__enum__:"game.npcs.PersonalityTraits",toString:$estr}; },$_._hx_name="WATCHFUL",$_.__params__ = ["amount"],$_)
};
game_npcs_PersonalityTraits.__constructs__ = [game_npcs_PersonalityTraits.AGGRESSIVE,game_npcs_PersonalityTraits.AIMLESS,game_npcs_PersonalityTraits.CHEERFUL,game_npcs_PersonalityTraits.CRAZY,game_npcs_PersonalityTraits.DARING,game_npcs_PersonalityTraits.FEARFUL,game_npcs_PersonalityTraits.GUNLOVING,game_npcs_PersonalityTraits.PARANOID,game_npcs_PersonalityTraits.PATIENT,game_npcs_PersonalityTraits.QUIET,game_npcs_PersonalityTraits.WATCHFUL];
var game_npcs_NPC = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.onActualizerRemoved = [];
	this.onActualizerAdded = [];
	this.onFallbackActualizerRemoved = [];
	this.onFallbackActualizerAdded = [];
	this.onBrainRemoved = [];
	this.onBrainAdded = [];
	this.onActed = [];
	this.onActedIdly = [];
	this.onThinked = [];
	this.onMoved = [];
	this.fallbackActualizers = [];
	this.actualizers = [];
	this.actualizerCtx = new haxe_ds_StringMap();
	this.name = game_util_Global.getRandomAmericanName();
	this.brains = [];
	this.x = x;
	this.y = y;
	this.characteristics = [];
};
game_npcs_NPC.__name__ = true;
game_npcs_NPC.prototype = {
	update: function(dt) {
		this.think();
		this.act();
	}
	,setPosition: function(x,y) {
		var oldX = this.x;
		var oldY = this.y;
		this.x = x;
		this.y = y;
		var this1 = this.onMoved;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(oldX,oldY,x,y);
		}
	}
	,addBrain: function(brain) {
		this.brains.push(brain);
		var this1 = this.onBrainAdded;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(brain);
		}
	}
	,removeBrain: function(brain) {
		HxOverrides.remove(this.brains,brain);
		var this1 = this.onBrainRemoved;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(brain);
		}
	}
	,addFallbackActualizer: function(actualizer) {
		this.fallbackActualizers.push(actualizer);
		var this1 = this.onFallbackActualizerAdded;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(actualizer);
		}
	}
	,removeFallbackActualizer: function(actualizer) {
		HxOverrides.remove(this.fallbackActualizers,actualizer);
		var this1 = this.onFallbackActualizerRemoved;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(actualizer);
		}
	}
	,addActualizer: function(actualizer) {
		this.actualizers.push(actualizer);
		var this1 = this.onActualizerAdded;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(actualizer);
		}
	}
	,removeActualizer: function(actualizer) {
		HxOverrides.remove(this.actualizers,actualizer);
		var this1 = this.onActualizerRemoved;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(actualizer);
		}
	}
	,think: function() {
		var _g = 0;
		var _g1 = this.brains;
		while(_g < _g1.length) {
			var brain = _g1[_g];
			++_g;
			brain.update();
		}
		var this1 = this.onThinked;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(this);
		}
	}
	,act: function() {
		if(this.actualizers.length == 0) {
			var _g = 0;
			var _g1 = this.fallbackActualizers;
			while(_g < _g1.length) {
				var fallback = _g1[_g];
				++_g;
				fallback.actualize(this.makeActualizerContext());
			}
			var this1 = this.onActedIdly;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(this);
			}
			return;
		}
		var _g = 0;
		var _g1 = this.actualizers;
		while(_g < _g1.length) {
			var actualizer = _g1[_g];
			++_g;
			actualizer.actualize(this.makeActualizerContext());
		}
		var this1 = this.onActed;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(this);
		}
	}
	,makeActualizerContext: function() {
		return this.actualizerCtx;
	}
};
var game_npcs_humans_Human = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.onActionChanged = [];
	var _gthis = this;
	game_npcs_NPC.call(this,x,y);
	this.actualizerCtx.h["subject_actor"] = this;
	var zombieThreatInput = new game_ai_inputs_PerceivedThreatInput(game_ai_ids_InputId.PerceivedZombieThreatInput,this,Main.world);
	var humanStrengthInput = new game_ai_inputs_PerceivedThreatInput(game_ai_ids_InputId.PerceivedHumanStrengthInput,this,Main.world);
	var suppliesHeldInput = new game_ai_inputs_SuppliesHeldInput(game_ai_ids_InputId.PerceivedSuppliesHeldInput,this,Main.world);
	var suppliesPresenceInput = new game_ai_inputs_SuppliesPresenceInput(game_ai_ids_InputId.PerceivedSuppliesPresenceInput,this,Main.world);
	var zombieThreatConsideration = new needs_ai_Consideration(game_ai_ids_NpcConsiderationId.PerceivedZombieThreat,"Zombie Threat Level",zombieThreatInput,needs_responses_Linear.make(1,0));
	var nearbyHumanStrengthConsideration = new needs_ai_Consideration(game_ai_ids_NpcConsiderationId.PerceivedHumanStrength,"Team Strength Level",humanStrengthInput,needs_responses_Linear.make(1,0));
	var suppliesHeldConsideration = new needs_ai_Consideration(game_ai_ids_NpcConsiderationId.SuppliesHeld,"SuppliesHeldConsideration",suppliesHeldInput,needs_responses_Linear.make(1,0));
	var suppliesPresenceConsideration = new needs_ai_Consideration(game_ai_ids_NpcConsiderationId.SuppliesPresence,"SuppliesPresenceConsideration",suppliesPresenceInput,needs_responses_Linear.make(1,0));
	var gatherSuppliesAction = new needs_ai_Action(game_ai_ids_NpcActionId.GatherSupplies,"Gather Supplies Action",[suppliesHeldConsideration,suppliesPresenceConsideration]);
	var attackAction = new needs_ai_Action(game_ai_ids_NpcActionId.Attack,"Attack Action",[zombieThreatConsideration,nearbyHumanStrengthConsideration]);
	var retreatAction = new needs_ai_Action(game_ai_ids_NpcActionId.Retreat,"Retreat Action",[]);
	var panicAction = new needs_ai_Action(game_ai_ids_NpcActionId.Panic,"Panic Action",[]);
	var survivalActionSet = new needs_ai_ActionSet(game_ai_ids_NpcActionSetId.Survival,"Survival Action Set",[gatherSuppliesAction,attackAction,retreatAction,panicAction]);
	var gameplayReasoner = new needs_ai_Reasoner(game_ai_ids_NpcReasonerId.Gameplay,"Gameplay Reasoner",[survivalActionSet]);
	var humanBrain = new needs_ai_Brain(game_ai_ids_NpcBrainId.Human,[gameplayReasoner]);
	humanBrain.onActionChanged.push(function(reasoner,fromAction,toAction) {
		console.log("game/npcs/humans/Human.hx:57:","Human brain action changed for reasoner " + Std.string(reasoner) + " from action " + Std.string(fromAction) + " to action " + Std.string(toAction));
		var this1 = _gthis.onActionChanged;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(fromAction,toAction);
		}
	});
	this.onActionChanged.push(function(from,to) {
		if(from != null) {
			switch(from.id._hx_index) {
			case 0:
				_gthis.removeActualizer(game_actualizers_SharedActualizers.humanAttackActualizer);
				break;
			case 1:
				_gthis.removeActualizer(game_actualizers_SharedActualizers.humanGatherSuppliesActualizer);
				break;
			case 2:
				_gthis.removeActualizer(game_actualizers_SharedActualizers.humanRetreatActualizer);
				break;
			case 3:
				_gthis.removeActualizer(game_actualizers_SharedActualizers.humanPanicActualizer);
				break;
			}
		}
		if(to != null) {
			switch(to.id._hx_index) {
			case 0:
				_gthis.addActualizer(game_actualizers_SharedActualizers.humanAttackActualizer);
				break;
			case 1:
				_gthis.addActualizer(game_actualizers_SharedActualizers.humanGatherSuppliesActualizer);
				break;
			case 2:
				_gthis.addActualizer(game_actualizers_SharedActualizers.humanRetreatActualizer);
				break;
			case 3:
				_gthis.addActualizer(game_actualizers_SharedActualizers.humanPanicActualizer);
				break;
			}
		}
	});
	this.addBrain(humanBrain);
};
game_npcs_humans_Human.__name__ = true;
game_npcs_humans_Human.__super__ = game_npcs_NPC;
game_npcs_humans_Human.prototype = $extend(game_npcs_NPC.prototype,{
	update: function(dt) {
		game_npcs_NPC.prototype.update.call(this,dt);
	}
	,makeActualizerContext: function() {
		return this.actualizerCtx;
	}
});
var game_npcs_zombies_Zombie = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	game_npcs_NPC.call(this,x,y);
	this.actualizerCtx.h["subject_actor"] = this;
};
game_npcs_zombies_Zombie.__name__ = true;
game_npcs_zombies_Zombie.__super__ = game_npcs_NPC;
game_npcs_zombies_Zombie.prototype = $extend(game_npcs_NPC.prototype,{
	makeActualizerContext: function() {
		return this.actualizerCtx;
	}
});
var game_npcs_zombies_EverydayZombie = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	game_npcs_zombies_Zombie.call(this,x,y);
	var gameplayReasoner = new needs_ai_Reasoner(game_ai_ids_NpcReasonerId.Gameplay,"Gameplay Reasoner",[]);
	var zombieBrain = new needs_ai_Brain(game_ai_ids_NpcBrainId.Zombie,[gameplayReasoner]);
	zombieBrain.onActionChanged.push(function(reasoner,fromAction,toAction) {
		console.log("game/npcs/zombies/EverydayZombie.hx:17:","Zombie brain action changed for reasoner " + Std.string(reasoner) + " from action " + Std.string(fromAction) + " to action " + Std.string(toAction));
	});
	this.addBrain(zombieBrain);
};
game_npcs_zombies_EverydayZombie.__name__ = true;
game_npcs_zombies_EverydayZombie.__super__ = game_npcs_zombies_Zombie;
game_npcs_zombies_EverydayZombie.prototype = $extend(game_npcs_zombies_Zombie.prototype,{
});
var game_pickups_Pickup = function(x,y) {
	this.x = x;
	this.y = y;
	this.name = "";
};
game_pickups_Pickup.__name__ = true;
var game_pickups_health_HealthPickup = function(x,y) {
	this.onHealthTaken = [];
	game_pickups_Pickup.call(this,x,y);
};
game_pickups_health_HealthPickup.__name__ = true;
game_pickups_health_HealthPickup.__super__ = game_pickups_Pickup;
game_pickups_health_HealthPickup.prototype = $extend(game_pickups_Pickup.prototype,{
});
var game_pickups_health_Pills = function(x,y) {
	game_pickups_health_HealthPickup.call(this,x,y);
	this.name = "Bottle of pills";
};
game_pickups_health_Pills.__name__ = true;
game_pickups_health_Pills.__super__ = game_pickups_health_HealthPickup;
game_pickups_health_Pills.prototype = $extend(game_pickups_health_HealthPickup.prototype,{
});
var game_pickups_weapons_Weapon = function(x,y) {
	this.onWeaponTaken = [];
	game_pickups_Pickup.call(this,x,y);
	this.name = "Weapon";
};
game_pickups_weapons_Weapon.__name__ = true;
game_pickups_weapons_Weapon.__super__ = game_pickups_Pickup;
game_pickups_weapons_Weapon.prototype = $extend(game_pickups_Pickup.prototype,{
});
var game_pickups_weapons_Crowbar = function(x,y) {
	game_pickups_weapons_Weapon.call(this,x,y);
	this.name = "Crowbar";
};
game_pickups_weapons_Crowbar.__name__ = true;
game_pickups_weapons_Crowbar.__super__ = game_pickups_weapons_Weapon;
game_pickups_weapons_Crowbar.prototype = $extend(game_pickups_weapons_Weapon.prototype,{
});
var game_pickups_weapons_Glock17 = function(x,y) {
	game_pickups_weapons_Weapon.call(this,x,y);
	this.name = "Glock 17";
};
game_pickups_weapons_Glock17.__name__ = true;
game_pickups_weapons_Glock17.__super__ = game_pickups_weapons_Weapon;
game_pickups_weapons_Glock17.prototype = $extend(game_pickups_weapons_Weapon.prototype,{
});
var game_util_SharedNameGenerator = function() { };
game_util_SharedNameGenerator.__name__ = true;
game_util_SharedNameGenerator.makeAmericanNameBatch = function() {
	var forenames = game_util_SharedNameGenerator.generate(game_util_TrainingData.american_forenames);
	var surnames = game_util_SharedNameGenerator.generate(game_util_TrainingData.american_surnames);
	return { forenames : forenames, surnames : surnames};
};
game_util_SharedNameGenerator.generate = function(data,maxWordsToGenerate,minLength,maxLength,order,prior,maxProcessingTime,startsWith,endsWith,includes,excludes,regexMatch) {
	if(regexMatch == null) {
		regexMatch = "";
	}
	if(excludes == null) {
		excludes = "";
	}
	if(includes == null) {
		includes = "";
	}
	if(endsWith == null) {
		endsWith = "";
	}
	if(startsWith == null) {
		startsWith = "";
	}
	if(maxProcessingTime == null) {
		maxProcessingTime = 800;
	}
	if(prior == null) {
		prior = 0.0;
	}
	if(order == null) {
		order = 3;
	}
	if(maxLength == null) {
		maxLength = 11;
	}
	if(minLength == null) {
		minLength = 5;
	}
	if(maxWordsToGenerate == null) {
		maxWordsToGenerate = 100;
	}
	var duplicateTrie = new markov_util_PrefixTrie();
	var _g = 0;
	while(_g < data.length) {
		var name = data[_g];
		++_g;
		duplicateTrie.insert(name);
	}
	var generator = new markov_namegen_NameGenerator(data,order,prior);
	var names = [];
	var startTime = new Date().getTime();
	var currentTime = new Date().getTime();
	var regex = regexMatch == "" ? null : new EReg(regexMatch,"i");
	while(names.length < maxWordsToGenerate && currentTime < startTime + maxProcessingTime) {
		var name = generator.generateName(minLength,maxLength,startsWith,endsWith,includes,excludes,regex);
		if(name != null && !duplicateTrie.find(name)) {
			names.push(name);
			duplicateTrie.insert(name);
		}
		currentTime = new Date().getTime();
	}
	return names;
};
var markov_util_PrefixTrie = function() {
	this.root = new markov_util_PrefixNode(null,"",0);
};
markov_util_PrefixTrie.__name__ = true;
markov_util_PrefixTrie.findChild = function(node,letter) {
	var _g = 0;
	var _g1 = node.children;
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		if(child.letter == letter) {
			return child;
		}
	}
	return null;
};
markov_util_PrefixTrie.prototype = {
	insert: function(word) {
		var current = this.root;
		var _g = 0;
		var _g1 = word.length;
		while(_g < _g1) {
			var i = _g++;
			var ch = word.charAt(i);
			var child = markov_util_PrefixTrie.findChild(current,ch);
			if(child == null) {
				child = new markov_util_PrefixNode(current,ch,i);
				current.children.push(child);
			} else {
				child.frequency++;
			}
			current = child;
		}
		current.word = true;
		return current.frequency;
	}
	,find: function(word) {
		var current = this.root;
		var _g = 0;
		var _g1 = word.length;
		while(_g < _g1) {
			var i = _g++;
			current = markov_util_PrefixTrie.findChild(current,word.charAt(i));
			if(current == null) {
				return false;
			}
		}
		if(!current.word) {
			return false;
		}
		return true;
	}
	,getWords: function() {
		var queue = new haxe_ds_List();
		queue.add(this.root);
		var words = [];
		while(!queue.isEmpty()) {
			var node = queue.pop();
			if(node.word) {
				var word = node.letter;
				var parent = node.parent;
				while(parent != null) {
					word += parent.letter;
					parent = parent.parent;
				}
				if(word == null) {
					throw haxe_Exception.thrown("FAIL: str != null");
				}
				var arr = word.split("");
				arr.reverse();
				words.push(arr.join(""));
			}
			var _g = 0;
			var _g1 = node.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				queue.add(child);
			}
		}
		return words;
	}
};
var markov_util_PrefixNode = function(parent,letter,depth) {
	if(!(letter.length == 1 || parent == null && depth == 0)) {
		throw haxe_Exception.thrown("FAIL: letter.length == 1 || (parent == null && depth == 0)");
	}
	this.parent = parent;
	this.children = [];
	this.letter = letter;
	this.depth = depth;
	this.frequency = 1;
	this.word = false;
};
markov_util_PrefixNode.__name__ = true;
var markov_namegen_NameGenerator = function(data,order,prior) {
	this.generator = new markov_namegen_Generator(data,order,prior);
};
markov_namegen_NameGenerator.__name__ = true;
markov_namegen_NameGenerator.prototype = {
	generateName: function(minLength,maxLength,startsWith,endsWith,includes,excludes,regexMatch) {
		var name = "";
		name = this.generator.generate();
		name = StringTools.replace(name,"#","");
		if(name.length >= minLength && name.length <= maxLength && StringTools.startsWith(name,startsWith) && StringTools.endsWith(name,endsWith) && (includes.length == 0 || name.indexOf(includes) != -1) && (excludes.length == 0 || name.indexOf(excludes) == -1) && (regexMatch == null || regexMatch.match(name))) {
			return name;
		}
		return null;
	}
	,generateNames: function(n,minLength,maxLength,startsWith,endsWith,includes,excludes,maxTimePerName,regexMatch) {
		if(maxTimePerName == null) {
			maxTimePerName = 0.02;
		}
		var names = [];
		var startTime = new Date().getTime();
		var currentTime = new Date().getTime();
		while(names.length < n && currentTime > startTime + maxTimePerName * n) {
			var name = this.generateName(minLength,maxLength,startsWith,endsWith,includes,excludes,regexMatch);
			if(name != null) {
				names.push(name);
			}
			currentTime = new Date().getTime();
		}
		return names;
	}
};
var markov_namegen_Generator = function(data,order,prior) {
	if(data == null) {
		throw haxe_Exception.thrown("FAIL: data != null");
	}
	if(!UInt.gte(order,1)) {
		throw haxe_Exception.thrown("FAIL: order >= 1");
	}
	if(!(prior >= 0)) {
		throw haxe_Exception.thrown("FAIL: prior >= 0");
	}
	this.order = order;
	this.prior = prior;
	var letters = markov_util_ArraySet.create();
	var _g = 0;
	while(_g < data.length) {
		var word = data[_g];
		++_g;
		var _g1 = 0;
		var _g2 = word.length;
		while(_g1 < _g2) {
			var i = _g1++;
			markov_util_ArraySet.add(letters,word.charAt(i));
		}
	}
	letters.sort(function(a,b) {
		if(a < b) {
			return -1;
		}
		if(a > b) {
			return 1;
		}
		return 0;
	});
	var domain = markov_util_ArraySet.toArray(letters);
	domain.splice(0,0,"#");
	this.models = [];
	var _g = 0;
	var _g1 = order;
	while(_g < _g1) {
		var i = _g++;
		this.models.push(new markov_namegen_Model(data.slice(),order - i,prior,domain));
	}
};
markov_namegen_Generator.__name__ = true;
markov_namegen_Generator.prototype = {
	generate: function() {
		var times = this.order;
		if(times < 1) {
			throw haxe_Exception.thrown("FAIL: times >= 1");
		}
		var output = "";
		var _g = 0;
		var _g1 = times;
		while(_g < _g1) {
			var i = _g++;
			output += "#";
		}
		var word = output;
		var letter = this.getLetter(word);
		while(letter != "#") {
			if(letter != null) {
				word += letter;
			}
			letter = this.getLetter(word);
		}
		return word;
	}
	,getLetter: function(context) {
		if(context == null) {
			throw haxe_Exception.thrown("FAIL: context != null");
		}
		if(context.length <= 0) {
			throw haxe_Exception.thrown("FAIL: context.length > 0");
		}
		var letter = null;
		var context1 = context.substring(context.length - this.order,context.length);
		var _g = 0;
		var _g1 = this.models;
		while(_g < _g1.length) {
			var model = _g1[_g];
			++_g;
			letter = model.generate(context1);
			if(letter == null) {
				context1 = context1.substring(1);
			} else {
				break;
			}
		}
		return letter;
	}
};
var markov_util_ArraySet = {};
markov_util_ArraySet.create = function(array) {
	if(array == null) {
		var this1 = [];
		return this1;
	}
	return markov_util_ArraySet.toSet(array);
};
markov_util_ArraySet.intersection = function(this1,set) {
	var result = [];
	var _g = 0;
	while(_g < this1.length) {
		var element = this1[_g];
		++_g;
		if(markov_util_ArraySet.contains(set,element)) {
			result.push(element);
		}
	}
	var this1 = result;
	return this1;
};
markov_util_ArraySet.union = function(this1,set) {
	return markov_util_ArraySet.toSet(this1.concat(markov_util_ArraySet.toArray(set)));
};
markov_util_ArraySet.unionArray = function(this1,array) {
	return markov_util_ArraySet.toSet(this1.concat(array));
};
markov_util_ArraySet.difference = function(this1,set) {
	var this2 = this1.slice();
	var result = this2;
	var _g = 0;
	var _g1 = set;
	while(_g < _g1.length) {
		var element = _g1[_g];
		++_g;
		HxOverrides.remove(result,element);
	}
	var this1 = markov_util_ArraySet.toArray(result);
	return this1;
};
markov_util_ArraySet.add = function(this1,element) {
	if(element == null) {
		throw haxe_Exception.thrown("FAIL: element != null");
	}
	if(markov_util_ArraySet.contains(this1,element)) {
		return false;
	}
	this1.push(element);
	return true;
};
markov_util_ArraySet.contains = function(this1,element) {
	var _g = 0;
	while(_g < this1.length) {
		var i = this1[_g];
		++_g;
		if(i == element) {
			return true;
		}
	}
	return false;
};
markov_util_ArraySet.copy = function(this1) {
	var this2 = this1.slice();
	return this2;
};
markov_util_ArraySet.slice = function(this1,position,end) {
	var this2 = this1.slice(position,end);
	return this2;
};
markov_util_ArraySet.splice = function(this1,position,length) {
	var this2 = this1.splice(position,length);
	return this2;
};
markov_util_ArraySet.toArray = function(this1) {
	return this1.slice();
};
markov_util_ArraySet.toSet = function(array) {
	var this1 = [];
	var set = this1;
	var _g = 0;
	while(_g < array.length) {
		var v = array[_g];
		++_g;
		markov_util_ArraySet.add(set,v);
	}
	return set;
};
markov_util_ArraySet._new = function(array) {
	var this1 = array;
	return this1;
};
var markov_namegen_Model = function(data,order,prior,alphabet) {
	if(!(alphabet != null && data != null)) {
		throw haxe_Exception.thrown("FAIL: alphabet != null && data != null");
	}
	if(!(alphabet.length > 0 && data.length > 0)) {
		throw haxe_Exception.thrown("FAIL: alphabet.length > 0 && data.length > 0");
	}
	if(!(prior >= 0 && prior <= 1)) {
		throw haxe_Exception.thrown("FAIL: prior >= 0 && prior <= 1");
	}
	this.order = order;
	this.prior = prior;
	this.alphabet = alphabet;
	this.observations = new haxe_ds_StringMap();
	this.train(data);
	this.buildChains();
};
markov_namegen_Model.__name__ = true;
markov_namegen_Model.countMatches = function(arr,v) {
	if(arr == null) {
		return 0;
	}
	var i = 0;
	var _g = 0;
	while(_g < arr.length) {
		var s = arr[_g];
		++_g;
		if(s == v) {
			++i;
		}
	}
	return i;
};
markov_namegen_Model.selectIndex = function(chain) {
	var totals = [];
	var accumulator = 0;
	var _g = 0;
	while(_g < chain.length) {
		var weight = chain[_g];
		++_g;
		accumulator += weight;
		totals.push(accumulator);
	}
	var rand = Math.random() * accumulator;
	var _g = 0;
	var _g1 = totals.length;
	while(_g < _g1) {
		var i = _g++;
		if(rand < totals[i]) {
			return i;
		}
	}
	return 0;
};
markov_namegen_Model.prototype = {
	generate: function(context) {
		if(context == null) {
			throw haxe_Exception.thrown("FAIL: context != null");
		}
		var chain = this.chains.h[context];
		if(chain == null) {
			return null;
		} else {
			if(chain.length <= 0) {
				throw haxe_Exception.thrown("FAIL: chain.length > 0");
			}
			return this.alphabet[markov_namegen_Model.selectIndex(chain)];
		}
	}
	,retrain: function(data) {
		if(data == null) {
			throw haxe_Exception.thrown("FAIL: data != null");
		}
		this.train(data);
		this.buildChains();
	}
	,train: function(data) {
		while(data.length != 0) {
			var d = data.pop();
			var times = this.order;
			if(times < 1) {
				throw haxe_Exception.thrown("FAIL: times >= 1");
			}
			var output = "";
			var _g = 0;
			var _g1 = times;
			while(_g < _g1) {
				var i = _g++;
				output += "#";
			}
			d = output + d + "#";
			var _g2 = 0;
			var _g3 = d.length - this.order;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var key = d.substring(i1,i1 + this.order);
				var value = this.observations.h[key];
				if(value == null) {
					value = [];
					this.observations.h[key] = value;
				}
				value.push(d.charAt(i1 + this.order));
			}
		}
	}
	,buildChains: function() {
		this.chains = new haxe_ds_StringMap();
		var h = this.observations.h;
		var context_h = h;
		var context_keys = Object.keys(h);
		var context_length = context_keys.length;
		var context_current = 0;
		while(context_current < context_length) {
			var context = context_keys[context_current++];
			var _g = 0;
			var _g1 = this.alphabet;
			while(_g < _g1.length) {
				var prediction = _g1[_g];
				++_g;
				var value = this.chains.h[context];
				if(value == null) {
					value = [];
					this.chains.h[context] = value;
				}
				var tmp = this.prior;
				var arr = this.observations.h[context];
				var tmp1;
				if(arr == null) {
					tmp1 = 0;
				} else {
					var i = 0;
					var _g2 = 0;
					while(_g2 < arr.length) {
						var s = arr[_g2];
						++_g2;
						if(s == prediction) {
							++i;
						}
					}
					tmp1 = i;
				}
				value.push(tmp + tmp1);
			}
		}
	}
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
var game_util_TrainingData = function() { };
game_util_TrainingData.__name__ = true;
var game_util_Global = function() { };
game_util_Global.__name__ = true;
game_util_Global.getRandomAmericanName = function() {
	var str = game_util_Global.americanNames.forenames[Std.random(game_util_Global.americanNames.forenames.length)];
	if(!(str != null && str.length > 0)) {
		throw haxe_Exception.thrown("FAIL: str != null && str.length > 0");
	}
	var forename = HxOverrides.substr(str,0,1).toUpperCase() + HxOverrides.substr(str,1,str.length - 1);
	var str = game_util_Global.americanNames.surnames[Std.random(game_util_Global.americanNames.surnames.length)];
	if(!(str != null && str.length > 0)) {
		throw haxe_Exception.thrown("FAIL: str != null && str.length > 0");
	}
	var surname = HxOverrides.substr(str,0,1).toUpperCase() + HxOverrides.substr(str,1,str.length - 1);
	return forename + " " + surname;
};
var game_util_IntersectionChecker = function(camera,objects,element) {
	this.onClicked = [];
	this.onExit = [];
	this.onEnter = [];
	this.onIntersectionChanged = [];
	this.lastObject = null;
	this.raycaster = new THREE.Raycaster();
	this.ray = new THREE.Vector3();
	this.objects = null;
	this.camera = null;
	this.mouseY = null;
	this.mouseX = null;
	var _gthis = this;
	this.camera = camera;
	this.objects = objects;
	element.addEventListener("mousemove",function(e) {
		var rect = e.target.getBoundingClientRect();
		_gthis.mouseX = (e.clientX - rect.left) / element.clientWidth * 2 - 1;
		return _gthis.mouseY = -((e.clientY - rect.top) / element.clientHeight) * 2 + 1;
	});
	element.addEventListener("click",function(e) {
		var rect = e.target.getBoundingClientRect();
		_gthis.mouseX = (e.clientX - rect.left) / element.clientWidth * 2 - 1;
		_gthis.mouseY = -((e.clientY - rect.top) / element.clientHeight) * 2 + 1;
		var obj = _gthis.checkIntersection();
		if(obj != null) {
			var this1 = _gthis.onClicked;
			var data1 = _gthis.mouseX;
			var data2 = _gthis.mouseY;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(obj,data1,data2);
			}
		}
	});
};
game_util_IntersectionChecker.__name__ = true;
game_util_IntersectionChecker.prototype = {
	checkIntersection: function() {
		if(this.mouseX == null || this.mouseY == null) {
			return null;
		}
		this.ray.set(this.mouseX,this.mouseY,this.camera.far);
		this.raycaster.setFromCamera(this.ray,this.camera);
		var intersections = this.raycaster.intersectObjects(this.objects);
		var currentIntersection = intersections == null ? null : intersections[0];
		var currentObject = currentIntersection != null ? currentIntersection.object : null;
		if(this.lastObject == currentObject) {
			return this.lastObject;
		}
		var this1 = this.onIntersectionChanged;
		var data0 = this.lastObject;
		var data2 = this.mouseX;
		var data3 = this.mouseY;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(data0,currentObject,data2,data3);
		}
		if(this.lastObject != null) {
			var this1 = this.onExit;
			var data0 = this.lastObject;
			var data1 = this.mouseX;
			var data2 = this.mouseY;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(data0,data1,data2);
			}
		}
		if(currentObject != null) {
			var this1 = this.onEnter;
			var data1 = this.mouseX;
			var data2 = this.mouseY;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(currentObject,data1,data2);
			}
		}
		this.lastObject = currentObject;
		return currentObject;
	}
};
var game_util_QuantizedMovementObserver = function(gridStepX,gridStepY,s) {
	this.onChanged = [];
	var _gthis = this;
	this.gridStepX = gridStepX;
	this.gridStepY = gridStepY;
	this.gridOffsetX = 0;
	this.gridOffsetY = 0;
	s.push(function(x,oldX,oldY,newX,newY) {
		var nearest = gridStepX + _gthis.gridOffsetX;
		var oldGridX = Math.round(oldX / nearest) * nearest;
		var nearest = gridStepX + _gthis.gridOffsetX;
		var newGridX = Math.round(newX / nearest) * nearest;
		var nearest = gridStepY + _gthis.gridOffsetY;
		var oldGridY = Math.round(oldY / nearest) * nearest;
		var nearest = gridStepY + _gthis.gridOffsetY;
		var newGridY = Math.round(newY / nearest) * nearest;
		if(oldGridX == newGridX && oldGridY == newGridY) {
			return;
		}
		var this1 = _gthis.onChanged;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(x,oldX,oldY,oldGridX,oldGridY,newGridX,newGridY);
		}
	});
};
game_util_QuantizedMovementObserver.__name__ = true;
game_util_QuantizedMovementObserver.roundValueToNearest = function(value,nearest) {
	return Math.round(value / nearest) * nearest;
};
var game_util_TextLabel = function(x,y) {
	this.label = window.document.createElement("div");
	this.label.className = "textlabel";
	this.label.style.zIndex = "1";
	this.label.style.left = (x == null ? "null" : "" + x) + "px";
	this.label.style.top = (y == null ? "null" : "" + y) + "px";
};
game_util_TextLabel.__name__ = true;
game_util_TextLabel.prototype = {
	set_x: function(x) {
		this.label.style.left = (x == null ? "null" : "" + x) + "px";
		return x;
	}
	,get_x: function() {
		return Std.parseInt(StringTools.replace(this.label.style.left,"px",""));
	}
	,set_y: function(y) {
		this.label.style.top = (y == null ? "null" : "" + y) + "px";
		return y;
	}
	,get_y: function() {
		return Std.parseInt(StringTools.replace(this.label.style.top,"px",""));
	}
	,get_width: function() {
		return Std.parseInt(StringTools.replace(this.label.style.width,"px",""));
	}
	,set_width: function(width) {
		this.label.style.width = (width == null ? "null" : "" + width) + "px";
		return width;
	}
	,set_text: function(text) {
		return this.label.innerHTML = text;
	}
	,get_text: function() {
		return this.label.innerHTML;
	}
};
var game_util_TextLabels = function(rootElement) {
	this.labels = new haxe_ds_IntMap();
	this.rootElement = rootElement;
};
game_util_TextLabels.__name__ = true;
game_util_TextLabels.prototype = {
	getLabel: function(id,x,y) {
		var label = this.labels.h[id];
		if(label != null) {
			return label;
		}
		label = new game_util_TextLabel(x,y);
		this.labels.h[id] = label;
		this.rootElement.appendChild(label.label);
		return label;
	}
	,clear: function() {
		var label = this.labels.iterator();
		while(label.hasNext()) {
			var label1 = label.next();
			this.rootElement.removeChild(label1.label);
		}
		this.labels = new haxe_ds_IntMap();
	}
	,get_mouseLabel: function() {
		return this.getLabel(0,0,0);
	}
};
var game_util_TextureHelpers = function() { };
game_util_TextureHelpers.__name__ = true;
game_util_TextureHelpers.makeDataTexture = function(data,width,height) {
	var size = width * height * 4;
	var rgbaFormat = 1023;
	var unsignedByteType = 1009;
	var uvmapping = 300;
	var repeatWrapping = 1000;
	var nearestFilter = 1003;
	var t = new THREE.DataTexture(data,width,height,rgbaFormat,unsignedByteType,uvmapping,repeatWrapping,repeatWrapping,nearestFilter,nearestFilter);
	t.needsUpdate = true;
	return t;
};
game_util_TextureHelpers.makeRedTexture = function(width,height) {
	return game_util_TextureHelpers.makeColorTexture(width,height,255,0,0,128);
};
game_util_TextureHelpers.makeGreenTexture = function(width,height) {
	return game_util_TextureHelpers.makeColorTexture(width,height,0,255,0,128);
};
game_util_TextureHelpers.makeBlueTexture = function(width,height) {
	return game_util_TextureHelpers.makeColorTexture(width,height,0,0,255,128);
};
game_util_TextureHelpers.makeColorTexture = function(width,height,r,g,b,a) {
	var data = new Uint8Array(width * height * 4);
	var i = 0;
	while(i < data.length) {
		data[i] = r;
		data[i + 1] = g;
		data[i + 2] = b;
		data[i + 3] = a;
		i += 4;
	}
	return game_util_TextureHelpers.makeDataTexture(data,width,height);
};
var game_util_UtteranceManager = function() {
	this.onUtteranceCancelled = [];
	this.onUtteranceEnded = [];
	this.onUtteranceProgressed = [];
	this.onUtteranceStarted = [];
	this.onUtteranceError = [];
	this.onUtteranceRequested = [];
};
game_util_UtteranceManager.__name__ = true;
game_util_UtteranceManager.prototype = {
	utter: function(speaker,utterance,voiceUri,volume,rate,pitch) {
		if(pitch == null) {
			pitch = 1.0;
		}
		if(rate == null) {
			rate = 1.0;
		}
		if(volume == null) {
			volume = 1.0;
		}
		var _gthis = this;
		var this1 = this.onUtteranceRequested;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(speaker,utterance);
		}
		if(!SpeechSynth.get_loaded()) {
			var this1 = this.onUtteranceError;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(speaker,utterance);
			}
			return;
		}
		var uri = voiceUri == null ? SpeechSynth.get_voices()[0].voiceURI : voiceUri;
		SpeechSynth.speak(utterance,SpeechSynth.getVoiceByUri(uri),volume,rate,pitch,function() {
			var this1 = _gthis.onUtteranceStarted;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(speaker,utterance);
			}
		},function() {
			var this1 = _gthis.onUtteranceProgressed;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(speaker,utterance);
			}
		},function() {
			var this1 = _gthis.onUtteranceEnded;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(speaker,utterance);
			}
		});
	}
	,cancel: function() {
		SpeechSynth.cancel();
		var this1 = this.onUtteranceCancelled;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener();
		}
	}
};
var game_util_Utterances = function() { };
game_util_Utterances.__name__ = true;
var game_world_HeightmapShader = function() { };
game_world_HeightmapShader.__name__ = true;
game_world_HeightmapShader.makeUniforms = function() {
	var tmp = { type : "v2", value : new THREE.Vector2(1.875,1.875)};
	return { heightMap : { type : "t", value : null}, time : { type : "f", value : 1.0}, noiseContribution : { type : "f", value : 0.5}, scale : tmp, offset : { type : "v2", value : new THREE.Vector2(0,0)}};
};
var game_world_NormalShader = function() { };
game_world_NormalShader.__name__ = true;
game_world_NormalShader.makeUniforms = function() {
	return { height : { type : "f", value : 0.05}, resolution : { type : "v2", value : new THREE.Vector2(50,50)}, heightMap : { type : "t", value : null}};
};
var game_world_InfluenceMapShader = function() { };
game_world_InfluenceMapShader.__name__ = true;
game_world_InfluenceMapShader.makeUniforms = function() {
	var tmp = { type : "v4", value : new THREE.Vector4(1,1,1,1)};
	var tmp1 = { type : "v2", value : new THREE.Vector2(1,1)};
	var tmp2 = { type : "v2", value : new THREE.Vector2(6,6)};
	return { tNormal : { type : "t", value : null}, uNormalScale : { type : "f", value : 3.5}, tDisplacement : { type : "t", value : null}, tDiffuse1 : { type : "t", value : null}, tDiffuse2 : { type : "t", value : null}, tDetail : { type : "t", value : null}, diffuse : tmp, opacity : { type : "f", value : 1}, uDisplacementBias : { type : "f", value : 0.0}, uDisplacementScale : { type : "f", value : 5}, uRepeatBase : tmp1, uRepeatOverlay : tmp2, uOffset : { type : "v2", value : new THREE.Vector2(0,0)}};
};
var game_world_InfluenceMap = function(renderer,id,width,height) {
	this.dirty = true;
	this.renderEnabled = true;
	this.influenceMapShaderMaterial = null;
	this.normalShaderMaterial = null;
	this.heightMapShaderMaterial = null;
	this.influenceUniforms = game_world_InfluenceMapShader.makeUniforms();
	this.normalUniforms = game_world_NormalShader.makeUniforms();
	this.heightMapUniforms = game_world_HeightmapShader.makeUniforms();
	this.animDeltaDir = -1;
	this.animDelta = 0;
	this.quadTarget = null;
	this.normalMap = null;
	this.heightMap = null;
	this.influenceMapInputData = null;
	this.scene = null;
	this.camera = null;
	this.renderer = null;
	this.renderer = renderer;
	this.id = id;
	this.scene = new THREE.Scene();
	this.camera = new THREE.OrthographicCamera(width / -2,width / 2,height / 2,height / -2,-10000,10000);
	this.camera.position.z = 100;
	this.scene.add(this.camera);
	var linearFilter = 1006;
	var rgbFormat = 1022;
	var pars = { minFilter : linearFilter, magFilter : linearFilter, format : rgbFormat};
	this.heightMap = new THREE.WebGLRenderTarget(width,height,pars);
	this.heightMap.texture.generateMipmaps = false;
	this.influenceMapInputData = new Uint8Array(width * height * 4);
	this.influenceMapInputTexture = game_util_TextureHelpers.makeDataTexture(this.influenceMapInputData,width,height);
	this.heightMapUniforms.heightMap.value = this.influenceMapInputTexture;
	this.normalMap = new THREE.WebGLRenderTarget(width,height,pars);
	this.normalMap.texture.generateMipmaps = false;
	this.normalUniforms.height.value = 0.05;
	this.normalUniforms.resolution.value.set(width,height);
	this.normalUniforms.heightMap.value = this.heightMap.texture;
	var diffuseTexture1 = game_util_TextureHelpers.makeColorTexture(64,64,255,0,0,128);
	var diffuseTexture2 = game_util_TextureHelpers.makeColorTexture(64,64,0,0,255,128);
	var detailTexture = game_util_TextureHelpers.makeColorTexture(64,64,0,255,0,128);
	var repeatWrapping = 1000;
	diffuseTexture1.wrapS = diffuseTexture1.wrapT = repeatWrapping;
	diffuseTexture2.wrapS = diffuseTexture2.wrapT = repeatWrapping;
	detailTexture.wrapS = detailTexture.wrapT = repeatWrapping;
	this.influenceUniforms.tNormal.value = this.normalMap.texture;
	this.influenceUniforms.uNormalScale.value = 3.5;
	this.influenceUniforms.tDisplacement.value = this.heightMap.texture;
	this.influenceUniforms.tDiffuse1.value = diffuseTexture1;
	this.influenceUniforms.tDiffuse2.value = diffuseTexture2;
	this.influenceUniforms.tDetail.value = detailTexture;
	this.influenceUniforms.diffuse.value.set(1,1,1,1);
	this.influenceUniforms.uDisplacementScale.value = 5;
	this.influenceUniforms.uRepeatOverlay.value.set(6,6);
	this.heightMapShaderMaterial = new THREE.ShaderMaterial({ vertexShader : game_world_HeightmapShader.vertex, fragmentShader : game_world_HeightmapShader.fragment, uniforms : this.heightMapUniforms, lights : false, fog : false});
	this.normalShaderMaterial = new THREE.ShaderMaterial({ vertexShader : game_world_NormalShader.vertex, fragmentShader : game_world_NormalShader.fragment, uniforms : this.normalUniforms, lights : false, fog : false});
	this.influenceMapShaderMaterial = new THREE.ShaderMaterial({ vertexShader : game_world_InfluenceMapShader.vertex, fragmentShader : game_world_InfluenceMapShader.fragment, uniforms : this.influenceUniforms, lights : false, fog : false, transparent : true});
	var doubleSided = 2;
	this.influenceMapShaderMaterial.side = doubleSided;
	var plane = new THREE.PlaneBufferGeometry(width,height);
	this.quadTarget = new THREE.Mesh(plane,new THREE.MeshBasicMaterial({ color : 0}));
	this.quadTarget.position.z = -500;
	this.scene.add(this.quadTarget);
	var influenceMapMeshGeometry = new THREE.PlaneBufferGeometry(width,height,width,height);
	THREE.BufferGeometryUtils.computeTangents(influenceMapMeshGeometry);
	this.influenceMesh = new THREE.Mesh(influenceMapMeshGeometry,this.influenceMapShaderMaterial);
};
game_world_InfluenceMap.__name__ = true;
game_world_InfluenceMap.prototype = {
	update: function(dt) {
	}
	,render: function(dt) {
		if(!this.renderEnabled) {
			return;
		}
		this.animDelta = Math.max(Math.min(this.animDelta + 0.00075 * this.animDeltaDir,0),0.05);
		this.heightMapUniforms.time.value += dt * this.animDelta;
		this.heightMapUniforms.offset.value.x += dt * 0.05;
		this.quadTarget.material = this.heightMapShaderMaterial;
		this.renderer.setRenderTarget(this.heightMap);
		this.renderer.clear();
		this.renderer.render(this.scene,this.camera);
		this.quadTarget.material = this.normalShaderMaterial;
		this.renderer.setRenderTarget(this.normalMap);
		this.renderer.clear();
		this.renderer.render(this.scene,this.camera);
		this.renderer.setRenderTarget(null);
		this.influenceUniforms.uNormalScale.value = THREE.Math.mapLinear(0.5,0,1,0.6,3.5);
		this.influenceUniforms.uOffset.value.x = 4 * this.heightMapUniforms.offset.value.x;
	}
	,setGridCell: function(x,y,v) {
		var idx = (x + y * (this.heightMap.width | 0)) * 4;
		this.influenceMapInputData[idx] = v;
		this.influenceMapInputData[idx + 1] = v;
		this.influenceMapInputData[idx + 2] = v;
		this.influenceMapInputData[idx + 3] = v;
	}
};
var game_world_InfluenceMapStack = function(world) {
	this.influenceMaps = [];
	this.world = world;
};
game_world_InfluenceMapStack.__name__ = true;
game_world_InfluenceMapStack.prototype = {
	add: function(influenceMap) {
		this.influenceMaps.push(influenceMap);
		this.world.scene.add(influenceMap.influenceMesh);
	}
	,remove: function(influenceMap) {
		HxOverrides.remove(this.influenceMaps,influenceMap);
		this.world.scene.remove(influenceMap.influenceMesh);
	}
	,update: function(dt) {
		var _g = 0;
		var _g1 = this.influenceMaps;
		while(_g < _g1.length) {
			var influencemap = _g1[_g];
			++_g;
			influencemap.update(dt);
			influencemap.render(dt);
		}
	}
};
var game_world_InfluenceMaps = function(world) {
	this.buttons = [];
	this.buttonContainer = window.document.getElementById("influencemapbuttoncontainer");
	this.guis = [];
	this.world = world;
	this.influenceMapViews = new game_world_InfluenceMapStack(world);
	var humanMap = this.makeInfluenceMap("humans",25,$bind(this,this.updateHumansInfluenceMap));
	var zombieMap = this.makeInfluenceMap("zombies",15,$bind(this,this.updateZombiesInfluenceMap));
	var healthMap = this.makeInfluenceMap("healthpickups",-15,$bind(this,this.updateHealthInfluenceMap));
	var weaponMap = this.makeInfluenceMap("weaponpickups",-25,$bind(this,this.updateWeaponsInfluenceMap));
	this.add(humanMap);
	this.add(zombieMap);
	this.add(healthMap);
	this.add(weaponMap);
};
game_world_InfluenceMaps.__name__ = true;
game_world_InfluenceMaps.prototype = {
	add: function(influenceMap) {
		var _gthis = this;
		this.influenceMapViews.add(influenceMap);
		this.guis.push(ui_InfluenceMapView.addGUI(influenceMap));
		var button = window.document.createElement("button");
		button.id = influenceMap.id;
		button.className = "button";
		button.innerHTML = "<h2>" + button.id + "</h2>";
		button.addEventListener("click",function(e) {
			var _g = 0;
			var _g1 = _gthis.influenceMapViews.influenceMaps;
			while(_g < _g1.length) {
				var influenceMap = _g1[_g];
				++_g;
				if(influenceMap.id == button.id) {
					influenceMap.renderEnabled = !influenceMap.renderEnabled;
					influenceMap.influenceMesh.visible = !influenceMap.influenceMesh.visible;
				}
			}
		});
		this.buttons.push(button);
		this.buttonContainer.appendChild(button);
	}
	,remove: function(id) {
		var _g = 0;
		var _g1 = this.influenceMapViews.influenceMaps;
		while(_g < _g1.length) {
			var influenceMap = _g1[_g];
			++_g;
			if(influenceMap.id == id) {
				HxOverrides.remove(this.influenceMapViews.influenceMaps,influenceMap);
			}
		}
		var _g = 0;
		var _g1 = this.guis;
		while(_g < _g1.length) {
			var gui = _g1[_g];
			++_g;
			if(gui.domElement.id == id) {
				HxOverrides.remove(this.guis,gui);
				gui.destroy();
			}
		}
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button.id == id) {
				HxOverrides.remove(this.buttons,button);
			}
		}
	}
	,update: function(dt) {
		this.influenceMapViews.update(dt);
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.guis;
		while(_g < _g1.length) {
			var gui = _g1[_g];
			++_g;
			gui.destroy();
		}
		this.guis = [];
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			button.parentNode.removeChild(button);
		}
		this.buttons = [];
	}
	,makeInfluenceMap: function(id,zPosition,updateFunction) {
		var influenceMap = new game_world_InfluenceMap(this.world.renderer,id,this.world.logicalWorld.width,this.world.logicalWorld.height);
		influenceMap.influenceMesh.rotation.x = -Math.PI / 2;
		influenceMap.influenceMesh.position.y = zPosition;
		var _g = updateFunction;
		var a2 = influenceMap;
		influenceMap.update = function(a1) {
			_g(a1,a2);
		};
		return influenceMap;
	}
	,updateHumansInfluenceMap: function(dt,influenceMap) {
		var logicalWorld = this.world.logicalWorld;
		var _g = 0;
		var _g1 = logicalWorld.humans;
		while(_g < _g1.length) {
			var npc = _g1[_g];
			++_g;
			var x = npc.x + logicalWorld.width / 2 | 0;
			var y = (logicalWorld.height | 0) - (npc.y + logicalWorld.height / 2 | 0);
			influenceMap.setGridCell(x,y,255);
			influenceMap.setGridCell(x + 1,y,255);
			influenceMap.setGridCell(x - 1,y,255);
			influenceMap.setGridCell(x,y + 1,255);
			influenceMap.setGridCell(x,y - 1,255);
			influenceMap.setGridCell(x + 1,y - 1,255);
			influenceMap.setGridCell(x - 1,y + 1,255);
			influenceMap.setGridCell(x + 1,y + 1,255);
			influenceMap.setGridCell(x - 1,y - 1,255);
		}
		influenceMap.influenceMapInputTexture.needsUpdate = true;
	}
	,updateZombiesInfluenceMap: function(dt,influenceMap) {
		var logicalWorld = this.world.logicalWorld;
		var _g = 0;
		var _g1 = logicalWorld.zombies;
		while(_g < _g1.length) {
			var npc = _g1[_g];
			++_g;
			var x = npc.x + logicalWorld.width / 2 | 0;
			var y = (logicalWorld.height | 0) - (npc.y + logicalWorld.height / 2 | 0);
			influenceMap.setGridCell(x,y,255);
			influenceMap.setGridCell(x + 1,y,255);
			influenceMap.setGridCell(x - 1,y,255);
			influenceMap.setGridCell(x,y + 1,255);
			influenceMap.setGridCell(x,y - 1,255);
			influenceMap.setGridCell(x + 1,y - 1,255);
			influenceMap.setGridCell(x - 1,y + 1,255);
			influenceMap.setGridCell(x + 1,y + 1,255);
			influenceMap.setGridCell(x - 1,y - 1,255);
		}
		influenceMap.influenceMapInputTexture.needsUpdate = true;
	}
	,updateHealthInfluenceMap: function(dt,influenceMap) {
		var logicalWorld = this.world.logicalWorld;
		var _g = 0;
		var _g1 = logicalWorld.healths;
		while(_g < _g1.length) {
			var pickup = _g1[_g];
			++_g;
			var x = pickup.x + logicalWorld.width / 2 | 0;
			var y = (logicalWorld.height | 0) - (pickup.y + logicalWorld.height / 2 | 0);
			influenceMap.setGridCell(x,y,255);
			influenceMap.setGridCell(x + 1,y,255);
			influenceMap.setGridCell(x - 1,y,255);
			influenceMap.setGridCell(x,y + 1,255);
			influenceMap.setGridCell(x,y - 1,255);
			influenceMap.setGridCell(x + 1,y - 1,255);
			influenceMap.setGridCell(x - 1,y + 1,255);
			influenceMap.setGridCell(x + 1,y + 1,255);
			influenceMap.setGridCell(x - 1,y - 1,255);
		}
		influenceMap.influenceMapInputTexture.needsUpdate = true;
	}
	,updateWeaponsInfluenceMap: function(dt,influenceMap) {
		var logicalWorld = this.world.logicalWorld;
		var _g = 0;
		var _g1 = logicalWorld.weapons;
		while(_g < _g1.length) {
			var pickup = _g1[_g];
			++_g;
			var x = pickup.x + logicalWorld.width / 2 | 0;
			var y = (logicalWorld.height | 0) - (pickup.y + logicalWorld.height / 2 | 0);
			influenceMap.setGridCell(x,y,255);
			influenceMap.setGridCell(x + 1,y,255);
			influenceMap.setGridCell(x - 1,y,255);
			influenceMap.setGridCell(x,y + 1,255);
			influenceMap.setGridCell(x,y - 1,255);
			influenceMap.setGridCell(x + 1,y - 1,255);
			influenceMap.setGridCell(x - 1,y + 1,255);
			influenceMap.setGridCell(x + 1,y + 1,255);
			influenceMap.setGridCell(x - 1,y - 1,255);
		}
		influenceMap.influenceMapInputTexture.needsUpdate = true;
	}
};
var game_world_LogicalWorld = function(world,width,height) {
	this.postUpdate = [];
	this.preUpdate = [];
	this.updateCount = 0;
	this.onWeaponRemoved = [];
	this.onWeaponAdded = [];
	this.onHealthRemoved = [];
	this.onHealthAdded = [];
	this.onZombieActedIdly = [];
	this.onHumanActedIdly = [];
	this.onNPCActedIdly = [];
	this.onZombieActed = [];
	this.onHumanActed = [];
	this.onNPCActed = [];
	this.onZombieThinked = [];
	this.onHumanThinked = [];
	this.onNPCThinked = [];
	this.onZombieMovedOnWorldGrid = null;
	this.onHumanMovedOnWorldGrid = null;
	this.onNPCMovedOnWorldGrid = null;
	this.onZombieMoved = [];
	this.onHumanMoved = [];
	this.onNPCMoved = [];
	this.onZombieRemoved = [];
	this.onZombieAdded = [];
	this.onHumanRemoved = [];
	this.onHumanAdded = [];
	this.weapons = [];
	this.healths = [];
	this.zombies = [];
	this.humans = [];
	var _gthis = this;
	this.width = width;
	this.height = height;
	this.onHumanAdded.push($bind(world,world.onHumanAdded));
	this.onHumanRemoved.push($bind(world,world.onHumanRemoved));
	this.onZombieAdded.push($bind(world,world.onZombieAdded));
	this.onZombieRemoved.push($bind(world,world.onZombieRemoved));
	this.onNPCMoved.push($bind(world,world.onNPCMoved));
	this.onHealthAdded.push($bind(world,world.onHealthAdded));
	this.onHealthRemoved.push($bind(world,world.onHealthRemoved));
	this.onWeaponAdded.push($bind(world,world.onWeaponAdded));
	this.onWeaponRemoved.push($bind(world,world.onWeaponRemoved));
	this.onNPCMovedOnWorldGrid = new game_util_QuantizedMovementObserver(1,1,this.onNPCMoved);
	this.onHumanMovedOnWorldGrid = new game_util_QuantizedMovementObserver(1,1,this.onHumanMoved);
	this.onZombieMovedOnWorldGrid = new game_util_QuantizedMovementObserver(1,1,this.onZombieMoved);
	this.onNPCMovedOnWorldGrid.onChanged.push($bind(world,world.onNPCMovedOnWorldGrid));
	this.onHumanMovedOnWorldGrid.onChanged.push($bind(world,world.onHumanMovedOnWorldGrid));
	this.onZombieMovedOnWorldGrid.onChanged.push($bind(world,world.onZombieMovedOnWorldGrid));
	this.chatterer = new game_ai_ChatterDirector(world);
	this.chatterer.onUtteranceChanged.push(function(before,after) {
		var tmp = before != null;
		if(after != null) {
			var s = after.utterance;
			var who = after.who;
			if(who == null) {
				who = _gthis.humans[0];
			}
			world.utteranceManager.utter(who,s);
		}
	});
};
game_world_LogicalWorld.__name__ = true;
game_world_LogicalWorld.prototype = {
	update: function(dt,skipHumans) {
		var this1 = this.preUpdate;
		var data0 = this.updateCount;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(data0);
		}
		if(!skipHumans) {
			this.updateHumans(dt);
		}
		this.updateZombies(dt);
		this.updateChatterer(dt);
		var this1 = this.postUpdate;
		var data0 = this.updateCount;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(data0);
		}
		this.updateCount++;
	}
	,updateHumans: function(dt) {
		var _g = 0;
		var _g1 = this.humans;
		while(_g < _g1.length) {
			var human = _g1[_g];
			++_g;
			human.update(dt);
		}
	}
	,updateZombies: function(dt) {
		var _g = 0;
		var _g1 = this.zombies;
		while(_g < _g1.length) {
			var zombie = _g1[_g];
			++_g;
			zombie.update(dt);
		}
	}
	,updateChatterer: function(dt) {
		this.chatterer.think(dt);
	}
	,addHuman: function(human) {
		var _gthis = this;
		this.humans.push(human);
		human.onMoved.push(function(oldX,oldY,newX,newY) {
			var this1 = _gthis.onNPCMoved;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(human,oldX,oldY,newX,newY);
			}
			var this1 = _gthis.onHumanMoved;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(human,oldX,oldY,newX,newY);
			}
		});
		human.onThinked.push(function(who) {
			var this1 = _gthis.onNPCThinked;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(human);
			}
			var this1 = _gthis.onHumanThinked;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(human);
			}
		});
		human.onActed.push(function(who) {
			var this1 = _gthis.onNPCActed;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(human);
			}
			var this1 = _gthis.onHumanActed;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(human);
			}
		});
		human.onActedIdly.push(function(who) {
			var this1 = _gthis.onNPCActedIdly;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(human);
			}
			var this1 = _gthis.onHumanActedIdly;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(human);
			}
		});
		var this1 = this.onHumanAdded;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(human);
		}
	}
	,removeHuman: function(human) {
		HxOverrides.remove(this.humans,human);
		human.onMoved = [];
		human.onThinked = [];
		human.onActed = [];
		human.onActedIdly = [];
		var this1 = this.onHumanRemoved;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(human);
		}
	}
	,addZombie: function(zombie) {
		var _gthis = this;
		this.zombies.push(zombie);
		zombie.onMoved.push(function(oldX,oldY,newX,newY) {
			var this1 = _gthis.onNPCMoved;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(zombie,oldX,oldY,newX,newY);
			}
			var this1 = _gthis.onZombieMoved;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(zombie,oldX,oldY,newX,newY);
			}
		});
		zombie.onThinked.push(function(who) {
			var this1 = _gthis.onNPCThinked;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(zombie);
			}
			var this1 = _gthis.onZombieThinked;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(zombie);
			}
		});
		zombie.onActed.push(function(who) {
			var this1 = _gthis.onNPCActed;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(zombie);
			}
			var this1 = _gthis.onZombieActed;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(zombie);
			}
		});
		zombie.onActedIdly.push(function(who) {
			var this1 = _gthis.onNPCActedIdly;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(zombie);
			}
			var this1 = _gthis.onZombieActedIdly;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(zombie);
			}
		});
		var this1 = this.onZombieAdded;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(zombie);
		}
	}
	,removeZombie: function(zombie) {
		HxOverrides.remove(this.zombies,zombie);
		zombie.onMoved = [];
		zombie.onThinked = [];
		zombie.onActed = [];
		zombie.onActedIdly = [];
		var this1 = this.onZombieRemoved;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(zombie);
		}
	}
	,addHealthPickup: function(health) {
		var _gthis = this;
		this.healths.push(health);
		health.onHealthTaken.push(function(who,what) {
			var this1 = _gthis.onHealthRemoved;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(who,what);
			}
		});
		var this1 = this.onHealthAdded;
		var data0 = null;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(data0,health);
		}
	}
	,removeHealthPickup: function(health) {
		HxOverrides.remove(this.healths,health);
		health.onHealthTaken = [];
		var this1 = this.onHealthRemoved;
		var data0 = null;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(data0,health);
		}
	}
	,addWeaponPickup: function(weapon) {
		var _gthis = this;
		this.weapons.push(weapon);
		weapon.onWeaponTaken.push(function(who,what) {
			var this1 = _gthis.onWeaponRemoved;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(who,what);
			}
		});
		var this1 = this.onWeaponAdded;
		var data0 = null;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(data0,weapon);
		}
	}
	,removeWeaponPickup: function(weapon) {
		HxOverrides.remove(this.weapons,weapon);
		weapon.onWeaponTaken = [];
		var this1 = this.onWeaponRemoved;
		var data0 = null;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(data0,weapon);
		}
	}
};
var game_world_ShapeMesh = function(userData,width,height,depth,x,y,z,color,specular) {
	if(specular == null) {
		specular = 16777215;
	}
	if(color == null) {
		color = 16777215;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(depth == null) {
		depth = 20;
	}
	if(height == null) {
		height = 80;
	}
	if(width == null) {
		width = 20;
	}
	var geometry = new THREE.BoxGeometry(width,height,depth);
	geometry.computeBoundingBox();
	var material = new THREE.MeshPhongMaterial({ color : color, specular : specular, shininess : 0});
	this.mesh = new THREE.Mesh(geometry,material);
	this.mesh.position.set(x,y + height / 2,z);
	this.mesh.userData = userData;
};
game_world_ShapeMesh.__name__ = true;
game_world_ShapeMesh.prototype = {
	updateForRendering: function(dt) {
	}
};
var game_world_World = function(containerId,widthInCells,heightInCells) {
	this.npcMotionTweens = [];
	this.onNPCMovementAnimationEnded = [];
	this.onNPCMovementAnimationStarted = [];
	this.pickupGroup = new THREE.Group();
	this.pickups = new haxe_ds_ObjectMap();
	this.npcGroup = new THREE.Group();
	this.npcs = new haxe_ds_ObjectMap();
	this.logicalWorld = null;
	this.utteranceManager = null;
	this.labels = null;
	this.scene = null;
	this.renderer = null;
	this.container = null;
	this.camera = null;
	this.pickupIntersectionChecker = null;
	this.npcIntersectionChecker = null;
	var _gthis = this;
	this.container = window.document.getElementById(containerId);
	this.container.innerHTML = "";
	var containerWidth = this.container.offsetWidth;
	var containerHeight = this.container.offsetHeight;
	var canvas = window.document.createElement("canvas");
	canvas.width = containerWidth;
	canvas.height = containerHeight;
	this.renderer = new THREE.WebGLRenderer({ canvas : canvas, antialias : false});
	this.renderer.sortObjects = true;
	this.renderer.setPixelRatio(window.devicePixelRatio);
	this.renderer.setSize(containerWidth,containerHeight);
	this.container.appendChild(this.renderer.domElement);
	this.scene = new THREE.Scene();
	this.scene.background = new THREE.Color(13421772);
	this.scene.add(new THREE.AmbientLight(4194559));
	var pointLight = new THREE.PointLight(16777215,6,40);
	pointLight.position.set(0,30,0);
	this.scene.add(pointLight);
	var aspect = containerWidth / containerHeight;
	this.camera = new THREE.OrthographicCamera(-containerWidth / 2 * aspect,containerWidth / 2 * aspect,containerHeight / 2,-containerHeight / 2,1,10000);
	this.camera.zoom = 8;
	this.camera.position.set(100,100,100);
	this.camera.lookAt(this.scene.position);
	this.camera.updateProjectionMatrix();
	this.scene.add(this.camera);
	var controls = new THREE.OrbitControls(this.camera,this.renderer.domElement);
	controls.minZoom = 8;
	controls.maxZoom = 100;
	controls.zoomSpeed = 5;
	controls.enableKeys = false;
	this.logicalWorld = new game_world_LogicalWorld(this,widthInCells,heightInCells);
	var gridSize = Math.max(widthInCells,heightInCells) | 0;
	var grid = new THREE.GridHelper(gridSize,gridSize);
	this.scene.add(grid);
	this.scene.add(this.npcGroup);
	this.scene.add(this.pickupGroup);
	this.labels = new game_util_TextLabels(this.container);
	var screenX = function(x) {
		return (x + 1.0) * containerWidth / 2.0;
	};
	var screenY = function(y) {
		return (1.0 - y) * containerHeight / 2.0;
	};
	var toScreen = function(x,y,z) {
		var vector = new THREE.Vector3(x,y,z);
		vector.project(_gthis.camera);
		return { x : screenX(vector.x), y : screenY(vector.y)};
	};
	var setMouseLabelAboveObject = function(o,text) {
		var mesh = o;
		var temp = new THREE.Vector3(0,0,0);
		var geometry = mesh.geometry;
		geometry.boundingBox.getCenter(temp);
		var meshPos = mesh.position;
		var pos = toScreen(meshPos.x + temp.x,meshPos.y + geometry.boundingBox.max.y,meshPos.z + temp.z);
		var label = _gthis.labels.get_mouseLabel();
		label.set_text(text);
		label.set_width(500);
		label.set_x(pos.x - label.get_width() / 2);
		label.set_y(pos.y);
	};
	var hideMouseLabel = function() {
		var label = _gthis.labels.get_mouseLabel();
		label.set_text("");
		label.set_x(-1000);
		label.set_y(-1000);
	};
	this.npcIntersectionChecker = new game_util_IntersectionChecker(this.camera,this.npcGroup.children,this.renderer.domElement);
	this.npcIntersectionChecker.onIntersectionChanged.push(function(last,current,x,y) {
	});
	this.npcIntersectionChecker.onEnter.push(function(entered,x,y) {
		setMouseLabelAboveObject(entered,entered.userData.name);
	});
	this.npcIntersectionChecker.onExit.push(function(exited,x,y) {
		hideMouseLabel();
	});
	this.pickupIntersectionChecker = new game_util_IntersectionChecker(this.camera,this.pickupGroup.children,this.renderer.domElement);
	this.pickupIntersectionChecker.onIntersectionChanged.push(function(last,current,x,y) {
	});
	this.pickupIntersectionChecker.onEnter.push(function(entered,x,y) {
		setMouseLabelAboveObject(entered,entered.userData.name);
	});
	this.pickupIntersectionChecker.onExit.push(function(exited,x,y) {
		hideMouseLabel();
	});
	var utteranceBobber = false;
	this.utteranceManager = new game_util_UtteranceManager();
	this.utteranceManager.onUtteranceRequested.push(function(npc,utterance) {
		var mesh = _gthis.npcs.h[npc.__id__].mesh;
		var geometry = mesh.geometry;
		var temp = new THREE.Vector3(0,0,0);
		geometry.boundingBox.getCenter(temp);
		var meshPos = mesh.position;
		var pos = toScreen(meshPos.x + temp.x,meshPos.y + geometry.boundingBox.max.y,meshPos.z + temp.z);
		var label = _gthis.labels.getLabel(1,0,0);
		label.set_width(500);
		label.set_text("");
		label.set_x(pos.x - label.get_width() / 2);
		label.set_y(pos.y);
	});
	this.utteranceManager.onUtteranceProgressed.push(function(npc,utterance) {
		var label = _gthis.labels.labels.h[1];
		label.set_text(utterance);
		if(utteranceBobber) {
			label.set_y(label.get_y() + 10);
		} else {
			label.set_y(label.get_y() - 15);
		}
		utteranceBobber = !utteranceBobber;
	});
	this.utteranceManager.onUtteranceEnded.push(function(npc,utterance) {
		var label = _gthis.labels.labels.h[1];
		label.set_text("");
		label.set_x(-1000);
		label.set_y(-1000);
	});
	this.utteranceManager.onUtteranceCancelled.push(function() {
		var label = _gthis.labels.labels.h[1];
		label.set_text("");
		label.set_x(-1000);
		label.set_y(-1000);
	});
};
game_world_World.__name__ = true;
game_world_World.prototype = {
	render: function(dt) {
		this.npcIntersectionChecker.checkIntersection();
		this.pickupIntersectionChecker.checkIntersection();
		var _g = 0;
		var _g1 = this.npcMotionTweens;
		while(_g < _g1.length) {
			var tween = _g1[_g];
			++_g;
			if(tween.currentTime == null) {
				tween.set_currentTime(0);
			}
			tween.stepTo(tween.currentTime + dt,null,false);
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.npcMotionTweens;
		while(_g1 < _g2.length) {
			var tween = _g2[_g1];
			++_g1;
			if(tween.isCurrentTimeInBounds()) {
				_g.push(tween);
			}
		}
		this.npcMotionTweens = _g;
		var npc = this.npcs.iterator();
		while(npc.hasNext()) {
			var npc1 = npc.next();
			npc1.updateForRendering(dt);
		}
		var pickup = this.pickups.iterator();
		while(pickup.hasNext()) {
			var pickup1 = pickup.next();
			pickup1.updateForRendering(dt);
		}
		this.renderer.render(this.scene,this.camera);
	}
	,onNPCMoved: function(npc,oldX,oldY,newX,newY) {
		this.startNPCMovementAnimation(npc);
	}
	,onNPCMovedOnWorldGrid: function(npc,oldX,oldY,oldGridX,oldGridY,newGridX,newGridY) {
	}
	,onHumanMovedOnWorldGrid: function(human,oldX,oldY,oldGridX,oldGridY,newGridX,newGridY) {
	}
	,onZombieMovedOnWorldGrid: function(zombie,oldX,oldY,oldGridX,oldGridY,newGridX,newGridY) {
	}
	,onHumanAdded: function(human) {
		var shape = new game_world_ShapeMesh(human,1.0,1.8,1.0,human.x,0,human.y,5635925);
		this.npcGroup.add(shape.mesh);
		this.npcs.set(human,shape);
	}
	,onZombieAdded: function(zombie) {
		var shape = new game_world_ShapeMesh(zombie,1.0,1.6,1.0,zombie.x,0,zombie.y,14487825);
		this.npcGroup.add(shape.mesh);
		this.npcs.set(zombie,shape);
	}
	,onHumanRemoved: function(human) {
		this.npcGroup.remove(this.npcs.h[human.__id__].mesh);
	}
	,onZombieRemoved: function(zombie) {
		this.npcGroup.remove(this.npcs.h[zombie.__id__].mesh);
	}
	,onHealthAdded: function(who,health) {
		var shape = new game_world_ShapeMesh(health,1.0,1.0,1.0,health.x,0,health.y,11141290);
		var tmp = Math.random();
		shape.mesh.rotation.y = tmp * Math.PI;
		shape.updateForRendering = function(dt) {
			shape.mesh.rotation.y += dt;
		};
		this.pickupGroup.add(shape.mesh);
		this.pickups.set(health,shape);
	}
	,onWeaponAdded: function(who,weapon) {
		var shape = new game_world_ShapeMesh(weapon,1.0,1.0,1.0,weapon.x,0,weapon.y,43707);
		var tmp = Math.random();
		shape.mesh.rotation.y = tmp * Math.PI;
		shape.updateForRendering = function(dt) {
			shape.mesh.rotation.y += dt;
		};
		this.pickupGroup.add(shape.mesh);
		this.pickups.set(weapon,shape);
	}
	,onHealthRemoved: function(who,health) {
		this.pickupGroup.remove(this.pickups.h[health.__id__].mesh);
	}
	,onWeaponRemoved: function(who,weapon) {
		this.pickupGroup.remove(this.pickups.h[weapon.__id__].mesh);
	}
	,startNPCMovementAnimation: function(npc) {
		var mesh = this.npcs.h[npc.__id__].mesh;
		var this1 = this.onNPCMovementAnimationStarted;
		var data1 = mesh.position.x;
		var data2 = mesh.position.z;
		var data3 = npc.x;
		var data4 = npc.y;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(npc,data1,data2,data3,data4);
		}
		this.npcMotionTweens.push(new macrotween_Tween([new macrotween_Tweener(0,npc.x,true,false,function() {
			return mesh.position.x;
		},function(_macroTween_startValue,_macroTween_endValue,_macroTween_tween,_macroTween_time) {
			var start = _macroTween_tween.get_startTime();
			var end = _macroTween_tween.get_endTime();
			var _macroTween_progress = start == end ? 0.5 : Math.min(1,Math.max(0,(_macroTween_time - start) / (end - start)));
			if(_macroTween_tween.ease != null) {
				_macroTween_progress = _macroTween_tween.ease(_macroTween_progress);
			}
			mesh.position.x = _macroTween_startValue + _macroTween_progress * (_macroTween_endValue - _macroTween_startValue);
		}),new macrotween_Tweener(0,npc.y,true,false,function() {
			return mesh.position.z;
		},function(_macroTween_startValue,_macroTween_endValue,_macroTween_tween,_macroTween_time) {
			var start = _macroTween_tween.get_startTime();
			var end = _macroTween_tween.get_endTime();
			var _macroTween_progress = start == end ? 0.5 : Math.min(1,Math.max(0,(_macroTween_time - start) / (end - start)));
			if(_macroTween_tween.ease != null) {
				_macroTween_progress = _macroTween_tween.ease(_macroTween_progress);
			}
			mesh.position.z = _macroTween_startValue + _macroTween_progress * (_macroTween_endValue - _macroTween_startValue);
		})],1,0,macrotween_Ease.expoInOut));
		var this1 = this.onNPCMovementAnimationEnded;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(npc);
		}
	}
};
var game_world_WorldGenerator = function() {
};
game_world_WorldGenerator.__name__ = true;
game_world_WorldGenerator.prototype = {
	create: function() {
		var world = new game_world_World("game",64,64);
		return world;
	}
	,createHumans: function() {
		var humans = [];
		var x = -18.5;
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			humans.push(new game_npcs_humans_Human(x,(Math.random() * 20 | 0) + 0.5));
			x += 2.5;
		}
		return humans;
	}
	,createZombies: function() {
		var zombies = [];
		var x = -12.5;
		zombies.push(new game_npcs_zombies_EverydayZombie(x,(-Math.random() * 20 | 0) - 0.5));
		x += 2.5;
		zombies.push(new game_npcs_zombies_EverydayZombie(x,(-Math.random() * 20 | 0) - 0.5));
		x += 2.5;
		zombies.push(new game_npcs_zombies_EverydayZombie(x,(-Math.random() * 20 | 0) - 0.5));
		x += 2.5;
		zombies.push(new game_npcs_zombies_EverydayZombie(x,(-Math.random() * 20 | 0) - 0.5));
		x += 2.5;
		zombies.push(new game_npcs_zombies_EverydayZombie(x,(-Math.random() * 20 | 0) - 0.5));
		x += 2.5;
		zombies.push(new game_npcs_zombies_EverydayZombie(x,(-Math.random() * 20 | 0) - 0.5));
		x += 2.5;
		zombies.push(new game_npcs_zombies_EverydayZombie(x,(-Math.random() * 20 | 0) - 0.5));
		x += 2.5;
		zombies.push(new game_npcs_zombies_EverydayZombie(x,(-Math.random() * 20 | 0) - 0.5));
		x += 2.5;
		zombies.push(new game_npcs_zombies_EverydayZombie(x,(-Math.random() * 20 | 0) - 0.5));
		x += 2.5;
		zombies.push(new game_npcs_zombies_EverydayZombie(x,(-Math.random() * 20 | 0) - 0.5));
		x += 2.5;
		zombies.push(new game_npcs_zombies_EverydayZombie(x,(-Math.random() * 20 | 0) - 0.5));
		x += 2.5;
		zombies.push(new game_npcs_zombies_EverydayZombie(x,(-Math.random() * 20 | 0) - 0.5));
		x += 2.5;
		return zombies;
	}
	,createHealthPickups: function() {
		var healths = [];
		var r = this.randomCell();
		healths.push(new game_pickups_health_Pills(r.x,r.y));
		var r = this.randomCell();
		healths.push(new game_pickups_health_Pills(r.x,r.y));
		var r = this.randomCell();
		healths.push(new game_pickups_health_Pills(r.x,r.y));
		var r = this.randomCell();
		healths.push(new game_pickups_health_Pills(r.x,r.y));
		var r = this.randomCell();
		healths.push(new game_pickups_health_Pills(r.x,r.y));
		var r = this.randomCell();
		healths.push(new game_pickups_health_Pills(r.x,r.y));
		var r = this.randomCell();
		healths.push(new game_pickups_health_Pills(r.x,r.y));
		var r = this.randomCell();
		healths.push(new game_pickups_health_Pills(r.x,r.y));
		var r = this.randomCell();
		healths.push(new game_pickups_health_Pills(r.x,r.y));
		var r = this.randomCell();
		healths.push(new game_pickups_health_Pills(r.x,r.y));
		return healths;
	}
	,createWeaponPickups: function() {
		var weapons = [];
		var r = this.randomCell();
		weapons.push(new game_pickups_weapons_Crowbar(r.x,r.y));
		var r = this.randomCell();
		weapons.push(new game_pickups_weapons_Crowbar(r.x,r.y));
		var r = this.randomCell();
		weapons.push(new game_pickups_weapons_Crowbar(r.x,r.y));
		var r = this.randomCell();
		weapons.push(new game_pickups_weapons_Crowbar(r.x,r.y));
		var r = this.randomCell();
		weapons.push(new game_pickups_weapons_Crowbar(r.x,r.y));
		var r = this.randomCell();
		weapons.push(new game_pickups_weapons_Glock17(r.x,r.y));
		var r = this.randomCell();
		weapons.push(new game_pickups_weapons_Glock17(r.x,r.y));
		var r = this.randomCell();
		weapons.push(new game_pickups_weapons_Glock17(r.x,r.y));
		var r = this.randomCell();
		weapons.push(new game_pickups_weapons_Glock17(r.x,r.y));
		var r = this.randomCell();
		weapons.push(new game_pickups_weapons_Glock17(r.x,r.y));
		return weapons;
	}
	,randomCell: function() {
		var rx = Math.random() * 32 - 16 | 0;
		var ry = Math.random() * 32 - 16 | 0;
		return { x : rx, y : ry};
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.prototype = {
	keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
};
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = true;
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = true;
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_three_ArrayLike = {};
js_three_ArrayLike.get = function(this1,key) {
	return this1[key];
};
js_three_ArrayLike.arrayWrite = function(this1,k,v) {
	this1[k] = v;
	return v;
};
var macrotween_Ease = function() { };
macrotween_Ease.__name__ = true;
macrotween_Ease.atanIn = function(t) {
	var a = 15;
	return (function(t) {
		var a1 = a;
		if(a1 == null) {
			a1 = 15;
		}
		var a2 = a1;
		var ease = function(t) {
			var a = a2;
			if(a == null) {
				a = 15;
			}
			return Math.atan(t * a) / Math.atan(a);
		};
		return (function(t) {
			var it = 1 - t;
			return 1 - ease(it);
		})(t);
	})(t);
};
macrotween_Ease.atanInOut = function(t) {
	var a = 15;
	return (function(t) {
		var a1 = a;
		if(a1 == null) {
			a1 = 15;
		}
		var a2 = a1;
		var ease1 = function(t) {
			var a = a2;
			if(a == null) {
				a = 15;
			}
			var a1 = a;
			var ease = function(t) {
				var a = a1;
				if(a == null) {
					a = 15;
				}
				return Math.atan(t * a) / Math.atan(a);
			};
			return (function(t) {
				var it = 1 - t;
				return 1 - ease(it);
			})(t);
		};
		var a3 = a1;
		var ease2 = function(t) {
			var a = a3;
			if(a == null) {
				a = 15;
			}
			return Math.atan(t * a) / Math.atan(a);
		};
		return (function(t) {
			if(t < 0.5) {
				return 0.5 * ease1(t * 2);
			} else {
				return 0.5 + 0.5 * ease2((t - 0.5) * 2);
			}
		})(t);
	})(t);
};
macrotween_Ease.atanOut = function(t) {
	var a = 15;
	return (function(t) {
		var a1 = a;
		if(a1 == null) {
			a1 = 15;
		}
		return Math.atan(t * a1) / Math.atan(a1);
	})(t);
};
macrotween_Ease.atanOutAdv = function(t,a) {
	if(a == null) {
		a = 15;
	}
	return Math.atan(t * a) / Math.atan(a);
};
macrotween_Ease.atanInAdv = function(t,a) {
	if(a == null) {
		a = 15;
	}
	var a1 = a;
	var ease = function(t) {
		var a = a1;
		if(a == null) {
			a = 15;
		}
		return Math.atan(t * a) / Math.atan(a);
	};
	return (function(t) {
		var it = 1 - t;
		return 1 - ease(it);
	})(t);
};
macrotween_Ease.atanInOutAdv = function(t,a) {
	if(a == null) {
		a = 15;
	}
	var a1 = a;
	var ease1 = function(t) {
		var a = a1;
		if(a == null) {
			a = 15;
		}
		var a2 = a;
		var ease = function(t) {
			var a = a2;
			if(a == null) {
				a = 15;
			}
			return Math.atan(t * a) / Math.atan(a);
		};
		return (function(t) {
			var it = 1 - t;
			return 1 - ease(it);
		})(t);
	};
	var a2 = a;
	var ease2 = function(t) {
		var a = a2;
		if(a == null) {
			a = 15;
		}
		return Math.atan(t * a) / Math.atan(a);
	};
	return (function(t) {
		if(t < 0.5) {
			return 0.5 * ease1(t * 2);
		} else {
			return 0.5 + 0.5 * ease2((t - 0.5) * 2);
		}
	})(t);
};
macrotween_Ease.backIn = function(t) {
	var s = 1.70158;
	return (function(t) {
		var s1 = s;
		if(s1 == null) {
			s1 = 1.70158;
		}
		return t * t * ((s1 + 1) * t - s1);
	})(t);
};
macrotween_Ease.backOut = function(t) {
	var s = 1.70158;
	return (function(t) {
		var s1 = s;
		if(s1 == null) {
			s1 = 1.70158;
		}
		var s2 = s1;
		var ease = function(t) {
			var s = s2;
			if(s == null) {
				s = 1.70158;
			}
			return t * t * ((s + 1) * t - s);
		};
		return (function(t) {
			var it = 1 - t;
			return 1 - ease(it);
		})(t);
	})(t);
};
macrotween_Ease.backInOut = function(t) {
	var s = 1.70158;
	return (function(t) {
		var s1 = s;
		if(s1 == null) {
			s1 = 1.70158;
		}
		var s2 = s1;
		var ease1 = function(t) {
			var s = s2;
			if(s == null) {
				s = 1.70158;
			}
			return t * t * ((s + 1) * t - s);
		};
		var s3 = s1;
		var ease2 = function(t) {
			var s = s3;
			if(s == null) {
				s = 1.70158;
			}
			var s1 = s;
			var ease = function(t) {
				var s = s1;
				if(s == null) {
					s = 1.70158;
				}
				return t * t * ((s + 1) * t - s);
			};
			return (function(t) {
				var it = 1 - t;
				return 1 - ease(it);
			})(t);
		};
		return (function(t) {
			if(t < 0.5) {
				return 0.5 * ease1(t * 2);
			} else {
				return 0.5 + 0.5 * ease2((t - 0.5) * 2);
			}
		})(t);
	})(t);
};
macrotween_Ease.backOutIn = function(t) {
	var s = 1.70158;
	return (function(t) {
		var s1 = s;
		if(s1 == null) {
			s1 = 1.70158;
		}
		var s2 = s1;
		var ease1 = function(t) {
			var s = s2;
			if(s == null) {
				s = 1.70158;
			}
			var s1 = s;
			var ease = function(t) {
				var s = s1;
				if(s == null) {
					s = 1.70158;
				}
				return t * t * ((s + 1) * t - s);
			};
			return (function(t) {
				var it = 1 - t;
				return 1 - ease(it);
			})(t);
		};
		var s3 = s1;
		var ease2 = function(t) {
			var s = s3;
			if(s == null) {
				s = 1.70158;
			}
			return t * t * ((s + 1) * t - s);
		};
		return (function(t) {
			if(t < 0.5) {
				return 0.5 * ease1(t * 2);
			} else {
				return 0.5 + 0.5 * ease2((t - 0.5) * 2);
			}
		})(t);
	})(t);
};
macrotween_Ease.backInAdv = function(t,s) {
	if(s == null) {
		s = 1.70158;
	}
	return t * t * ((s + 1) * t - s);
};
macrotween_Ease.backOutAdv = function(t,s) {
	if(s == null) {
		s = 1.70158;
	}
	var s1 = s;
	var ease = function(t) {
		var s = s1;
		if(s == null) {
			s = 1.70158;
		}
		return t * t * ((s + 1) * t - s);
	};
	return (function(t) {
		var it = 1 - t;
		return 1 - ease(it);
	})(t);
};
macrotween_Ease.backInOutAdv = function(t,s) {
	if(s == null) {
		s = 1.70158;
	}
	var s1 = s;
	var ease1 = function(t) {
		var s = s1;
		if(s == null) {
			s = 1.70158;
		}
		return t * t * ((s + 1) * t - s);
	};
	var s2 = s;
	var ease2 = function(t) {
		var s = s2;
		if(s == null) {
			s = 1.70158;
		}
		var s1 = s;
		var ease = function(t) {
			var s = s1;
			if(s == null) {
				s = 1.70158;
			}
			return t * t * ((s + 1) * t - s);
		};
		return (function(t) {
			var it = 1 - t;
			return 1 - ease(it);
		})(t);
	};
	return (function(t) {
		if(t < 0.5) {
			return 0.5 * ease1(t * 2);
		} else {
			return 0.5 + 0.5 * ease2((t - 0.5) * 2);
		}
	})(t);
};
macrotween_Ease.backOutInAdv = function(t,s) {
	if(s == null) {
		s = 1.70158;
	}
	var s1 = s;
	var ease1 = function(t) {
		var s = s1;
		if(s == null) {
			s = 1.70158;
		}
		var s2 = s;
		var ease = function(t) {
			var s = s2;
			if(s == null) {
				s = 1.70158;
			}
			return t * t * ((s + 1) * t - s);
		};
		return (function(t) {
			var it = 1 - t;
			return 1 - ease(it);
		})(t);
	};
	var s2 = s;
	var ease2 = function(t) {
		var s = s2;
		if(s == null) {
			s = 1.70158;
		}
		return t * t * ((s + 1) * t - s);
	};
	return (function(t) {
		if(t < 0.5) {
			return 0.5 * ease1(t * 2);
		} else {
			return 0.5 + 0.5 * ease2((t - 0.5) * 2);
		}
	})(t);
};
macrotween_Ease.bounceIn = function(t) {
	var a = 1.70158;
	return (function(t) {
		var a1 = a;
		if(a1 == null) {
			a1 = 1.70158;
		}
		var a2 = a1;
		var ease = function(t) {
			var a = a2;
			if(a == null) {
				a = 1.70158;
			}
			var b = 1;
			var c = a;
			return (function(t) {
				var t1 = t;
				if(t1 == 1) {
					return b;
				} else if(t1 < 0.363636363636363646) {
					return b * (7.5625 * t1 * t1);
				} else if(t1 < 0.727272727272727293) {
					t1 -= 0.545454545454545414;
					return -c * (1 - (7.5625 * t1 * t1 + 0.75)) + b;
				} else if(t1 < 0.909090909090909061) {
					t1 -= 0.818181818181818232;
					return -c * (1 - (7.5625 * t1 * t1 + 0.9375)) + b;
				} else {
					t1 -= 0.954545454545454586;
					return -c * (1 - (7.5625 * t1 * t1 + 0.984375)) + b;
				}
			})(t);
		};
		return (function(t) {
			var it = 1 - t;
			return 1 - ease(it);
		})(t);
	})(t);
};
macrotween_Ease.bounceOut = function(t) {
	var a = 1.70158;
	return (function(t) {
		var a1 = a;
		if(a1 == null) {
			a1 = 1.70158;
		}
		var b = 1;
		var c = a1;
		return (function(t) {
			var t1 = t;
			if(t1 == 1) {
				return b;
			} else if(t1 < 0.363636363636363646) {
				return b * (7.5625 * t1 * t1);
			} else if(t1 < 0.727272727272727293) {
				t1 -= 0.545454545454545414;
				return -c * (1 - (7.5625 * t1 * t1 + 0.75)) + b;
			} else if(t1 < 0.909090909090909061) {
				t1 -= 0.818181818181818232;
				return -c * (1 - (7.5625 * t1 * t1 + 0.9375)) + b;
			} else {
				t1 -= 0.954545454545454586;
				return -c * (1 - (7.5625 * t1 * t1 + 0.984375)) + b;
			}
		})(t);
	})(t);
};
macrotween_Ease.bounceInOut = function(t) {
	var a = 1.70158;
	return (function(t) {
		var a1 = a;
		if(a1 == null) {
			a1 = 1.70158;
		}
		var a2 = a1;
		var ease1 = function(t) {
			var a = a2;
			if(a == null) {
				a = 1.70158;
			}
			var a1 = a;
			var ease = function(t) {
				var a = a1;
				if(a == null) {
					a = 1.70158;
				}
				var b = 1;
				var c = a;
				return (function(t) {
					var t1 = t;
					if(t1 == 1) {
						return b;
					} else if(t1 < 0.363636363636363646) {
						return b * (7.5625 * t1 * t1);
					} else if(t1 < 0.727272727272727293) {
						t1 -= 0.545454545454545414;
						return -c * (1 - (7.5625 * t1 * t1 + 0.75)) + b;
					} else if(t1 < 0.909090909090909061) {
						t1 -= 0.818181818181818232;
						return -c * (1 - (7.5625 * t1 * t1 + 0.9375)) + b;
					} else {
						t1 -= 0.954545454545454586;
						return -c * (1 - (7.5625 * t1 * t1 + 0.984375)) + b;
					}
				})(t);
			};
			return (function(t) {
				var it = 1 - t;
				return 1 - ease(it);
			})(t);
		};
		var a3 = a1;
		var ease2 = function(t) {
			var a = a3;
			if(a == null) {
				a = 1.70158;
			}
			var b = 1;
			var c = a;
			return (function(t) {
				var t1 = t;
				if(t1 == 1) {
					return b;
				} else if(t1 < 0.363636363636363646) {
					return b * (7.5625 * t1 * t1);
				} else if(t1 < 0.727272727272727293) {
					t1 -= 0.545454545454545414;
					return -c * (1 - (7.5625 * t1 * t1 + 0.75)) + b;
				} else if(t1 < 0.909090909090909061) {
					t1 -= 0.818181818181818232;
					return -c * (1 - (7.5625 * t1 * t1 + 0.9375)) + b;
				} else {
					t1 -= 0.954545454545454586;
					return -c * (1 - (7.5625 * t1 * t1 + 0.984375)) + b;
				}
			})(t);
		};
		return (function(t) {
			if(t < 0.5) {
				return 0.5 * ease1(t * 2);
			} else {
				return 0.5 + 0.5 * ease2((t - 0.5) * 2);
			}
		})(t);
	})(t);
};
macrotween_Ease.bounceOutIn = function(t) {
	var a = 1.70158;
	return (function(t) {
		var a1 = a;
		if(a1 == null) {
			a1 = 1.70158;
		}
		var a2 = a1;
		var ease1 = function(t) {
			var a = a2;
			if(a == null) {
				a = 1.70158;
			}
			var b = 1;
			var c = a;
			return (function(t) {
				var t1 = t;
				if(t1 == 1) {
					return b;
				} else if(t1 < 0.363636363636363646) {
					return b * (7.5625 * t1 * t1);
				} else if(t1 < 0.727272727272727293) {
					t1 -= 0.545454545454545414;
					return -c * (1 - (7.5625 * t1 * t1 + 0.75)) + b;
				} else if(t1 < 0.909090909090909061) {
					t1 -= 0.818181818181818232;
					return -c * (1 - (7.5625 * t1 * t1 + 0.9375)) + b;
				} else {
					t1 -= 0.954545454545454586;
					return -c * (1 - (7.5625 * t1 * t1 + 0.984375)) + b;
				}
			})(t);
		};
		var a3 = a1;
		var ease2 = function(t) {
			var a = a3;
			if(a == null) {
				a = 1.70158;
			}
			var a1 = a;
			var ease = function(t) {
				var a = a1;
				if(a == null) {
					a = 1.70158;
				}
				var b = 1;
				var c = a;
				return (function(t) {
					var t1 = t;
					if(t1 == 1) {
						return b;
					} else if(t1 < 0.363636363636363646) {
						return b * (7.5625 * t1 * t1);
					} else if(t1 < 0.727272727272727293) {
						t1 -= 0.545454545454545414;
						return -c * (1 - (7.5625 * t1 * t1 + 0.75)) + b;
					} else if(t1 < 0.909090909090909061) {
						t1 -= 0.818181818181818232;
						return -c * (1 - (7.5625 * t1 * t1 + 0.9375)) + b;
					} else {
						t1 -= 0.954545454545454586;
						return -c * (1 - (7.5625 * t1 * t1 + 0.984375)) + b;
					}
				})(t);
			};
			return (function(t) {
				var it = 1 - t;
				return 1 - ease(it);
			})(t);
		};
		return (function(t) {
			if(t < 0.5) {
				return 0.5 * ease1(t * 2);
			} else {
				return 0.5 + 0.5 * ease2((t - 0.5) * 2);
			}
		})(t);
	})(t);
};
macrotween_Ease.bounceInAdv = function(t,a) {
	if(a == null) {
		a = 1.70158;
	}
	var a1 = a;
	var ease = function(t) {
		var a = a1;
		if(a == null) {
			a = 1.70158;
		}
		var b = 1;
		var c = a;
		return (function(t) {
			var t1 = t;
			if(t1 == 1) {
				return b;
			} else if(t1 < 0.363636363636363646) {
				return b * (7.5625 * t1 * t1);
			} else if(t1 < 0.727272727272727293) {
				t1 -= 0.545454545454545414;
				return -c * (1 - (7.5625 * t1 * t1 + 0.75)) + b;
			} else if(t1 < 0.909090909090909061) {
				t1 -= 0.818181818181818232;
				return -c * (1 - (7.5625 * t1 * t1 + 0.9375)) + b;
			} else {
				t1 -= 0.954545454545454586;
				return -c * (1 - (7.5625 * t1 * t1 + 0.984375)) + b;
			}
		})(t);
	};
	return (function(t) {
		var it = 1 - t;
		return 1 - ease(it);
	})(t);
};
macrotween_Ease.bounceOutAdv = function(t,a) {
	if(a == null) {
		a = 1.70158;
	}
	var b = 1;
	var c = a;
	return (function(t) {
		var t1 = t;
		if(t1 == 1) {
			return b;
		} else if(t1 < 0.363636363636363646) {
			return b * (7.5625 * t1 * t1);
		} else if(t1 < 0.727272727272727293) {
			t1 -= 0.545454545454545414;
			return -c * (1 - (7.5625 * t1 * t1 + 0.75)) + b;
		} else if(t1 < 0.909090909090909061) {
			t1 -= 0.818181818181818232;
			return -c * (1 - (7.5625 * t1 * t1 + 0.9375)) + b;
		} else {
			t1 -= 0.954545454545454586;
			return -c * (1 - (7.5625 * t1 * t1 + 0.984375)) + b;
		}
	})(t);
};
macrotween_Ease.bounceInOutAdv = function(t,a) {
	if(a == null) {
		a = 1.70158;
	}
	var a1 = a;
	var ease1 = function(t) {
		var a = a1;
		if(a == null) {
			a = 1.70158;
		}
		var a2 = a;
		var ease = function(t) {
			var a = a2;
			if(a == null) {
				a = 1.70158;
			}
			var b = 1;
			var c = a;
			return (function(t) {
				var t1 = t;
				if(t1 == 1) {
					return b;
				} else if(t1 < 0.363636363636363646) {
					return b * (7.5625 * t1 * t1);
				} else if(t1 < 0.727272727272727293) {
					t1 -= 0.545454545454545414;
					return -c * (1 - (7.5625 * t1 * t1 + 0.75)) + b;
				} else if(t1 < 0.909090909090909061) {
					t1 -= 0.818181818181818232;
					return -c * (1 - (7.5625 * t1 * t1 + 0.9375)) + b;
				} else {
					t1 -= 0.954545454545454586;
					return -c * (1 - (7.5625 * t1 * t1 + 0.984375)) + b;
				}
			})(t);
		};
		return (function(t) {
			var it = 1 - t;
			return 1 - ease(it);
		})(t);
	};
	var a2 = a;
	var ease2 = function(t) {
		var a = a2;
		if(a == null) {
			a = 1.70158;
		}
		var b = 1;
		var c = a;
		return (function(t) {
			var t1 = t;
			if(t1 == 1) {
				return b;
			} else if(t1 < 0.363636363636363646) {
				return b * (7.5625 * t1 * t1);
			} else if(t1 < 0.727272727272727293) {
				t1 -= 0.545454545454545414;
				return -c * (1 - (7.5625 * t1 * t1 + 0.75)) + b;
			} else if(t1 < 0.909090909090909061) {
				t1 -= 0.818181818181818232;
				return -c * (1 - (7.5625 * t1 * t1 + 0.9375)) + b;
			} else {
				t1 -= 0.954545454545454586;
				return -c * (1 - (7.5625 * t1 * t1 + 0.984375)) + b;
			}
		})(t);
	};
	return (function(t) {
		if(t < 0.5) {
			return 0.5 * ease1(t * 2);
		} else {
			return 0.5 + 0.5 * ease2((t - 0.5) * 2);
		}
	})(t);
};
macrotween_Ease.bounceOutInAdv = function(t,a) {
	if(a == null) {
		a = 1.70158;
	}
	var a1 = a;
	var ease1 = function(t) {
		var a = a1;
		if(a == null) {
			a = 1.70158;
		}
		var b = 1;
		var c = a;
		return (function(t) {
			var t1 = t;
			if(t1 == 1) {
				return b;
			} else if(t1 < 0.363636363636363646) {
				return b * (7.5625 * t1 * t1);
			} else if(t1 < 0.727272727272727293) {
				t1 -= 0.545454545454545414;
				return -c * (1 - (7.5625 * t1 * t1 + 0.75)) + b;
			} else if(t1 < 0.909090909090909061) {
				t1 -= 0.818181818181818232;
				return -c * (1 - (7.5625 * t1 * t1 + 0.9375)) + b;
			} else {
				t1 -= 0.954545454545454586;
				return -c * (1 - (7.5625 * t1 * t1 + 0.984375)) + b;
			}
		})(t);
	};
	var a2 = a;
	var ease2 = function(t) {
		var a = a2;
		if(a == null) {
			a = 1.70158;
		}
		var a1 = a;
		var ease = function(t) {
			var a = a1;
			if(a == null) {
				a = 1.70158;
			}
			var b = 1;
			var c = a;
			return (function(t) {
				var t1 = t;
				if(t1 == 1) {
					return b;
				} else if(t1 < 0.363636363636363646) {
					return b * (7.5625 * t1 * t1);
				} else if(t1 < 0.727272727272727293) {
					t1 -= 0.545454545454545414;
					return -c * (1 - (7.5625 * t1 * t1 + 0.75)) + b;
				} else if(t1 < 0.909090909090909061) {
					t1 -= 0.818181818181818232;
					return -c * (1 - (7.5625 * t1 * t1 + 0.9375)) + b;
				} else {
					t1 -= 0.954545454545454586;
					return -c * (1 - (7.5625 * t1 * t1 + 0.984375)) + b;
				}
			})(t);
		};
		return (function(t) {
			var it = 1 - t;
			return 1 - ease(it);
		})(t);
	};
	return (function(t) {
		if(t < 0.5) {
			return 0.5 * ease1(t * 2);
		} else {
			return 0.5 + 0.5 * ease2((t - 0.5) * 2);
		}
	})(t);
};
macrotween_Ease.bounceHelperOut = function(t,b,c) {
	if(t == 1) {
		return b;
	} else if(t < 0.363636363636363646) {
		return b * (7.5625 * t * t);
	} else if(t < 0.727272727272727293) {
		t -= 0.545454545454545414;
		return -c * (1 - (7.5625 * t * t + 0.75)) + b;
	} else if(t < 0.909090909090909061) {
		t -= 0.818181818181818232;
		return -c * (1 - (7.5625 * t * t + 0.9375)) + b;
	} else {
		t -= 0.954545454545454586;
		return -c * (1 - (7.5625 * t * t + 0.984375)) + b;
	}
};
macrotween_Ease.circIn = function(t) {
	return -(Math.sqrt(1 - t * t) - 1);
};
macrotween_Ease.circOut = function(t) {
	var ease = macrotween_Ease.circIn;
	return (function(t) {
		var it = 1 - t;
		return 1 - ease(it);
	})(t);
};
macrotween_Ease.circInOut = function(t) {
	var ease1 = macrotween_Ease.circIn;
	var ease2 = macrotween_Ease.circOut;
	return (function(t) {
		if(t < 0.5) {
			return 0.5 * ease1(t * 2);
		} else {
			return 0.5 + 0.5 * ease2((t - 0.5) * 2);
		}
	})(t);
};
macrotween_Ease.circOutIn = function(t) {
	var ease1 = macrotween_Ease.circIn;
	var ease2 = macrotween_Ease.circOut;
	return (function(t) {
		if(t < 0.5) {
			return 0.5 * ease1(t * 2);
		} else {
			return 0.5 + 0.5 * ease2((t - 0.5) * 2);
		}
	})(t);
};
macrotween_Ease.hermite = function(t,accelTime,cruiseTime,decelTime) {
	var v = 1 / (accelTime / 2 + cruiseTime + decelTime / 2);
	var x1 = v * accelTime / 2;
	var x2 = v * cruiseTime;
	var x3 = v * decelTime / 2;
	if(t < accelTime) {
		var t1 = t / accelTime;
		var t2 = t1 * t1;
		var t3 = t2 * t1;
		return (2 * t3 - 3 * t2 + 1) * 0 + (t3 - 2 * t2 + t1) * 0 + (-2 * t3 + 3 * t2) * x1 + (t3 - t2) * (x2 / cruiseTime * accelTime);
	} else if(t <= accelTime + cruiseTime) {
		return x1 + x2 * (t - accelTime) / cruiseTime;
	} else {
		var t1 = (t - accelTime - cruiseTime) / decelTime;
		var t2 = t1 * t1;
		var t3 = t2 * t1;
		return (2 * t3 - 3 * t2 + 1) * (x1 + x2) + (t3 - 2 * t2 + t1) * (x2 / cruiseTime * decelTime) + (-2 * t3 + 3 * t2) + (t3 - t2) * 0;
	}
};
macrotween_Ease.cubicHermite = function(t,start,end,stan,etan) {
	var t2 = t * t;
	var t3 = t2 * t;
	return (2 * t3 - 3 * t2 + 1) * start + (t3 - 2 * t2 + t) * stan + (-2 * t3 + 3 * t2) * end + (t3 - t2) * etan;
};
macrotween_Ease.elasticIn = function(t) {
	var amp = 1;
	var period = 0.4;
	return (function(t) {
		var a = amp;
		if(t == 0) {
			return 0;
		} else {
			var adj = t / 1;
			if(adj == 1) {
				return 1;
			} else {
				var s;
				if(a < Math.abs(1)) {
					a = 1;
					s = period / 4.0;
				} else {
					s = period / (2 * Math.PI) * Math.asin(1 / a);
				}
				--adj;
				return -(a * Math.pow(2,10 * adj) * Math.sin((adj - s) * (2 * Math.PI) / period));
			}
		}
	})(t);
};
macrotween_Ease.elasticOut = function(t) {
	var amp = 1;
	var period = 0.4;
	return (function(t) {
		var a = amp;
		if(t == 0) {
			return 0;
		} else if(t == 1) {
			return 1;
		} else {
			var s;
			if(a < 1) {
				a = 1;
				s = period / 4.0;
			} else {
				s = period / (2 * Math.PI) * Math.asin(1 / a);
			}
			return a * Math.pow(2,-10 * t) * Math.sin((t - s) * (2 * Math.PI) / period) + 1;
		}
	})(t);
};
macrotween_Ease.elasticInOut = function(t) {
	var amp = 1;
	var period = 0.4;
	return (function(t) {
		return macrotween_Ease.elasticInOutAdv(t,amp,period);
	})(t);
};
macrotween_Ease.elasticOutIn = function(t) {
	var amp = 1;
	var period = 0.4;
	return (function(t) {
		var amp1 = amp;
		var period1 = period;
		var ease1 = function(t) {
			var a = amp1;
			if(t == 0) {
				return 0;
			} else if(t == 1) {
				return 1;
			} else {
				var s;
				if(a < 1) {
					a = 1;
					s = period1 / 4.0;
				} else {
					s = period1 / (2 * Math.PI) * Math.asin(1 / a);
				}
				return a * Math.pow(2,-10 * t) * Math.sin((t - s) * (2 * Math.PI) / period1) + 1;
			}
		};
		var amp2 = amp;
		var period2 = period;
		var ease2 = function(t) {
			var a = amp2;
			if(t == 0) {
				return 0;
			} else {
				var adj = t / 1;
				if(adj == 1) {
					return 1;
				} else {
					var s;
					if(a < Math.abs(1)) {
						a = 1;
						s = period2 / 4.0;
					} else {
						s = period2 / (2 * Math.PI) * Math.asin(1 / a);
					}
					--adj;
					return -(a * Math.pow(2,10 * adj) * Math.sin((adj - s) * (2 * Math.PI) / period2));
				}
			}
		};
		return (function(t) {
			if(t < 0.5) {
				return 0.5 * ease1(t * 2);
			} else {
				return 0.5 + 0.5 * ease2((t - 0.5) * 2);
			}
		})(t);
	})(t);
};
macrotween_Ease.elasticInAdv = function(t,amp,period) {
	var a = amp;
	if(t == 0) {
		return 0;
	} else {
		var adj = t / 1;
		if(adj == 1) {
			return 1;
		} else {
			var s;
			if(a < Math.abs(1)) {
				a = 1;
				s = period / 4.0;
			} else {
				s = period / (2 * Math.PI) * Math.asin(1 / a);
			}
			--adj;
			return -(a * Math.pow(2,10 * adj) * Math.sin((adj - s) * (2 * Math.PI) / period));
		}
	}
};
macrotween_Ease.elasticOutAdv = function(t,amp,period) {
	var a = amp;
	if(t == 0) {
		return 0;
	} else if(t == 1) {
		return 1;
	} else {
		var s;
		if(a < 1) {
			a = 1;
			s = period / 4.0;
		} else {
			s = period / (2 * Math.PI) * Math.asin(1 / a);
		}
		return a * Math.pow(2,-10 * t) * Math.sin((t - s) * (2 * Math.PI) / period) + 1;
	}
};
macrotween_Ease.elasticInOutAdv = function(t,amp,period) {
	var amp1 = amp;
	var period1 = period;
	var ease1 = function(t) {
		var a = amp1;
		if(t == 0) {
			return 0;
		} else {
			var adj = t / 1;
			if(adj == 1) {
				return 1;
			} else {
				var s;
				if(a < Math.abs(1)) {
					a = 1;
					s = period1 / 4.0;
				} else {
					s = period1 / (2 * Math.PI) * Math.asin(1 / a);
				}
				--adj;
				return -(a * Math.pow(2,10 * adj) * Math.sin((adj - s) * (2 * Math.PI) / period1));
			}
		}
	};
	var amp2 = amp;
	var period2 = period;
	var ease2 = function(t) {
		var a = amp2;
		if(t == 0) {
			return 0;
		} else if(t == 1) {
			return 1;
		} else {
			var s;
			if(a < 1) {
				a = 1;
				s = period2 / 4.0;
			} else {
				s = period2 / (2 * Math.PI) * Math.asin(1 / a);
			}
			return a * Math.pow(2,-10 * t) * Math.sin((t - s) * (2 * Math.PI) / period2) + 1;
		}
	};
	return (function(t) {
		if(t < 0.5) {
			return 0.5 * ease1(t * 2);
		} else {
			return 0.5 + 0.5 * ease2((t - 0.5) * 2);
		}
	})(t);
};
macrotween_Ease.elasticOutInAdv = function(t,amp,period) {
	var amp1 = amp;
	var period1 = period;
	var ease1 = function(t) {
		var a = amp1;
		if(t == 0) {
			return 0;
		} else if(t == 1) {
			return 1;
		} else {
			var s;
			if(a < 1) {
				a = 1;
				s = period1 / 4.0;
			} else {
				s = period1 / (2 * Math.PI) * Math.asin(1 / a);
			}
			return a * Math.pow(2,-10 * t) * Math.sin((t - s) * (2 * Math.PI) / period1) + 1;
		}
	};
	var amp2 = amp;
	var period2 = period;
	var ease2 = function(t) {
		var a = amp2;
		if(t == 0) {
			return 0;
		} else {
			var adj = t / 1;
			if(adj == 1) {
				return 1;
			} else {
				var s;
				if(a < Math.abs(1)) {
					a = 1;
					s = period2 / 4.0;
				} else {
					s = period2 / (2 * Math.PI) * Math.asin(1 / a);
				}
				--adj;
				return -(a * Math.pow(2,10 * adj) * Math.sin((adj - s) * (2 * Math.PI) / period2));
			}
		}
	};
	return (function(t) {
		if(t < 0.5) {
			return 0.5 * ease1(t * 2);
		} else {
			return 0.5 + 0.5 * ease2((t - 0.5) * 2);
		}
	})(t);
};
macrotween_Ease.elasticHelperIn = function(t,b,c,d,a,p) {
	if(t == 0) {
		return b;
	}
	var adj = t / d;
	if(adj == 1) {
		return b + c;
	}
	var s;
	if(a < Math.abs(c)) {
		a = c;
		s = p / 4.0;
	} else {
		s = p / (2 * Math.PI) * Math.asin(c / a);
	}
	--adj;
	return -(a * Math.pow(2,10 * adj) * Math.sin((adj * d - s) * (2 * Math.PI) / p)) + b;
};
macrotween_Ease.elasticHelperOut = function(t,b,c,d,a,p) {
	if(t == 0) {
		return 0;
	}
	if(t == 1) {
		return c;
	}
	var s;
	if(a < c) {
		a = c;
		s = p / 4.0;
	} else {
		s = p / (2 * Math.PI) * Math.asin(c / a);
	}
	return a * Math.pow(2,-10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + c;
};
macrotween_Ease.expoIn = function(t) {
	if(t == 0) {
		return 0;
	} else {
		return Math.pow(2,10 * (t - 1));
	}
};
macrotween_Ease.expoOut = function(t) {
	var ease = macrotween_Ease.expoIn;
	return (function(t) {
		var it = 1 - t;
		return 1 - ease(it);
	})(t);
};
macrotween_Ease.expoInOut = function(t) {
	var ease1 = macrotween_Ease.expoIn;
	var ease2 = macrotween_Ease.expoOut;
	return (function(t) {
		if(t < 0.5) {
			return 0.5 * ease1(t * 2);
		} else {
			return 0.5 + 0.5 * ease2((t - 0.5) * 2);
		}
	})(t);
};
macrotween_Ease.expoOutIn = function(t) {
	var ease1 = macrotween_Ease.expoOut;
	var ease2 = macrotween_Ease.expoIn;
	return (function(t) {
		if(t < 0.5) {
			return 0.5 * ease1(t * 2);
		} else {
			return 0.5 + 0.5 * ease2((t - 0.5) * 2);
		}
	})(t);
};
macrotween_Ease.linear = function(t) {
	return t;
};
macrotween_Ease.quadIn = function(t) {
	return t * t;
};
macrotween_Ease.quadOut = function(t) {
	var ease = macrotween_Ease.quadIn;
	return (function(t) {
		var it = 1 - t;
		return 1 - ease(it);
	})(t);
};
macrotween_Ease.quadInOut = function(t) {
	var ease1 = macrotween_Ease.quadIn;
	var ease2 = macrotween_Ease.quadOut;
	return (function(t) {
		if(t < 0.5) {
			return 0.5 * ease1(t * 2);
		} else {
			return 0.5 + 0.5 * ease2((t - 0.5) * 2);
		}
	})(t);
};
macrotween_Ease.quadOutIn = function(t) {
	var ease1 = macrotween_Ease.quadOut;
	var ease2 = macrotween_Ease.quadIn;
	return (function(t) {
		if(t < 0.5) {
			return 0.5 * ease1(t * 2);
		} else {
			return 0.5 + 0.5 * ease2((t - 0.5) * 2);
		}
	})(t);
};
macrotween_Ease.cubicIn = function(t) {
	return t * t * t;
};
macrotween_Ease.cubicOut = function(t) {
	var ease = macrotween_Ease.cubicIn;
	return (function(t) {
		var it = 1 - t;
		return 1 - ease(it);
	})(t);
};
macrotween_Ease.cubicInOut = function(t) {
	var ease1 = macrotween_Ease.cubicIn;
	var ease2 = macrotween_Ease.cubicOut;
	return (function(t) {
		if(t < 0.5) {
			return 0.5 * ease1(t * 2);
		} else {
			return 0.5 + 0.5 * ease2((t - 0.5) * 2);
		}
	})(t);
};
macrotween_Ease.cubicOutIn = function(t) {
	var ease1 = macrotween_Ease.cubicOut;
	var ease2 = macrotween_Ease.cubicIn;
	return (function(t) {
		if(t < 0.5) {
			return 0.5 * ease1(t * 2);
		} else {
			return 0.5 + 0.5 * ease2((t - 0.5) * 2);
		}
	})(t);
};
macrotween_Ease.quartIn = function(t) {
	return t * t * t * t;
};
macrotween_Ease.quartOut = function(t) {
	var ease = macrotween_Ease.quartIn;
	return (function(t) {
		var it = 1 - t;
		return 1 - ease(it);
	})(t);
};
macrotween_Ease.quartInOut = function(t) {
	var ease1 = macrotween_Ease.quartIn;
	var ease2 = macrotween_Ease.quartOut;
	return (function(t) {
		if(t < 0.5) {
			return 0.5 * ease1(t * 2);
		} else {
			return 0.5 + 0.5 * ease2((t - 0.5) * 2);
		}
	})(t);
};
macrotween_Ease.quartOutIn = function(t) {
	var ease1 = macrotween_Ease.quartOut;
	var ease2 = macrotween_Ease.quartIn;
	return (function(t) {
		if(t < 0.5) {
			return 0.5 * ease1(t * 2);
		} else {
			return 0.5 + 0.5 * ease2((t - 0.5) * 2);
		}
	})(t);
};
macrotween_Ease.quintIn = function(t) {
	return t * t * t * t * t;
};
macrotween_Ease.quintOut = function(t) {
	var ease = macrotween_Ease.quintIn;
	return (function(t) {
		var it = 1 - t;
		return 1 - ease(it);
	})(t);
};
macrotween_Ease.quintInOut = function(t) {
	var ease1 = macrotween_Ease.quintIn;
	var ease2 = macrotween_Ease.quintOut;
	return (function(t) {
		if(t < 0.5) {
			return 0.5 * ease1(t * 2);
		} else {
			return 0.5 + 0.5 * ease2((t - 0.5) * 2);
		}
	})(t);
};
macrotween_Ease.quintOutIn = function(t) {
	var ease1 = macrotween_Ease.quintOut;
	var ease2 = macrotween_Ease.quintIn;
	return (function(t) {
		if(t < 0.5) {
			return 0.5 * ease1(t * 2);
		} else {
			return 0.5 + 0.5 * ease2((t - 0.5) * 2);
		}
	})(t);
};
macrotween_Ease.sineIn = function(t) {
	return -Math.cos(t * Math.PI / 2.0) + 1;
};
macrotween_Ease.sineOut = function(t) {
	return Math.sin(t * Math.PI / 2.0);
};
macrotween_Ease.sineInOut = function(t) {
	return -0.5 * (Math.cos(Math.PI * t) - 1);
};
macrotween_Ease.sineOutIn = function(t) {
	if(t < 0.5) {
		return Math.sin(2 * t * Math.PI / 2.0) / 2;
	} else {
		return (-Math.cos((2 * t - 1) * Math.PI / 2.0) + 1) / 2 + 0.5;
	}
};
macrotween_Ease.piecewiseLinear = function(t,pieces) {
	var segments = pieces.length - 1;
	var segmentLength = 1 / segments;
	t = Math.min(1,Math.max(0,t));
	var segmentIdx = Math.floor(t * segments);
	var basePoint = segmentIdx;
	var nextPoint = segmentIdx + 1;
	var p1 = pieces[basePoint];
	var p2 = pieces[nextPoint];
	var segmentT = (t - segmentLength * segmentIdx) / segmentLength;
	return p1 + segmentT * (p2 - p1);
};
macrotween_Ease.combine = function(ease1,ease2,t) {
	if(t < 0.5) {
		return 0.5 * ease1(t * 2);
	} else {
		return 0.5 + 0.5 * ease2((t - 0.5) * 2);
	}
};
macrotween_Ease.invert = function(ease,t) {
	var it = 1 - t;
	return 1 - ease(it);
};
var macrotween_TimelineItem = function(duration,startTime,ease) {
	if(startTime == null) {
		startTime = 0;
	}
	if(duration == null) {
		duration = 1;
	}
	this._isInBounds = false;
	this._isInBoundsDirty = true;
	this._wasInBounds = false;
	this.set_currentTime(null);
	this.set_startTime(startTime);
	this.set_duration(duration);
	this.ease = ease;
};
macrotween_TimelineItem.__name__ = true;
macrotween_TimelineItem.progressFraction = function(time,start,end) {
	if(start == end) {
		return 0.5;
	}
	return Math.min(1,Math.max(0,(time - start) / (end - start)));
};
macrotween_TimelineItem.prototype = {
	get_onEndSignal: function() {
		if(this._onEndSignal == null) {
			this._onEndSignal = new macrotween_BoundSignal();
		}
		return this._onEndSignal;
	}
	,get_onStartSignal: function() {
		if(this._onStartSignal == null) {
			this._onStartSignal = new macrotween_BoundSignal();
		}
		return this._onStartSignal;
	}
	,onReset: function() {
	}
	,onRemoved: function(from) {
	}
	,onLeftHit: function(reversed) {
		if(this._onStartSignal != null) {
			this._onStartSignal.dispatch(reversed);
		}
	}
	,onRightHit: function(reversed) {
		if(this._onEndSignal != null) {
			this._onEndSignal.dispatch(reversed);
		}
	}
	,onStartInBounds: function() {
	}
	,reset: function() {
	}
	,step: function(dt,substep) {
		if(substep == null) {
			substep = false;
		}
		if(this.currentTime == null) {
			this.set_currentTime(0);
		}
		this.stepTo(this.currentTime + dt,null,substep);
	}
	,stepTo: function(time,lastTime,substep) {
		if(substep == null) {
			substep = false;
		}
		this._wasInBounds = this.isCurrentTimeInBounds();
		if(lastTime == null) {
			lastTime = this.currentTime;
		}
		if(lastTime == time) {
			return;
		}
		if(!substep) {
			this.set_currentTime(time);
			this.onUpdate(time,lastTime,substep);
			this.updateBounds(lastTime);
		} else {
			var hasLastTime = lastTime != null;
			var leftCrossed = hasLastTime && (lastTime < this.get_startTime() && time > this.get_startTime() || lastTime > this.get_startTime() && time < this.get_startTime());
			var rightCrossed = lastTime != null && (lastTime < this.get_endTime() && time > this.get_endTime() || lastTime > this.get_endTime() && time < this.get_endTime());
			var rev = hasLastTime && lastTime > time;
			if(leftCrossed || rightCrossed) {
				var cTime = lastTime;
				if(rev) {
					if(rightCrossed) {
						this.stepTo(this.get_endTime(),cTime,substep);
						cTime = this.get_endTime();
					}
					if(leftCrossed) {
						this.stepTo(this.get_startTime(),cTime,substep);
						cTime = this.get_startTime();
					}
					if(time != this.get_startTime()) {
						this.stepTo(time,cTime,substep);
					}
				} else {
					if(leftCrossed) {
						this.stepTo(this.get_startTime(),cTime,substep);
						cTime = this.get_startTime();
					}
					if(rightCrossed) {
						this.stepTo(this.get_endTime(),cTime,substep);
						cTime = this.get_endTime();
					}
					if(time != this.get_endTime()) {
						this.stepTo(time,cTime,substep);
					}
				}
			} else {
				this.set_currentTime(time);
				this.updateBounds(lastTime);
				this.onUpdate(time,lastTime,substep);
			}
		}
	}
	,onUpdate: function(time,lastTime,substep) {
		if(substep == null) {
			substep = false;
		}
	}
	,isTimeInBounds: function(time) {
		if(time >= this.get_startTime()) {
			return time <= this.get_endTime();
		} else {
			return false;
		}
	}
	,isCurrentTimeInBounds: function() {
		if(this.currentTime == null) {
			return false;
		}
		if(!this._isInBoundsDirty) {
			return this._isInBounds;
		}
		var time = this.currentTime;
		this._isInBounds = time >= this.get_startTime() && time <= this.get_endTime();
		this._isInBoundsDirty = false;
		return this._isInBounds;
	}
	,updateBounds: function(lastTime) {
		var currentTimeInBounds = this.isCurrentTimeInBounds();
		if(lastTime == null) {
			if(!currentTimeInBounds) {
				return;
			} else if(this.currentTime != this.get_startTime() && this.currentTime != this.get_endTime()) {
				this.onStartInBounds();
			} else {
				if(this.currentTime == this.get_startTime()) {
					this.onLeftHit(false);
				}
				if(this.currentTime == this.get_endTime()) {
					this.onRightHit(true);
				}
			}
		} else {
			if(this.currentTime >= this.get_startTime() && lastTime < this.get_startTime()) {
				this.onLeftHit(false);
			}
			if(this.currentTime >= this.get_endTime() && lastTime < this.get_endTime()) {
				this.onRightHit(false);
			}
			if(this.currentTime <= this.get_startTime() && lastTime > this.get_startTime()) {
				this.onLeftHit(true);
			}
			if(this.currentTime <= this.get_endTime() && lastTime > this.get_endTime()) {
				this.onRightHit(true);
			}
		}
	}
	,set_currentTime: function(time) {
		this._isInBoundsDirty = true;
		return this.currentTime = time;
	}
	,get_duration: function() {
		return this.duration;
	}
	,set_duration: function(duration) {
		if(this.get_duration() == duration) {
			return this.get_duration();
		}
		this._isInBoundsDirty = true;
		this.duration = Math.max(0,duration);
		return duration;
	}
	,get_startTime: function() {
		return this.startTime;
	}
	,set_startTime: function(startTime) {
		if(this.get_startTime() == startTime) {
			return this.get_startTime();
		}
		this._isInBoundsDirty = true;
		this.startTime = startTime;
		return startTime;
	}
	,get_endTime: function() {
		return this.get_startTime() + this.get_duration();
	}
};
var macrotween_Timeline = function(duration,startTime,ease) {
	if(startTime == null) {
		startTime = 0;
	}
	if(duration == null) {
		duration = 1;
	}
	macrotween_TimelineItem.call(this,duration,startTime,ease);
	this.children = [];
};
macrotween_Timeline.__name__ = true;
macrotween_Timeline.__super__ = macrotween_TimelineItem;
macrotween_Timeline.prototype = $extend(macrotween_TimelineItem.prototype,{
	reset: function() {
		macrotween_TimelineItem.prototype.reset.call(this);
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.reset();
		}
		this.onReset();
	}
	,onUpdate: function(time,lastTime,substep) {
		if(substep == null) {
			substep = false;
		}
		this.updateChildren(time,lastTime,substep);
	}
	,add: function(child) {
		this.children.push(child);
		return this;
	}
	,remove: function(child) {
		HxOverrides.remove(this.children,child);
		child.onRemoved(this);
		return this;
	}
	,clear: function() {
		this.children.splice(0,this.children.length);
	}
	,updateChildren: function(time,lastTime,substep) {
		if(substep == null) {
			substep = false;
		}
		var actualTime = time;
		var actualLastTime = lastTime;
		if(this.ease != null) {
			time = this.ease(time);
		}
		if(lastTime != null && this.ease != null) {
			lastTime = this.ease(lastTime);
		}
		if(!substep || lastTime == null) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.stepTo(time,null,substep);
			}
			return;
		}
		var relativeTime = actualTime - this.get_startTime();
		var relativeLast = lastTime - this.get_startTime();
		if(this.ease != null) {
			relativeTime = this.ease(relativeTime);
			relativeLast = this.ease(relativeLast);
		}
		var times = [relativeTime];
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(time < lastTime) {
				if(child.get_startTime() <= relativeLast && child.get_startTime() >= relativeTime) {
					times.push(child.get_startTime());
				}
				if(child.get_endTime() <= relativeLast && child.get_endTime() >= relativeTime) {
					times.push(child.get_endTime());
				}
			} else {
				if(child.get_startTime() >= relativeLast && child.get_startTime() <= relativeTime) {
					times.push(child.get_startTime());
				}
				if(child.get_endTime() >= relativeLast && child.get_endTime() <= relativeTime) {
					times.push(child.get_endTime());
				}
			}
		}
		if(time < lastTime) {
			times.sort(function(a,b) {
				if(a < b) {
					return 1;
				} else if(a > b) {
					return -1;
				}
				return 0;
			});
		} else {
			times.sort(function(a,b) {
				if(a < b) {
					return -1;
				} else if(a > b) {
					return 1;
				}
				return 0;
			});
		}
		var _g = 0;
		while(_g < times.length) {
			var time = times[_g];
			++_g;
			if(relativeLast == time) {
				continue;
			}
			var _g1 = 0;
			var _g2 = this.children;
			while(_g1 < _g2.length) {
				var child = _g2[_g1];
				++_g1;
				child.stepTo(this.ease != null ? this.ease(time) : time,null,substep);
			}
			relativeLast = time;
		}
	}
});
var macrotween_BoundSignal = function() {
	this.listeners = [];
};
macrotween_BoundSignal.__name__ = true;
macrotween_BoundSignal.prototype = {
	add: function(listener) {
		this.listeners.push(listener);
	}
	,remove: function(listener) {
		HxOverrides.remove(this.listeners,listener);
	}
	,dispatch: function(reversed) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(reversed);
		}
	}
};
var macrotween_Tween = function(tweeners,duration,startTime,ease) {
	if(startTime == null) {
		startTime = 0;
	}
	if(duration == null) {
		duration = 1;
	}
	macrotween_TimelineItem.call(this,duration,startTime,ease);
	this.tweeners = tweeners.slice(0);
};
macrotween_Tween.__name__ = true;
macrotween_Tween.__super__ = macrotween_TimelineItem;
macrotween_Tween.prototype = $extend(macrotween_TimelineItem.prototype,{
	onLeftHit: function(reversed) {
		macrotween_TimelineItem.prototype.onLeftHit.call(this,reversed);
		this.setImplicitStartTimes();
	}
	,onRightHit: function(reversed) {
		macrotween_TimelineItem.prototype.onRightHit.call(this,reversed);
		this.setImplicitEndTimes();
	}
	,onStartInBounds: function() {
		this.setImplicitStartTimes();
		this.setImplicitEndTimes();
	}
	,onUpdate: function(time,lastTime,substep) {
		if(substep == null) {
			substep = false;
		}
		if(time >= this.get_startTime() && time <= this.get_endTime()) {
			var _g = 0;
			var _g1 = this.tweeners;
			while(_g < _g1.length) {
				var tweener = _g1[_g];
				++_g;
				tweener.tween(tweener.startValue,tweener.endValue,this,time);
			}
		}
	}
	,setImplicitStartTimes: function() {
		if(this._wasInBounds) {
			return;
		}
		var _g = 0;
		var _g1 = this.tweeners;
		while(_g < _g1.length) {
			var tweener = _g1[_g];
			++_g;
			if(tweener.implicitStart) {
				tweener.startValue = tweener.currentValue();
			}
		}
	}
	,setImplicitEndTimes: function() {
		if(this._wasInBounds) {
			return;
		}
		var _g = 0;
		var _g1 = this.tweeners;
		while(_g < _g1.length) {
			var tweener = _g1[_g];
			++_g;
			if(tweener.implicitEnd) {
				tweener.endValue = tweener.currentValue();
			}
		}
	}
});
var macrotween_Tweener = function(startValue,endValue,implicitStart,implicitEnd,currentValue,tween) {
	this.startValue = implicitStart ? endValue : startValue;
	this.endValue = implicitEnd ? startValue : endValue;
	this.implicitStart = implicitStart;
	this.implicitEnd = implicitEnd;
	this.currentValue = currentValue;
	this.tween = tween;
};
macrotween_Tweener.__name__ = true;
var markov_util_StringExtensions = function() { };
markov_util_StringExtensions.__name__ = true;
markov_util_StringExtensions.reverse = function(str) {
	if(str == null) {
		throw haxe_Exception.thrown("FAIL: str != null");
	}
	var arr = str.split("");
	arr.reverse();
	return arr.join("");
};
markov_util_StringExtensions.repeat = function(str,times) {
	if(str == null) {
		throw haxe_Exception.thrown("FAIL: str != null");
	}
	if(times < 1) {
		throw haxe_Exception.thrown("FAIL: times >= 1");
	}
	var output = "";
	var _g = 0;
	var _g1 = times;
	while(_g < _g1) {
		var i = _g++;
		output += str;
	}
	return output;
};
markov_util_StringExtensions.contains = function(str,substr) {
	if(str == null) {
		throw haxe_Exception.thrown("FAIL: str != null");
	}
	if(substr == null) {
		throw haxe_Exception.thrown("FAIL: substr != null");
	}
	return str.indexOf(substr) >= 0;
};
markov_util_StringExtensions.capitalize = function(str) {
	if(!(str != null && str.length > 0)) {
		throw haxe_Exception.thrown("FAIL: str != null && str.length > 0");
	}
	return HxOverrides.substr(str,0,1).toUpperCase() + HxOverrides.substr(str,1,str.length - 1);
};
markov_util_StringExtensions.lowercase = function(str) {
	if(!(str != null && str.length > 0)) {
		throw haxe_Exception.thrown("FAIL: str != null && str.length > 0");
	}
	return HxOverrides.substr(str,0,1).toLowerCase() + HxOverrides.substr(str,1,str.length - 1);
};
markov_util_StringExtensions.capitalizeWords = function(str) {
	if(str == null) {
		throw haxe_Exception.thrown("FAIL: str != null");
	}
	var parts = str.split(" ");
	var results = "";
	var _g = 0;
	var _g1 = parts.length;
	while(_g < _g1) {
		var i = _g++;
		var str = parts[i];
		if(!(str != null && str.length > 0)) {
			throw haxe_Exception.thrown("FAIL: str != null && str.length > 0");
		}
		results += HxOverrides.substr(str,0,1).toUpperCase() + HxOverrides.substr(str,1,str.length - 1);
		if(i <= parts.length - 1) {
			results += " ";
		}
	}
	return results;
};
markov_util_StringExtensions.lowercaseWords = function(str) {
	if(str == null) {
		throw haxe_Exception.thrown("FAIL: str != null");
	}
	var parts = str.split(" ");
	var results = "";
	var _g = 0;
	var _g1 = parts.length;
	while(_g < _g1) {
		var i = _g++;
		var str = parts[i];
		if(!(str != null && str.length > 0)) {
			throw haxe_Exception.thrown("FAIL: str != null && str.length > 0");
		}
		results += HxOverrides.substr(str,0,1).toLowerCase() + HxOverrides.substr(str,1,str.length - 1);
		if(i <= parts.length - 1) {
			results += " ";
		}
	}
	return results;
};
var needs_ai_Action = function(id,name,considerations) {
	this.score = null;
	this.considerations = null;
	this.name = "";
	this.id = null;
	this.instanceId = needs_util_InstanceId.instanceId++;
	this.id = id;
	this.name = name;
	this.considerations = considerations;
	var action = this;
	this.score = function() {
		return needs_ai_ActionScoringStrategies.multiplyConsiderationScores(action);
	};
};
needs_ai_Action.__name__ = true;
var needs_ai_ActionPickingStrategies = function() { };
needs_ai_ActionPickingStrategies.__name__ = true;
needs_ai_ActionPickingStrategies.highestScoringAction = function(actionSet) {
	var actions = actionSet.actions;
	var maxScore = 0;
	var action = null;
	var i = 0;
	while(i < actions.length) {
		var score = actions[i].score();
		if(score >= maxScore) {
			maxScore = score;
			action = actions[i];
		}
		++i;
	}
	return { action : action, score : maxScore};
};
var needs_ai_ActionScoringStrategies = function() { };
needs_ai_ActionScoringStrategies.__name__ = true;
needs_ai_ActionScoringStrategies.multiplyConsiderationScores = function(action) {
	var considerations = action.considerations;
	if(considerations.length == 0) {
		return 0.0;
	}
	var score = 1.0;
	var _g = 0;
	while(_g < considerations.length) {
		var consideration = considerations[_g];
		++_g;
		score *= consideration.score();
	}
	return score;
};
needs_ai_ActionScoringStrategies.averageSumConsiderationScores = function(action) {
	var considerations = action.considerations;
	if(considerations.length == 0) {
		return 0.0;
	}
	var score = 0.0;
	var i = 0;
	while(i < considerations.length) {
		score += considerations[i].score();
		++i;
	}
	if(score == 0) {
		return score;
	}
	return score / i;
};
var needs_ai_ActionSet = function(id,name,actions) {
	this.select = null;
	this.actions = null;
	this.name = "";
	this.id = null;
	this.instanceId = needs_util_InstanceId.instanceId++;
	this.id = id;
	this.name = name;
	this.actions = actions;
	var actionSet = this;
	this.select = function() {
		return needs_ai_ActionPickingStrategies.highestScoringAction(actionSet);
	};
};
needs_ai_ActionSet.__name__ = true;
var needs_ai_ActionSetScoringStrategies = function() { };
needs_ai_ActionSetScoringStrategies.__name__ = true;
needs_ai_ActionSetScoringStrategies.passthroughScoringStrategy = function(reasoner) {
	var sets = [];
	var _g = 0;
	var _g1 = reasoner.actionSets;
	while(_g < _g1.length) {
		var set = _g1[_g];
		++_g;
		sets.push({ actionSet : set, score : 1.0});
	}
	return sets;
};
var needs_ai_Brain = function(id,reasoners) {
	this.onReasonerRemoved = null;
	this.onReasonerAdded = null;
	this.onActionChanged = null;
	this.reasoners = null;
	this.id = null;
	this.instanceId = needs_util_InstanceId.instanceId++;
	this.id = id;
	var this1 = [];
	this.onActionChanged = this1;
	var this1 = [];
	this.onReasonerAdded = this1;
	var this1 = [];
	this.onReasonerRemoved = this1;
	this.reasoners = [];
	var _g = 0;
	while(_g < reasoners.length) {
		var reasoner = reasoners[_g];
		++_g;
		this.addReasoner(reasoner);
	}
};
needs_ai_Brain.__name__ = true;
needs_ai_Brain.prototype = {
	update: function() {
		var _g = 0;
		var _g1 = this.reasoners;
		while(_g < _g1.length) {
			var reasoner = _g1[_g];
			++_g;
			var actionScorePair = reasoner.selectAction();
			if(actionScorePair == null && reasoner.lastAction != null) {
				reasoner.set_lastAction(null);
				continue;
			}
			if(reasoner.lastAction == null && actionScorePair != null) {
				reasoner.set_lastAction(actionScorePair.action);
				continue;
			}
			if(actionScorePair.action.id != reasoner.lastAction.id) {
				reasoner.set_lastAction(actionScorePair.action);
				continue;
			}
		}
	}
	,addReasoner: function(reasoner) {
		this.reasoners.push(reasoner);
		reasoner.onActionChanged = this.onActionChanged;
		var this1 = this.onReasonerAdded;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(this,reasoner);
		}
	}
	,removeReasoner: function(reasoner) {
		HxOverrides.remove(this.reasoners,reasoner);
		reasoner.onActionChanged = null;
		var this1 = this.onReasonerRemoved;
		var _g = 0;
		while(_g < this1.length) {
			var listener = this1[_g];
			++_g;
			listener(this,reasoner);
		}
	}
};
var needs_ai_Consideration = function(id,name,input,response) {
	this.response = null;
	this.input = null;
	this.name = "";
	this.id = null;
	this.instanceId = needs_util_InstanceId.instanceId++;
	this.id = id;
	this.name = name;
	this.input = input;
	this.response = response;
};
needs_ai_Consideration.__name__ = true;
needs_ai_Consideration.prototype = {
	score: function() {
		return this.input.evaluate(this.response);
	}
};
var needs_ai_Reasoner = function(id,name,actionSets) {
	this.selectAction = null;
	this.selectActionSet = null;
	this.lastAction = null;
	this.onActionChanged = null;
	this.actionSets = null;
	this.name = "";
	this.id = null;
	this.instanceId = needs_util_InstanceId.instanceId++;
	this.id = id;
	this.name = name;
	this.actionSets = actionSets;
	var this1 = [];
	this.onActionChanged = this1;
	this.set_lastAction(null);
	var reasoner = this;
	this.selectActionSet = function() {
		return needs_ai_ActionSetScoringStrategies.passthroughScoringStrategy(reasoner);
	};
	var reasoner1 = this;
	this.selectAction = function() {
		return needs_ai_ReasonerActionPickingStrategies.highestScoringAction(reasoner1);
	};
};
needs_ai_Reasoner.__name__ = true;
needs_ai_Reasoner.prototype = {
	set_lastAction: function(action) {
		var last = this.lastAction;
		this.lastAction = action;
		if(action == null && last == null) {
			return action;
		}
		if(action == null && last != null || action != null && last == null) {
			var this1 = this.onActionChanged;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(this,last,action);
			}
			return action;
		}
		if(last.id != action.id) {
			var this1 = this.onActionChanged;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(this,last,action);
			}
			return action;
		}
		return action;
	}
};
var needs_ai_ReasonerActionPickingStrategies = function() { };
needs_ai_ReasonerActionPickingStrategies.__name__ = true;
needs_ai_ReasonerActionPickingStrategies.highestScoringAction = function(reasoner) {
	var actionSets = reasoner.actionSets;
	var maxPair = { action : null, score : 0};
	var i = 0;
	while(i < actionSets.length) {
		var pair = actionSets[i].select();
		if(pair != null && pair.score >= maxPair.score) {
			maxPair = pair;
		}
		++i;
	}
	return maxPair;
};
needs_ai_ReasonerActionPickingStrategies.randomInPreferredActionSet = function(reasoner) {
	var actionSets = reasoner.selectActionSet();
	if(actionSets.length == 0) {
		return { action : null, score : 0};
	}
	if(actionSets[0].actionSet.actions.length == 0) {
		return { action : null, score : 0};
	}
	var action = actionSets[0].actionSet.actions[(actionSets[0].actionSet.actions.length - 1) * Math.random() | 0];
	return { action : action, score : 0};
};
var needs_responses_Linear = function() { };
needs_responses_Linear.__name__ = true;
needs_responses_Linear.make = function(m,c) {
	var m1 = m;
	var c1 = c;
	return function(x) {
		var value = m1 * x + c1;
		if(value < 0) {
			return 0;
		} else if(value > 1) {
			return 1;
		} else {
			return value;
		}
	};
};
needs_responses_Linear.response = function(m,c,x) {
	var value = m * x + c;
	if(value < 0) {
		return 0;
	} else if(value > 1) {
		return 1;
	} else {
		return value;
	}
};
var needs_util_FileReader = function() { };
needs_util_FileReader.__name__ = true;
var needs_util_InstanceId = function() { };
needs_util_InstanceId.__name__ = true;
needs_util_InstanceId.makeId = function() {
	return needs_util_InstanceId.instanceId++;
};
var needs_util_MathUtil = function() { };
needs_util_MathUtil.__name__ = true;
needs_util_MathUtil.clamp = function(value,min,max) {
	if(max == null) {
		max = 1;
	}
	if(min == null) {
		min = 0;
	}
	if(value < min) {
		return min;
	} else if(value > max) {
		return max;
	} else {
		return value;
	}
};
var needs_util_Signal0 = {};
needs_util_Signal0._new = function() {
	var this1 = [];
	return this1;
};
needs_util_Signal0.connect = function(this1,listener) {
	this1.push(listener);
};
needs_util_Signal0.disconnect = function(this1,listener) {
	HxOverrides.remove(this1,listener);
};
needs_util_Signal0.dispatch = function(this1) {
	var _g = 0;
	while(_g < this1.length) {
		var listener = this1[_g];
		++_g;
		listener();
	}
};
var needs_util_Signal1 = {};
needs_util_Signal1._new = function() {
	var this1 = [];
	return this1;
};
needs_util_Signal1.connect = function(this1,listener) {
	this1.push(listener);
};
needs_util_Signal1.disconnect = function(this1,listener) {
	HxOverrides.remove(this1,listener);
};
needs_util_Signal1.dispatch = function(this1,data0) {
	var _g = 0;
	while(_g < this1.length) {
		var listener = this1[_g];
		++_g;
		listener(data0);
	}
};
var needs_util_Signal2 = {};
needs_util_Signal2._new = function() {
	var this1 = [];
	return this1;
};
needs_util_Signal2.connect = function(this1,listener) {
	this1.push(listener);
};
needs_util_Signal2.disconnect = function(this1,listener) {
	HxOverrides.remove(this1,listener);
};
needs_util_Signal2.dispatch = function(this1,data0,data1) {
	var _g = 0;
	while(_g < this1.length) {
		var listener = this1[_g];
		++_g;
		listener(data0,data1);
	}
};
var needs_util_Signal3 = {};
needs_util_Signal3._new = function() {
	var this1 = [];
	return this1;
};
needs_util_Signal3.connect = function(this1,listener) {
	this1.push(listener);
};
needs_util_Signal3.disconnect = function(this1,listener) {
	HxOverrides.remove(this1,listener);
};
needs_util_Signal3.dispatch = function(this1,data0,data1,data2) {
	var _g = 0;
	while(_g < this1.length) {
		var listener = this1[_g];
		++_g;
		listener(data0,data1,data2);
	}
};
var needs_util_Signal4 = {};
needs_util_Signal4._new = function() {
	var this1 = [];
	return this1;
};
needs_util_Signal4.connect = function(this1,listener) {
	this1.push(listener);
};
needs_util_Signal4.disconnect = function(this1,listener) {
	HxOverrides.remove(this1,listener);
};
needs_util_Signal4.dispatch = function(this1,data0,data1,data2,data3) {
	var _g = 0;
	while(_g < this1.length) {
		var listener = this1[_g];
		++_g;
		listener(data0,data1,data2,data3);
	}
};
var needs_util_Signal5 = {};
needs_util_Signal5._new = function() {
	var this1 = [];
	return this1;
};
needs_util_Signal5.connect = function(this1,listener) {
	this1.push(listener);
};
needs_util_Signal5.disconnect = function(this1,listener) {
	HxOverrides.remove(this1,listener);
};
needs_util_Signal5.dispatch = function(this1,data0,data1,data2,data3,data4) {
	var _g = 0;
	while(_g < this1.length) {
		var listener = this1[_g];
		++_g;
		listener(data0,data1,data2,data3,data4);
	}
};
var needs_util_Signal6 = {};
needs_util_Signal6._new = function() {
	var this1 = [];
	return this1;
};
needs_util_Signal6.connect = function(this1,listener) {
	this1.push(listener);
};
needs_util_Signal6.disconnect = function(this1,listener) {
	HxOverrides.remove(this1,listener);
};
needs_util_Signal6.dispatch = function(this1,data0,data1,data2,data3,data4,data5) {
	var _g = 0;
	while(_g < this1.length) {
		var listener = this1[_g];
		++_g;
		listener(data0,data1,data2,data3,data4,data5);
	}
};
var needs_util_Signal7 = {};
needs_util_Signal7._new = function() {
	var this1 = [];
	return this1;
};
needs_util_Signal7.connect = function(this1,listener) {
	this1.push(listener);
};
needs_util_Signal7.disconnect = function(this1,listener) {
	HxOverrides.remove(this1,listener);
};
needs_util_Signal7.dispatch = function(this1,data0,data1,data2,data3,data4,data5,data6) {
	var _g = 0;
	while(_g < this1.length) {
		var listener = this1[_g];
		++_g;
		listener(data0,data1,data2,data3,data4,data5,data6);
	}
};
var ui_Console = function() {
	this.onConsoleCommandIssued = [];
	this.terminalElement = window.document.getElementById("console");
	this.terminalElement.addEventListener("mousewheel",function(e) {
		e.preventDefault();
	},false);
};
ui_Console.__name__ = true;
ui_Console.stringifyActualizers = function(actualizers) {
	if(actualizers == null || actualizers.length == 0) {
		return "nothing";
	}
	var s = "[ ";
	var _g = 0;
	while(_g < actualizers.length) {
		var actualizer = actualizers[_g];
		++_g;
		s += actualizer.id + " ";
	}
	s += "]";
	return s;
};
ui_Console.prototype = {
	setupWorldSignals: function(world) {
		var _gthis = this;
		world.logicalWorld.onHumanAdded.push(function(human) {
			_gthis.echo("(Human) " + human.name + " has arrived");
		});
		world.logicalWorld.onHumanRemoved.push(function(human) {
			_gthis.echo("(Human) " + human.name + "has departed");
		});
		world.logicalWorld.onZombieAdded.push(function(zombie) {
			_gthis.echo("(Zombie) " + zombie.name + " has arrived");
		});
		world.logicalWorld.onZombieRemoved.push(function(zombie) {
			_gthis.echo("(Zombie) " + zombie.name + " has departed");
		});
		world.logicalWorld.onWeaponAdded.push(function(who,weapon) {
			_gthis.echo("(Weapon) " + weapon.name + " was added at (" + (weapon.x == null ? "null" : "" + weapon.x) + "," + (weapon.y == null ? "null" : "" + weapon.y) + ")");
		});
		world.logicalWorld.onWeaponRemoved.push(function(who,weapon) {
			_gthis.echo("(Weapon) " + weapon.name + " was removed by " + (who == null ? "nobody" : who.name));
		});
		world.logicalWorld.onHealthAdded.push(function(who,health) {
			_gthis.echo("(Health) " + health.name + " was added at (" + (health.x == null ? "null" : "" + health.x) + "," + (health.y == null ? "null" : "" + health.y) + ")");
		});
		world.logicalWorld.onHealthRemoved.push(function(who,health) {
			_gthis.echo("(Health) " + health.name + " was removed by " + (who == null ? "nobody" : who.name));
		});
		world.logicalWorld.onNPCThinked.push(function(who) {
			_gthis.echo(who.name + " is thinking...");
		});
		world.logicalWorld.onNPCMoved.push(function(who,oldX,oldY,newX,newY) {
			_gthis.echo(who.name + " moved from continuous position (" + oldX + ", " + oldY + ") to (" + newX + ", " + newY + ")");
		});
		world.logicalWorld.onNPCMovedOnWorldGrid.onChanged.push(function(who,oldX,oldY,oldGridX,oldGridY,newGridX,newGridY) {
			_gthis.echo(who.name + " moved from grid position (" + oldGridX + ", " + oldGridY + ") to (" + newGridX + ", " + newGridY + ")");
		});
		world.logicalWorld.onNPCActedIdly.push(function(who) {
			var _gthis1 = _gthis;
			var tmp = who.name + " acted on desires for ";
			var actualizers = who.fallbackActualizers;
			var tmp1;
			if(actualizers == null || actualizers.length == 0) {
				tmp1 = "nothing";
			} else {
				var s = "[ ";
				var _g = 0;
				while(_g < actualizers.length) {
					var actualizer = actualizers[_g];
					++_g;
					s += actualizer.id + " ";
				}
				s += "]";
				tmp1 = s;
			}
			_gthis1.echo(tmp + tmp1 + ", as they could not think of what else to do.");
		});
		world.logicalWorld.onHumanActed.push(function(who) {
			var _gthis1 = _gthis;
			var tmp = who.name + " acted on desires for ";
			var actualizers = who.actualizers;
			var tmp1;
			if(actualizers == null || actualizers.length == 0) {
				tmp1 = "nothing";
			} else {
				var s = "[ ";
				var _g = 0;
				while(_g < actualizers.length) {
					var actualizer = actualizers[_g];
					++_g;
					s += actualizer.id + " ";
				}
				s += "]";
				tmp1 = s;
			}
			_gthis1.echo(tmp + tmp1);
		});
		world.logicalWorld.onZombieActed.push(function(who) {
			var _gthis1 = _gthis;
			var tmp = who.name + " acted on desires for ";
			var actualizers = who.actualizers;
			var tmp1;
			if(actualizers == null || actualizers.length == 0) {
				tmp1 = "nothing";
			} else {
				var s = "[ ";
				var _g = 0;
				while(_g < actualizers.length) {
					var actualizer = actualizers[_g];
					++_g;
					s += actualizer.id + " ";
				}
				s += "]";
				tmp1 = s;
			}
			_gthis1.echo(tmp + tmp1);
		});
		world.utteranceManager.onUtteranceRequested.push(function(npc,what) {
			_gthis.echo(npc.name + " said: " + what);
		});
	}
	,createTerminal: function() {
		var _gthis = this;
		terminal.push(function(command,terminal1) {
			var this1 = _gthis.onConsoleCommandIssued;
			var _g = 0;
			while(_g < this1.length) {
				var listener = this1[_g];
				++_g;
				listener(command);
			}
		},{ greetings : false, name : ">", scrollOnEcho : true});
	}
	,echo: function(s) {
		terminal.echo(s);
	}
	,clear: function() {
		terminal.clear();
	}
};
var ui_NpcStateView = function(npc,teamInfoView) {
	this.npcRootExpander = null;
	this.npcRootList = null;
	this.npcRoot = null;
	this.root = null;
	this.npc = npc;
	this.teamInfoView = teamInfoView;
	this.root = window.document.createElement("div");
	this.npcRoot = window.document.createElement("div");
	this.root.appendChild(this.npcRoot);
	var rootList = ui_NpcStateView.makeRootList(npc.name,this.npcRoot);
	this.npcRootList = rootList.list;
	this.npcRootExpander = rootList.expander;
	this.add();
};
ui_NpcStateView.__name__ = true;
ui_NpcStateView.makeList = function(listTitle,parent,listClass,expanderClass,parentClass) {
	if(parentClass == null) {
		parentClass = "npcviewlistnested";
	}
	if(expanderClass == null) {
		expanderClass = "npcviewlistcaret";
	}
	if(listClass == null) {
		listClass = "npcviewlistnested";
	}
	var list = window.document.createElement("ul");
	list.className = listClass;
	var expander = window.document.createElement("li");
	expander.className = expanderClass;
	var span = window.document.createElement("span");
	span.innerHTML = listTitle;
	var e = span;
	e.addEventListener("click",function() {
		var els = e.parentElement.getElementsByClassName("npcviewlistnested");
		if(els == null) {
			return;
		}
		var _g = 0;
		while(_g < els.length) {
			var el = els[_g];
			++_g;
			el.classList.toggle("npcviewlistactive");
			el.parentElement.classList.toggle("npcviewlistcaretdown");
		}
	});
	expander.appendChild(span);
	list.appendChild(expander);
	if(parent == null) {
		parent = window.document.createElement("ul");
		parent.className = parentClass;
	}
	parent.appendChild(list);
	return { list : list, expander : expander, parent : parent};
};
ui_NpcStateView.makeRootList = function(listTitle,parent,listClass,expanderClass,parentClass) {
	if(parentClass == null) {
		parentClass = "npcviewlistnested";
	}
	if(expanderClass == null) {
		expanderClass = "npcviewlistcaret";
	}
	if(listClass == null) {
		listClass = "npcviewlist";
	}
	return ui_NpcStateView.makeList(listTitle,parent,listClass,expanderClass,parentClass);
};
ui_NpcStateView.makeToggleable = function(e) {
	e.addEventListener("click",function() {
		var els = e.parentElement.getElementsByClassName("npcviewlistnested");
		if(els == null) {
			return;
		}
		var _g = 0;
		while(_g < els.length) {
			var el = els[_g];
			++_g;
			el.classList.toggle("npcviewlistactive");
			el.parentElement.classList.toggle("npcviewlistcaretdown");
		}
	});
};
ui_NpcStateView.getId = function(e) {
	return Std.parseInt(e.getAttribute("needs_ai_instance_id"));
};
ui_NpcStateView.setId = function(e,inst) {
	e.setAttribute("needs_ai_instance_id",Std.string(inst.instanceId));
};
ui_NpcStateView.getElementById = function(id) {
	var els = window.document.querySelectorAll("[needs_ai_instance_id='" + (id == null ? "null" : "" + id) + "']");
	if(els != null && els.length > 0) {
		return els[0];
	}
	return null;
};
ui_NpcStateView.removeElementById = function(id) {
	var el = ui_NpcStateView.getElementById(id);
	if(el != null) {
		el.remove();
	}
};
ui_NpcStateView.prototype = {
	add: function() {
		var _gthis = this;
		this.teamInfoView.parentDiv.appendChild(this.root);
		var _g = 0;
		var _g1 = this.npc.brains;
		while(_g < _g1.length) {
			var brain = _g1[_g];
			++_g;
			this.setupBrainView(brain);
		}
		this.npc.onBrainAdded.push(function(brain) {
			_gthis.setupBrainView(brain);
		});
		this.npc.onBrainRemoved.push(function(brain) {
			ui_NpcStateView.removeElementById(brain.instanceId);
		});
	}
	,remove: function() {
		this.teamInfoView.parentDiv.removeChild(this.root);
	}
	,setupBrainView: function(brain) {
		var _gthis = this;
		var _g = 0;
		var _g1 = brain.reasoners;
		while(_g < _g1.length) {
			var reasoner = _g1[_g];
			++_g;
			var l = ui_NpcStateView.makeList("Brain: " + Std.string(brain.id),this.npcRootExpander).expander;
			this.setupReasonerView(l,reasoner);
		}
		brain.onReasonerAdded.push(function(brain,reasoner) {
			var l = ui_NpcStateView.makeList(Std.string(brain.id),_gthis.npcRootList).expander;
			_gthis.setupReasonerView(l,reasoner);
		});
		brain.onReasonerRemoved.push(function(brain,reasoner) {
			ui_NpcStateView.removeElementById(reasoner.instanceId);
		});
	}
	,setupReasonerView: function(parent,reasoner) {
		var reasonerList = window.document.createElement("ul");
		reasonerList.className = "npcviewlistnested";
		var reasonerExpander = window.document.createElement("li");
		reasonerExpander.className = "npcviewlistcaret";
		var reasonerSpan = window.document.createElement("span");
		reasonerSpan.innerHTML = reasoner.name;
		var e = reasonerSpan;
		e.addEventListener("click",function() {
			var els = e.parentElement.getElementsByClassName("npcviewlistnested");
			if(els == null) {
				return;
			}
			var _g = 0;
			while(_g < els.length) {
				var el = els[_g];
				++_g;
				el.classList.toggle("npcviewlistactive");
				el.parentElement.classList.toggle("npcviewlistcaretdown");
			}
		});
		var actionSetList = window.document.createElement("ul");
		actionSetList.className = "npcviewlistnested";
		var _g = 0;
		var _g1 = reasoner.actionSets;
		while(_g < _g1.length) {
			var actionSet = _g1[_g];
			++_g;
			var actionSetExpander = window.document.createElement("li");
			actionSetExpander.className = "npcviewlistcaret";
			var actionSetSpan = window.document.createElement("span");
			actionSetSpan.innerHTML = actionSet.name;
			var e1 = [actionSetSpan];
			e1[0].addEventListener("click",(function(e) {
				return function() {
					var els = e[0].parentElement.getElementsByClassName("npcviewlistnested");
					if(els == null) {
						return;
					}
					var _g = 0;
					while(_g < els.length) {
						var el = els[_g];
						++_g;
						el.classList.toggle("npcviewlistactive");
						el.parentElement.classList.toggle("npcviewlistcaretdown");
					}
				};
			})(e1));
			actionSetExpander.appendChild(actionSetSpan);
			actionSetList.appendChild(actionSetExpander);
			var actionList = window.document.createElement("ul");
			actionList.className = "npcviewlistnested";
			var _g2 = 0;
			var _g3 = actionSet.actions;
			while(_g2 < _g3.length) {
				var action = _g3[_g2];
				++_g2;
				var actionExpander = window.document.createElement("li");
				actionExpander.className = "npcviewlistcaret";
				var actionSpan = window.document.createElement("span");
				actionSpan.innerHTML = action.name;
				var e2 = [actionSpan];
				e2[0].addEventListener("click",(function(e) {
					return function() {
						var els = e[0].parentElement.getElementsByClassName("npcviewlistnested");
						if(els == null) {
							return;
						}
						var _g = 0;
						while(_g < els.length) {
							var el = els[_g];
							++_g;
							el.classList.toggle("npcviewlistactive");
							el.parentElement.classList.toggle("npcviewlistcaretdown");
						}
					};
				})(e2));
				actionExpander.appendChild(actionSpan);
				actionList.appendChild(actionExpander);
				var considerationList = window.document.createElement("ul");
				considerationList.className = "npcviewlistnested";
				var _g4 = 0;
				var _g5 = action.considerations;
				while(_g4 < _g5.length) {
					var consideration = _g5[_g4];
					++_g4;
					var considerationExpander = window.document.createElement("li");
					considerationExpander.className = "npcviewlistcaret";
					var considerationSpan = window.document.createElement("span");
					considerationSpan.innerHTML = consideration.name;
					var e3 = [considerationSpan];
					e3[0].addEventListener("click",(function(e) {
						return function() {
							var els = e[0].parentElement.getElementsByClassName("npcviewlistnested");
							if(els == null) {
								return;
							}
							var _g = 0;
							while(_g < els.length) {
								var el = els[_g];
								++_g;
								el.classList.toggle("npcviewlistactive");
								el.parentElement.classList.toggle("npcviewlistcaretdown");
							}
						};
					})(e3));
					considerationExpander.appendChild(considerationSpan);
					considerationList.appendChild(considerationExpander);
					var inputList = window.document.createElement("ul");
					inputList.className = "npcviewlistnested";
					var input = consideration.input;
					var inputItem = window.document.createElement("li");
					var inputSpan = window.document.createElement("span");
					inputSpan.innerHTML = Std.string(input.id);
					var e4 = [inputSpan];
					e4[0].addEventListener("click",(function(e) {
						return function() {
							var els = e[0].parentElement.getElementsByClassName("npcviewlistnested");
							if(els == null) {
								return;
							}
							var _g = 0;
							while(_g < els.length) {
								var el = els[_g];
								++_g;
								el.classList.toggle("npcviewlistactive");
								el.parentElement.classList.toggle("npcviewlistcaretdown");
							}
						};
					})(e4));
					inputItem.appendChild(inputSpan);
					inputList.appendChild(inputItem);
					considerationExpander.appendChild(inputList);
				}
				actionExpander.appendChild(considerationList);
				actionSetExpander.appendChild(actionList);
			}
		}
		reasonerExpander.appendChild(reasonerSpan);
		reasonerExpander.appendChild(actionSetList);
		reasonerList.appendChild(reasonerExpander);
		ui_NpcStateView.setId(reasonerList,reasoner);
		parent.appendChild(reasonerList);
	}
};
var ui_HumanStateView = function(npc,teamInfoView) {
	this.actualActionsList = null;
	this.pastActionsExpander = null;
	this.pastActionsList = null;
	var _gthis = this;
	ui_NpcStateView.call(this,npc,teamInfoView);
	npc.onActionChanged.push(function(before,after) {
		_gthis.setupActionElement(before,after);
	});
};
ui_HumanStateView.__name__ = true;
ui_HumanStateView.__super__ = ui_NpcStateView;
ui_HumanStateView.prototype = $extend(ui_NpcStateView.prototype,{
	add: function() {
		var pastActions = ui_NpcStateView.makeList("Past Actions",this.npcRootExpander);
		this.pastActionsList = pastActions.list;
		this.pastActionsExpander = pastActions.expander;
		this.actualActionsList = window.document.createElement("ul");
		this.actualActionsList.className = "npcviewlistnested";
		this.pastActionsExpander.appendChild(this.actualActionsList);
		this.setupActionElement(null,null);
		ui_NpcStateView.prototype.add.call(this);
	}
	,remove: function() {
		ui_NpcStateView.prototype.remove.call(this);
	}
	,setupActionElement: function(before,after) {
		var li = window.document.createElement("li");
		li.innerHTML = "Action: " + (before != null ? before.name : "null") + " => " + (after != null ? after.name : "null");
		this.actualActionsList.appendChild(li);
	}
});
var ui_TeamInfoView = function(world,parentDiv) {
	parentDiv.innerHTML = "";
	this.parentDiv = parentDiv;
};
ui_TeamInfoView.__name__ = true;
var ui_HumanTeamInfoView = function(world,parentDiv) {
	this.views = [];
	var _gthis = this;
	ui_TeamInfoView.call(this,world,parentDiv);
	world.logicalWorld.onHumanAdded.push(function(human) {
		_gthis.views.push(new ui_HumanStateView(human,_gthis));
	});
	world.logicalWorld.onHumanRemoved.push(function(human) {
		var _g = 0;
		var _g1 = _gthis.views;
		while(_g < _g1.length) {
			var view = _g1[_g];
			++_g;
			if(view.npc == human) {
				HxOverrides.remove(_gthis.views,view);
			}
		}
	});
};
ui_HumanTeamInfoView.__name__ = true;
ui_HumanTeamInfoView.__super__ = ui_TeamInfoView;
ui_HumanTeamInfoView.prototype = $extend(ui_TeamInfoView.prototype,{
});
var ui_InfluenceMapView = function() { };
ui_InfluenceMapView.__name__ = true;
ui_InfluenceMapView.addGUI = function(v) {
	var root = new dat.GUI({ autoPlace : true});
	root.domElement.id = v.id;
	var gui = root.addFolder("Influence Map: " + v.id);
	var heightMapUniforms = v.heightMapUniforms;
	var normalUniforms = v.normalUniforms;
	var influenceUniforms = v.influenceUniforms;
	var updateValues = function(t) {
	};
	var add = function(parent,object,fieldName,folderName,step) {
		if(step == null) {
			step = 0.025;
		}
		var folder = parent.addFolder(folderName);
		return folder.add(object,fieldName).step(step).listen().onChange(updateValues);
	};
	var heightmapFolder = gui.addFolder("Height Map");
	add(heightmapFolder,heightMapUniforms.time,"value","time").step(0.025).listen().onChange(updateValues);
	add(heightmapFolder,heightMapUniforms.noiseContribution,"value","noise contribution").step(0.025).listen().onChange(updateValues);
	var heightmapScaleFolder = heightmapFolder.addFolder("scale");
	heightmapScaleFolder.add(heightMapUniforms.scale.value,"x").step(0.025).listen().onChange(updateValues);
	heightmapScaleFolder.add(heightMapUniforms.scale.value,"y").step(0.025).listen().onChange(updateValues);
	var heightmapOffsetFolder = heightmapFolder.addFolder("offset");
	heightmapOffsetFolder.add(heightMapUniforms.offset.value,"x").step(0.025).listen().onChange(updateValues);
	heightmapOffsetFolder.add(heightMapUniforms.offset.value,"y").step(0.025).listen().onChange(updateValues);
	var normalmapFolder = gui.addFolder("Normal Map");
	add(normalmapFolder,normalUniforms.height,"value","height").step(0.025).listen().onChange(updateValues);
	var normalmapResolutionFolder = normalmapFolder.addFolder("resolution");
	normalmapResolutionFolder.add(normalUniforms.resolution.value,"x").step(0.025).listen().onChange(updateValues);
	normalmapResolutionFolder.add(normalUniforms.resolution.value,"y").step(0.025).listen().onChange(updateValues);
	var influenceFolder = gui.addFolder("influence");
	add(influenceFolder,influenceUniforms.uNormalScale,"value","normal scale").step(0.025).listen().onChange(updateValues);
	var diffuseColorFolder = influenceFolder.addFolder("diffuse");
	diffuseColorFolder.add(influenceUniforms.diffuse.value,"x").step(0.025).listen().onChange(updateValues);
	diffuseColorFolder.add(influenceUniforms.diffuse.value,"y").step(0.025).listen().onChange(updateValues);
	diffuseColorFolder.add(influenceUniforms.diffuse.value,"z").step(0.025).listen().onChange(updateValues);
	diffuseColorFolder.add(influenceUniforms.diffuse.value,"w").step(0.025).listen().onChange(updateValues);
	add(influenceFolder,influenceUniforms.opacity,"value","opacity").step(0.025).listen().onChange(updateValues);
	add(influenceFolder,influenceUniforms.uDisplacementBias,"value","displacement bias").step(0.25).listen().onChange(updateValues);
	add(influenceFolder,influenceUniforms.uDisplacementScale,"value","displacement scale").step(0.25).listen().onChange(updateValues);
	var repeatBaseFolder = influenceFolder.addFolder("repeatBase");
	repeatBaseFolder.add(influenceUniforms.uRepeatBase.value,"x").step(0.025).listen().onChange(updateValues);
	repeatBaseFolder.add(influenceUniforms.uRepeatBase.value,"y").step(0.025).listen().onChange(updateValues);
	var repeatOverlayFolder = influenceFolder.addFolder("repeatOverlay");
	repeatOverlayFolder.add(influenceUniforms.uRepeatOverlay.value,"x").step(0.025).listen().onChange(updateValues);
	repeatOverlayFolder.add(influenceUniforms.uRepeatOverlay.value,"y").step(0.025).listen().onChange(updateValues);
	var offsetFolder = influenceFolder.addFolder("offset");
	offsetFolder.add(influenceUniforms.uOffset.value,"x").step(0.025).listen().onChange(updateValues);
	offsetFolder.add(influenceUniforms.uOffset.value,"y").step(0.025).listen().onChange(updateValues);
	return root;
};
var ui_ZombieStateView = function(npc,teamInfoView) {
	ui_NpcStateView.call(this,npc,teamInfoView);
};
ui_ZombieStateView.__name__ = true;
ui_ZombieStateView.__super__ = ui_NpcStateView;
ui_ZombieStateView.prototype = $extend(ui_NpcStateView.prototype,{
	add: function() {
		ui_NpcStateView.prototype.add.call(this);
	}
	,remove: function() {
		ui_NpcStateView.prototype.remove.call(this);
	}
});
var ui_ZombieTeamInfoView = function(world,parentDiv) {
	this.views = [];
	var _gthis = this;
	ui_TeamInfoView.call(this,world,parentDiv);
	world.logicalWorld.onZombieAdded.push(function(zombie) {
		_gthis.views.push(new ui_ZombieStateView(zombie,_gthis));
	});
	world.logicalWorld.onZombieRemoved.push(function(zombie) {
		var _g = 0;
		var _g1 = _gthis.views;
		while(_g < _g1.length) {
			var view = _g1[_g];
			++_g;
			if(view.npc == zombie) {
				HxOverrides.remove(_gthis.views,view);
			}
		}
	});
};
ui_ZombieTeamInfoView.__name__ = true;
ui_ZombieTeamInfoView.__super__ = ui_TeamInfoView;
ui_ZombieTeamInfoView.prototype = $extend(ui_TeamInfoView.prototype,{
});
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = "Date";
js_Boot.__toStr = ({ }).toString;
ID.header = "header";
ID.playturn = "playturn";
ID.skipturn = "skipturn";
ID.restartgame = "restartgame";
ID.humanteaminfo = "humanteaminfo";
ID.game = "game";
ID.zombieteaminfo = "zombieteaminfo";
ID.influencemapbuttoncontainer = "influencemapbuttoncontainer";
ID.console = "console";
Main.lastAnimationTime = 0.0;
Main.dt = 0.0;
Main.takeTurnButton = window.document.getElementById("playturn");
Main.skipTurnButton = window.document.getElementById("skipturn");
Main.resetButton = window.document.getElementById("restartgame");
game_actualizers_SharedActualizers.humanAttackActualizer = new game_actualizers_HumanAttackActualizer();
game_actualizers_SharedActualizers.humanGatherSuppliesActualizer = new game_actualizers_HumanGatherSuppliesActualizer();
game_actualizers_SharedActualizers.humanPanicActualizer = new game_actualizers_HumanPanicActualizer();
game_actualizers_SharedActualizers.humanRetreatActualizer = new game_actualizers_HumanRetreatActualizer();
game_actualizers_SharedActualizers.humanRoamActualizer = new game_actualizers_HumanRoamActualizer();
game_actualizers_SharedActualizers.zombieAttackActualizer = new game_actualizers_ZombieAttackActualizer();
game_actualizers_SharedActualizers.zombiePursueActualizer = new game_actualizers_ZombiePursueActualizer();
game_actualizers_SharedActualizers.zombieRoamActualizer = new game_actualizers_ZombieRoamActualizer();
game_util_TrainingData.american_surnames = ["abbott","acevedo","acosta","adams","adkins","aguilar","aguirre","albert","alexander","alford","allen","allison","alston","alvarado","alvarez","anderson","andrews","anthony","armstrong","arnold","ashley","atkins","atkinson","austin","avery","avila","ayala","ayers","bailey","baird","baker","baldwin","ball","ballard","banks","barber","barker","barlow","barnes","barnett","barr","barrera","barrett","barron","barry","bartlett","barton","bass","bates","battle","bauer","baxter","beach","bean","beard","beasley","beck","becker","bell","bender","benjamin","bennett","benson","bentley","benton","berg","berger","bernard","berry","best","bird","bishop","black","blackburn","blackwell","blair","blake","blanchard","blankenship","blevins","bolton","bond","bonner","booker","boone","booth","bowen","bowers","bowman","boyd","boyer","boyle","bradford","bradley","bradshaw","brady","branch","bray","brennan","brewer","bridges","briggs","bright","britt","brock","brooks","brown","browning","bruce","bryan","bryant","buchanan","buck","buckley","buckner","bullock","burch","burgess","burke","burks","burnett","burns","burris","burt","burton","bush","butler","byers","byrd","cabrera","cain","calderon","caldwell","calhoun","callahan","camacho","cameron","campbell","campos","cannon","cantrell","cantu","cardenas","carey","carlson","carney","carpenter","carr","carrillo","carroll","carson","carter","carver","case","casey","cash","castaneda","castillo","castro","cervantes","chambers","chan","chandler","chaney","chang","chapman","charles","chase","chavez","chen","cherry","christensen","christian","church","clark","clarke","clay","clayton","clements","clemons","cleveland","cline","cobb","cochran","coffey","cohen","cole","coleman","collier","collins","colon","combs","compton","conley","conner","conrad","contreras","conway","cook","cooke","cooley","cooper","copeland","cortez","cote","cotton","cox","craft","craig","crane","crawford","crosby","cross","cruz","cummings","cunningham","curry","curtis","dale","dalton","daniel","daniels","daugherty","davenport","david","davidson","davis","dawson","day","dean","decker","dejesus","delacruz","delaney","deleon","delgado","dennis","diaz","dickerson","dickson","dillard","dillon","dixon","dodson","dominguez","donaldson","donovan","dorsey","dotson","douglas","downs","doyle","drake","dudley","duffy","duke","duncan","dunlap","dunn","duran","durham","dyer","eaton","edwards","elliott","ellis","ellison","emerson","england","english","erickson","espinoza","estes","estrada","evans","everett","ewing","farley","farmer","farrell","faulkner","ferguson","fernandez","ferrell","fields","figueroa","finch","finley","fischer","fisher","fitzgerald","fitzpatrick","fleming","fletcher","flores","flowers","floyd","flynn","foley","forbes","ford","foreman","foster","fowler","fox","francis","franco","frank","franklin","franks","frazier","frederick","freeman","french","frost","fry","frye","fuentes","fuller","fulton","gaines","gallagher","gallegos","galloway","gamble","garcia","gardner","garner","garrett","garrison","garza","gates","gay","gentry","george","gibbs","gibson","gilbert","giles","gill","gillespie","gilliam","gilmore","glass","glenn","glover","goff","golden","gomez","gonzales","gonzalez","good","goodman","goodwin","gordon","gould","graham","grant","graves","gray","green","greene","greer","gregory","griffin","griffith","grimes","gross","guerra","guerrero","guthrie","gutierrez","guy","guzman","hahn","hale","haley","hall","hamilton","hammond","hampton","hancock","haney","hansen","hanson","hardin","harding","hardy","harmon","harper","harrell","harrington","harris","harrison","hart","hartman","harvey","hatfield","hawkins","hayden","hayes","haynes","hays","head","heath","hebert","henderson","hendricks","hendrix","henry","hensley","henson","herman","hernandez","herrera","herring","hess","hester","hewitt","hickman","hicks","higgins","hill","hines","hinton","hobbs","hodge","hodges","hoffman","hogan","holcomb","holden","holder","holland","holloway","holman","holmes","holt","hood","hooper","hoover","hopkins","hopper","horn","horne","horton","house","houston","howard","howe","howell","hubbard","huber","hudson","huff","huffman","hughes","hull","humphrey","hunt","hunter","hurley","hurst","hutchinson","hyde","ingram","irwin","jackson","jacobs","jacobson","james","jarvis","jefferson","jenkins","jennings","jensen","jimenez","johns","johnson","johnston","jones","jordan","joseph","joyce","joyner","juarez","justice","kane","kaufman","keith","keller","kelley","kelly","kemp","kennedy","kent","kerr","key","kidd","kim","king","kinney","kirby","kirk","kirkland","klein","kline","knapp","knight","knowles","knox","koch","kramer","lamb","lambert","lancaster","landry","lane","lang","langley","lara","larsen","larson","lawrence","lawson","le","leach","leblanc","lee","leon","leonard","lester","levine","levy","lewis","lindsay","lindsey","little","livingston","lloyd","logan","long","lopez","lott","love","lowe","lowery","lucas","luna","lynch","lynn","lyons","macdonald","macias","mack","madden","maddox","maldonado","malone","mann","manning","marks","marquez","marsh","marshall","martin","martinez","mason","massey","mathews","mathis","matthews","maxwell","may","mayer","maynard","mayo","mays","mcbride","mccall","mccarthy","mccarty","mcclain","mcclure","mcconnell","mccormick","mccoy","mccray","mccullough","mcdaniel","mcdonald","mcdowell","mcfadden","mcfarland","mcgee","mcgowan","mcguire","mcintosh","mcintyre","mckay","mckee","mckenzie","mckinney","mcknight","mclaughlin","mclean","mcleod","mcmahon","mcmillan","mcneil","mcpherson","meadows","medina","mejia","melendez","melton","mendez","mendoza","mercado","mercer","merrill","merritt","meyer","meyers","michael","middleton","miles","miller","mills","miranda","mitchell","molina","monroe","montgomery","montoya","moody","moon","mooney","moore","morales","moran","moreno","morgan","morin","morris","morrison","morrow","morse","morton","moses","mosley","moss","mueller","mullen","mullins","munoz","murphy","murray","myers","nash","navarro","neal","nelson","newman","newton","nguyen","nichols","nicholson","nielsen","nieves","nixon","noble","noel","nolan","norman","norris","norton","nunez","obrien","ochoa","oconnor","odom","odonnell","oliver","olsen","olson","oneal","oneil","oneill","orr","ortega","ortiz","osborn","osborne","owen","owens","pace","pacheco","padilla","page","palmer","park","parker","parks","parrish","parsons","pate","patel","patrick","patterson","patton","paul","payne","pearson","peck","pena","pennington","perez","perkins","perry","peters","petersen","peterson","petty","phelps","phillips","pickett","pierce","pittman","pitts","pollard","poole","pope","porter","potter","potts","powell","powers","pratt","preston","price","prince","pruitt","puckett","pugh","quinn","ramirez","ramos","ramsey","randall","randolph","rasmussen","ratliff","ray","raymond","reed","reese","reeves","reid","reilly","reyes","reynolds","rhodes","rice","rich","richard","richards","richardson","richmond","riddle","riggs","riley","rios","rivas","rivera","rivers","roach","robbins","roberson","roberts","robertson","robinson","robles","rocha","rodgers","rodriguez","rodriquez","rogers","rojas","rollins","roman","romero","rosa","rosales","rosario","rose","ross","roth","rowe","rowland","roy","ruiz","rush","russell","russo","rutledge","ryan","salas","salazar","salinas","sampson","sanchez","sanders","sandoval","sanford","santana","santiago","santos","sargent","saunders","savage","sawyer","schmidt","schneider","schroeder","schultz","schwartz","scott","sears","sellers","serrano","sexton","shaffer","shannon","sharp","sharpe","shaw","shelton","shepard","shepherd","sheppard","sherman","shields","short","silva","simmons","simon","simpson","sims","singleton","skinner","slater","sloan","small","smith","snider","snow","snyder","solis","solomon","sosa","soto","sparks","spears","spence","spencer","stafford","stanley","stanton","stark","steele","stein","stephens","stephenson","stevens","stevenson","stewart","stokes","stone","stout","strickland","strong","stuart","suarez","sullivan","summers","sutton","swanson","sweeney","sweet","sykes","talley","tanner","tate","taylor","terrell","terry","thomas","thompson","thornton","tillman","todd","torres","townsend","tran","travis","trevino","trujillo","tucker","turner","tyler","tyson","underwood","valdez","valencia","valentine","valenzuela","vance","vang","vargas","vasquez","vaughan","vaughn","vazquez","vega","velasquez","velazquez","velez","villarreal","vincent","vinson","wade","wagner","walker","wall","wallace","waller","walls","walsh","walter","walters","walton","ward","ware","warner","warren","washington","waters","watkins","watson","watts","weaver","webb","weber","webster","weeks","weiss","welch","wells","west","wheeler","whitaker","white","whitehead","whitfield","whitley","whitney","wiggins","wilcox","wilder","wiley","wilkerson","wilkins","wilkinson","william","williams","williamson","willis","wilson","winters","wise","witt","wolf","wolfe","wong","wood","woodard","woods","woodward","wooten","workman","wright","wyatt","wynn","yang","yates","york","young","zamora","zimmerman"];
game_util_TrainingData.american_forenames = ["aaron","ada","adam","adrian","adrienne","agnes","alan","albert","alberta","alberto","alex","alexander","alexandra","alexis","alfred","alfredo","alice","alicia","alison","allan","allen","allison","alma","alvin","alyssa","amanda","amber","amelia","amy","ana","andre","andrea","andrew","andy","angel","angel","angela","angelica","angelina","angie","anita","ann","anna","anne","annette","annie","anthony","antoinette","antonia","antonio","april","arlene","armando","arnold","arthur","ashley","audrey","barbara","barry","beatrice","becky","belinda","ben","benjamin","bernadette","bernard","bernice","bertha","bessie","beth","bethany","betsy","betty","beulah","beverly","bill","billie","billy","blanca","blanche","bob","bobbie","bobby","bonnie","brad","bradley","brandi","brandon","brandy","brenda","brent","brett","brian","bridget","brittany","brooke","bruce","bryan","byron","calvin","camille","candace","candice","carl","carla","carlos","carmen","carol","carole","caroline","carolyn","carrie","casey","casey","cassandra","catherine","cathy","cecelia","cecil","cecilia","celia","chad","charlene","charles","charlie","charlotte","chelsea","cheryl","chester","chris","christian","christie","christina","christine","christopher","christy","cindy","claire","clara","clarence","claude","claudia","clayton","clifford","clifton","clinton","clyde","cody","colleen","connie","constance","cora","corey","cory","courtney","craig","cristina","crystal","curtis","cynthia","daisy","dale","dan","dana","daniel","danielle","danny","darla","darlene","darrell","darren","darryl","daryl","dave","david","dawn","dean","deanna","debbie","deborah","debra","delia","della","delores","denise","dennis","derek","derrick","desiree","diana","diane","dianna","dianne","dixie","dolores","don","donald","donna","dora","doreen","doris","dorothy","douglas","duane","dustin","dwayne","dwight","earl","ebony","eddie","edgar","edith","edna","eduardo","edward","edwin","eileen","elaine","eleanor","elena","elisa","elizabeth","ella","ellen","elmer","eloise","elsa","elsie","elvira","emily","emma","enrique","eric","erica","erik","erika","erin","erma","ernest","ernestine","essie","estelle","esther","ethel","eugene","eula","eunice","eva","evelyn","everett","faith","fannie","faye","felicia","felix","fernando","flora","florence","floyd","frances","francis","francis","francisco","frank","franklin","fred","freda","freddie","frederick","gabriel","gail","gary","gayle","gene","geneva","genevieve","george","georgia","gerald","geraldine","gertrude","gilbert","gina","ginger","gladys","glen","glenda","glenn","gloria","gordon","grace","greg","gregory","gretchen","guadalupe","guy","gwen","gwendolyn","hannah","harold","harriet","harry","harvey","hattie","hazel","heather","hector","heidi","helen","henrietta","henry","herbert","herman","hilda","holly","hope","howard","hugh","ian","ida","inez","irene","iris","irma","isaac","isabel","ivan","jack","jackie","jacob","jacqueline","jacquelyn","jaime","jaime","james","jamie","jamie","jan","jana","jane","janet","janice","janie","janis","jared","jasmine","jason","javier","jay","jean","jeanette","jeanne","jeannette","jeannie","jeff","jeffery","jeffrey","jenna","jennie","jennifer","jenny","jeremy","jerome","jerry","jesse","jessica","jessie","jessie","jesus","jill","jim","jimmie","jimmy","jo","joan","joann","joanna","joanne","jodi","jody","joe","joel","johanna","john","johnnie","johnnie","johnny","jon","jonathan","jordan","jorge","jose","josefina","joseph","josephine","joshua","joy","joyce","juan","juana","juanita","judith","judy","julia","julian","julie","julio","june","justin","kara","karen","kari","karl","karla","kate","katherine","kathleen","kathryn","kathy","katie","katrina","kay","kayla","keith","kelley","kelli","kellie","kelly","kelly","ken","kendra","kenneth","kent","kerry","kevin","kim","kimberly","kirk","krista","kristen","kristi","kristie","kristin","kristina","kristine","kristy","krystal","kurt","kyle","lana","lance","larry","latoya","laura","lauren","laurie","laverne","lawrence","leah","lee","lee","leigh","lela","lena","leo","leon","leona","leonard","leroy","leslie","leslie","lester","leticia","lewis","lila","lillian","lillie","linda","lindsay","lindsey","lisa","lloyd","lois","lola","lonnie","lora","lorena","lorene","loretta","lori","lorraine","louis","louise","lucia","lucille","lucy","luis","lula","luz","lydia","lynda","lynette","lynn","lynne","mabel","mable","madeline","mae","maggie","mamie","mandy","manuel","marc","marcella","marcia","marcus","margaret","margarita","margie","marguerite","maria","marian","marianne","marie","marilyn","mario","marion","marion","marjorie","mark","marlene","marsha","marshall","marta","martha","martin","marvin","mary","maryann","mathew","matthew","mattie","maureen","maurice","max","maxine","may","megan","meghan","melanie","melba","melinda","melissa","melody","melvin","mercedes","meredith","michael","micheal","michele","michelle","miguel","mike","mildred","milton","mindy","minnie","miranda","miriam","misty","mitchell","molly","mona","monica","monique","morris","muriel","myra","myrtle","nadine","nancy","naomi","natalie","natasha","nathan","nathaniel","neil","nellie","nelson","nettie","nicholas","nichole","nicole","nina","nora","norma","norman","olga","olive","olivia","ollie","opal","ora","oscar","pam","pamela","pat","patricia","patrick","patsy","patti","patty","paul","paula","paulette","pauline","pearl","pedro","peggy","penny","perry","peter","philip","phillip","phyllis","priscilla","rachael","rachel","rafael","ralph","ramon","ramona","randall","randy","raquel","raul","ray","raymond","rebecca","regina","reginald","rene","renee","rhonda","ricardo","richard","rick","ricky","rita","robert","roberta","roberto","robin","robyn","rochelle","rodney","roger","roland","ron","ronald","ronnie","rosa","rosalie","rose","rosemarie","rosemary","rosie","ross","roxanne","roy","ruben","ruby","russell","ruth","ryan","sabrina","sadie","sally","salvador","sam","samantha","samuel","sandra","sandy","sara","sarah","scott","sean","sergio","seth","shane","shannon","shari","sharon","shawn","shawna","sheila","shelia","shelley","shelly","sheri","sherri","sherry","sheryl","shirley","sidney","silvia","sonia","sonja","sonya","sophia","sophie","stacey","stacy","stanley","stella","stephanie","stephen","steve","steven","sue","susan","susie","suzanne","sylvia","tabitha","tamara","tami","tammy","tanya","tara","tasha","ted","teresa","teri","terrance","terrence","terri","terry","terry","thelma","theodore","theresa","thomas","tiffany","tim","timothy","tina","todd","tom","tommy","toni","tony","tonya","tracey","traci","tracy","tracy","travis","tricia","troy","tyler","tyrone","valerie","vanessa","velma","vera","verna","vernon","veronica","vicki","vickie","vicky","victor","victoria","vincent","viola","violet","virgil","virginia","vivian","wade","wallace","walter","wanda","warren","wayne","wendy","wesley","whitney","willard","william","willie","willie","wilma","winifred","yolanda","yvette","yvonne","zachary"];
game_util_Global.americanNames = game_util_SharedNameGenerator.makeAmericanNameBatch();
game_util_Utterances.are_you_ok = ["Did we just lose someone? Is everyone alright?","Everybody clear? Report...!","Does anyone need help?","Everybody's breathin' right?","Everybody's still breathin', right?","You guys alright?","You guys okay?","How y'all doing?","How you guys doing?","How's everybody doin'?","Talk to me brothers, is everyone alright?","Is everybody here?","Is everybody okay?","Status report!","No one's dead, right?","No one's hurt right?","Is anybody down?","Is anyone hurt?","Nobody's dead, right?","Who needs help?"];
game_util_Utterances.death = ["Whaaaaurrgh!","Awaaaaugh!","Blurrrgh","Ugh.. urrgh...","Guh... urgh!","Arrrrgh.."];
game_util_Utterances.fire = ["Almighty father, guide my aim!","Finger on the trigger buddy, cover me","Fire!","Eat this!","Freakin' kill them already!","You're going below ground for good!","With righteous fire I shall purge you!","Get ready!","We've got company!","Gun them down!","Here they come!","How 'bout this!?","Waste 'em!","Took your ass, sucka!","Time to die!","Try me bro, try me!","Suck on this!","Shoot them brain dawgs!","Send 'em back to hell!","It's time for you to die!","Kill 'em all!","Knock 'em down!","Put 'em down!","Shoot 'em!","Shoot shoot shoot!!!","Shoot them!","Show them who's boss brother!","Ooooh, smoke 'em!","Open fire!","No mercy!","Light 'em up!","Look out, they're coming!","Oh my God - here they come!"];
game_util_Utterances.im_ok = ["Gimme somethin' to drink, man!","Yeah, I'm good!","Ten outta ten man!","I'm okay!","I'm good!","I think I'm okay!","I'll be aight","I'm cool","I'm doing good","I'm fine!","Just another day at the job!","I can handle my own!","I'm still breathing","I'm still breathing, right!?","Man, don't worry about me","Shouldn't you be worryin' about yourself?"];
game_util_Utterances.need_weapon = ["Can I please have a goddamn gun?","Could someone please give me some more bullets?","Damn! I'm outta bullets!","Gimme a damn weapon!","Gimme a pistol or something!?","Hey, you got a clip?","Give me a damn gun","Who's hoarding all the weapons?","Who's the asshole hogging all the ammo?","Who's the asshole hogging all the guns?","Where are all the freaking guns!?","Where the hell the guns at?","Where the hell's a gun, man?","Where's all the damn ammo around here?","Who has an extra weapon!","Who has some extra ammo!","Y'all moving slow, can I have a gun?","Why isn't this gun working?!","Ugh - I'm outta bullets!","Pass me a mag!","I'm empty!","Oh, I'm empty!","I need a gun!","I need ammo!","Let's put that weapon in good hands, give it up!","Okay, I need some ammo now!","I'm outta bullets!","Man, pass me a gun!"];
game_util_Utterances.zombie_taunt = ["Urrrrgh...","Uaaaaarggghh...","Skiiiinnnnn.... skinnnnn...","Fleesh, fleeessssh","Youuuu willll dieeeeeeee...","Uargh yerrrrr dieee..","*Burp*"];
game_util_Utterances.disapprove = ["Aw hell no!","Aw man, I don't need this!","Aw, shut up!","Don't be stupid!","Hahahahahaha... no.","Hell naw!","Hell no!","I don't think so!","Nah","Nah I don't think so","No, are you crazy?","No, cut it out!","No, leave me alone!","No, quit being stupid!","Oh hell no!","No way!"];
game_util_Utterances.round_end = ["Damn, I'm still alive","Damn, that was easier than I thought!","Damn, we made it!","Gather the dead, burn the bodies","Hahahaha, that's the way to do it!","Hahahahaha, target practice!","Hahahahaha, that was too easy.","God was with us with this battle!","God, that was too freaking close!","We're finished here, let's burn the bodies","Victory is ours brothers!","Until next time, Satan!","Hah, they're all dead!","Let's drink, to us - the zombie destroyers!","Hah, I think we got them all!","That's the last of 'em, thank God"];
game_util_Utterances.camping = ["Couldn't it be any other day?","Damn, I'll just wait right here...","Hmm, I think I'll stay here for a while...","How the hell I get myself caught up in this?","I hope they don't find me here!","My trigger finger is starting to itch"];
game_util_Utterances.round_start = ["Are you guys sure about this? This place looks strange...","We better sweep this area real close.","Whose stupid-ass idea was it to come here anyway?","God protects his faithful! But... just in case, watch my back!","Dude... what're we doing here?","Gather your courage, companions! We're up to our necks in undead!","Wait, wait, did y'all hear that? Lock and load!","This place is no good, let's go!","This place is too quiet, we shouldn't stay here long","Hush, did you hear that!? I think we're being followed","Somethin's about to go down! Let's move out!","Something ain't right, let's clear the area!","Someone or something is here and it ain't one of us!","I don't like this place... let's look around and make sure it's safe.","I think coming here was a mistake, we should go back...","It's getting late, we need to find shelter!","Oh man... it doesn't look like we were the first ones here guys.","I've got a real bad feeling about this place...","There's gotta be supplies around here, let's split up and find them","These supplies ain't gonna cut it, maybe there are more weapons around here...","If we fail, I'm coming back for you...!"];
game_util_Utterances.on_kill = ["Another one bites the dust!","Burn in hell, you freak!","Back down to hell with you!","Die!","You're dead!","You're dead, asshole!","You want more!?","You're DEAD!","You're nothing!","You okay!? Hahahahaha!","Hahahaha, I can do this all day!","Ha, I got another one!","Ha, you see that!","You like that don't ya!","You like that, huh?","Eat it!","How many of you do I gotta kill, huh?","I did that! See the body, it's my kill!","Too easy, take that... hahahahaha!","That's right, let's see you come back from that!","Swallow that!","Take that!","Who else wants some!","Huh, you ain't talkin' all that zombie moaning shit now are you!?","That's my kill!","You can't hurt a servant of God!","That's right, I smoked your punk ass!","That's right, bitch!","Smoke comin' outta my gun, and outta your ass!","That's all you got!","That's all you got! Bitch you're a zombie, I thought you were tougher than that!","Lay down, stay down!","Pathetic!","One shot, one kill!","I'm done playing games with you!","Mwahahaa, you're nothing!","Haha! I can't miss!"];
game_util_Utterances.praise = ["Damn, you saved my ass!","Dang, I never seen anybody do that!","You're a lifesaver, thank you","You're a real killer, I like you","You stomp dat ass!","You really know how to use that thing, huh?","Would you quit showing off?","Good lookin' out!","Good one!","Ha, I bet you can't do that again!","Haha, that was so cool!","Yeah, way to go!","Whew, that was tight.","You're really a life saver","Wow, I didn't think you were that good!","Whoa - you're a pro, huh!","That was freaking awesome!","That was good, but check this out!","That was sick!","Maaan, you got skills.","Man, I'm glad you're on my team!","Niccceeeee!","Nice!","Not bad brother, not bad at all","Now what would I do without you?","God guided your actions, thank you"];
game_util_Utterances.hold_position = ["Everybody, just stay put!","Everyone, just wait a second!","Don't be so stupid, just stay here!","Hold on a second","Hold up a minute!","Just hang out here for a bit","Just sit tight!","Just wait!","Nobody move!","Okay, nobody move!","Shhhh, everyone just chill!","Stand your ground!","Stay here!","We've got to keep going!","You wanna live? Then keep moving!","You're too slow bro!","Keep me covered!","Keep up with me!","Let's wait for them to come to us!","No worries here","Watch my back!","We should stick together, come on!","We're gonna hold 'em off here!"];
game_util_Utterances.follow = ["Are you stupid, let's go!","C'mon let's get outta here!","C'mon let's move!","C'mon now!","C'mon! Keep up! Keep movin'!","C'mon, come on!","C'mon, hurry up!","Come on brother, this is not the time to rest!","Come on let's go!","Come on! Keep up with me!","Come on, let's keep moving!","Come on, this way, keep movin!","Come with me","Follow me!","Let's go, stay alert!","Let's go, this way!","Hurry yo ass up!","Hurry your slow ass up, keep moving!","Get behind me, come on!","Get over there!","Getcha stuff man, let's go!","Hey keep up - let's go!","Hey watch my back!","Hey, don't let me die, I'm goin' in!","Hey, get over here, I'm gonna go!","I know you're tired, but we gotta keep moving!","I'm goin' in cover me!","If we stop, we die!","It's time to go!"];
game_util_Utterances.need_health = ["Dammit, this won't stop bleeding!","I don't feel so good...","Urgh, I think I'm dyin'","Urgh, I'm hurt!","Urgh, this hurts so bad!","Ugh, this won't stop bleeding!","I don't think I'm gonna make it...","Somebody get a doctor!","I'm bleeding bad","I'm dyin'!","I'm feeling kinda dizzy","I'm hurt bad!","I'm hurt pretty bad!","Ooh, I need a medpack!","Oh man I can't stop the bleeding!","Oh damn, I'm dyin'!"];
game_util_Utterances.retreat = ["FALL BACK!","Get your ass in gear, we're leaving!","Get your ass moving!","Get your legs moving!","You can stick around, but I'm leaving!","Out of the way guys, every man for himself!","RUN!","Run!","Run, run, they're right behind me!","Runnnnn!!!","Let's get outta here!","Let's get the hell outta here!","Get outta here!","I'm getting the hell outta here!","I'm not dumb enough to stay here","I'm not sticking around to die here!","I'm outta here!","We gotta get outta here!","We have to leave right now!"];
game_util_Utterances.zombie_groan = ["Unnnngrrrrr..","Uaaaahh...","Die...","Hurrrr.. grrr... rarrr!","Give me morreeeee...","BRAAAAAINS!","Graagh","Graaaagh!","Grrrh","Grh"];
game_util_Utterances.panic = ["Awh hell no, run!","Get away from me dude, what the hell!?","Get away from me!","Get away! Uhhh, argh!","Help! Ahhh, oh no, help!","Get the hell off me man, ahhhhh! Noooo!","LEAVE ME ALONE! No! No...","Oh my God there's so many, ahhh! Heeelp! Heeeelp!","Oh my God, nooooooo!!","Oh my god, no!","This ain't happenin, get away!","This is not happening...","This isn't happening, no, no, it can't!","Uuuuahhh, you ain't gonna catch me!","You ain't gonna break my goddamn neck, I'm gone!","Nooo, I'm not dying here!","Nooo, it's not my time to die!","Oh I'm done with this!","Noooooo!","No, I'm not gonna die!","Screw this! Help, help meeeee!","Shiiiiit, run!"];
game_util_Utterances.approve = ["Alright cool - let's do it!","Definitely","Good","Yea, I'm with that!","Yeah","Sure!","Why not?","Okay","Sounds good!","No problem","If you say so, boss","Yeah, okay"];
game_util_Utterances.thanks = ["Yeah, I needed that!","I'll never forget this!","I'll pay you back later!","I owe you one!","Oh, thanks a lot!","That's just what I needed","Thank you!","Thanks man, I owe you one","Thanks man, you saved my life!","Thanks!"];
game_util_Utterances.taunt = ["Come on, let's see what you've got!","C'mon bitch, you ain't shit!","Damn you're an ugly son of a...!","Alright, y'all bitches want it?","I can't wait to kill you.","Send my regards to Satan...!","I'll break yo ass off!","I'll break your face!","I'll kill all you bitches!","I'm gonna bury your ass!","I'm gonna kick your ass!","I'm gonna kick your freakin' ass!","I'm gonna knock your head off!","If I die, I'm takin' all you bitches with me!","Kiss my ass, zombies!","Oh, you wanna play with me!?","Oh, you want some too huh?","Ohh, you want some too huh?","I'm going to beat you down...!","I haven't had this much fun in years!"];
game_util_Utterances.angry = ["...pissin' me off...","Another goddamn day at the job!","Dammit!","Damn!","All this damn runnin'!","You're not ready!","You're nothing!","You're freaking pissin' me off!","You stupid buddy?","You must be crazy!","You must be outta yo damn mind!","You're crazy!","You're kidding me, right?","You can't be serious!","Why are you being so stupid?","Why don't you do it?","God, you're such an asshole!","What do you think, idiot?","What the hell?","What the hell?!","You gotta be kidding me!","Whatever!","Whatever...","For crying out loud!","I am so done with this crap!","Ugh this is so stupid!","Ugh, this is bullshit!","Ugh, this is retarded!","Uuuugh I wanna break something!","You better come up with a better idea than that!","This is pissin' me off!","This is really pissin' me off!","This is ridiculous","Typical...!","This won't do!","This is bullshit","This is just too much!","Stop it, stupid ass! God!","I can't deal with this now!","That's a dumb idea!","This is just typical!","I didn't sign up for this crap!","I don't need this crap!","I really don't need any of this crap!","I'm this close to hurting someone...!","I'm tired of this shit!","Imma break your goddamn neck!","Keep your mouth shut!","Please tell me you're joking!","Please, ya'll really gonna listen to that dumbass?!","Ooh, you're really trying to piss me off, aren't ya?","The hell's wrong with you, dude!?","That's hella stupid!","Look asshole I don't give a damn, I'll break yo ass off!","Man you dumb as hell!","Ohhhh, that's weak!","I'm so sick of this crap!","Oh come on now!"];
game_world_HeightmapShader.vertex = "varying vec2 vUvNoise;\r\nvarying vec2 vUvTexture;\r\nuniform vec2 scale;\r\nuniform vec2 offset;\r\n\r\nvoid main()\r\n{\r\n    vUvTexture = uv;\r\n\tvUvNoise = uv * scale + offset;\r\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n}";
game_world_HeightmapShader.fragment = "//\r\n// Description : Array and textureless GLSL 3D simplex noise function.\r\n//      Author : Ian McEwan, Ashima Arts.\r\n//  Maintainer : ijm\r\n//     Lastmod : 20110409 (stegu)\r\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\r\n//               Distributed under the MIT License. See LICENSE file.\r\n//\r\n\r\nuniform sampler2D heightMap;\r\nuniform float time;\r\nuniform float noiseContribution;\r\n\r\nvarying vec2 vUvNoise;\r\nvarying vec2 vUvTexture;\r\n\r\nvec4 permute(vec4 x)\r\n{\r\n\treturn mod((( x * 34.0 ) + 1.0 ) * x, 289.0);\r\n}\r\n\r\nvec4 taylorInvSqrt(vec4 r)\r\n{\r\n\treturn 1.79284291400159 - 0.85373472095314 * r;\r\n}\r\n\r\nfloat snoise(vec3 v)\r\n{\r\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\r\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\r\n\t// First corner\r\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\r\n\tvec3 x0 = v - i + dot( i, C.xxx );\r\n\t// Other corners\r\n\tvec3 g = step( x0.yzx, x0.xyz );\r\n\tvec3 l = 1.0 - g;\r\n\tvec3 i1 = min( g.xyz, l.zxy );\r\n\tvec3 i2 = max( g.xyz, l.zxy );\r\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\r\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\r\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\r\n\t// Permutations\r\n\ti = mod( i, 289.0 );\r\n\tvec4 p = permute( permute( permute(\r\n\t\t\t i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\r\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\r\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\r\n\t\t   \r\n\t// Gradients\r\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\r\n\tfloat n_ = 1.0 / 7.0; // N=7\r\n\tvec3 ns = n_ * D.wyz - D.xzx;\r\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\r\n\tvec4 x_ = floor( j * ns.z );\r\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\r\n\tvec4 x = x_ *ns.x + ns.yyyy;\r\n\tvec4 y = y_ *ns.x + ns.yyyy;\r\n\tvec4 h = 1.0 - abs( x ) - abs( y );\r\n\tvec4 b0 = vec4( x.xy, y.xy );\r\n\tvec4 b1 = vec4( x.zw, y.zw );\r\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\r\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\r\n\tvec4 sh = -step( h, vec4( 0.0 ) );\r\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\r\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\r\n\tvec3 p0 = vec3( a0.xy, h.x );\r\n\tvec3 p1 = vec3( a0.zw, h.y );\r\n\tvec3 p2 = vec3( a1.xy, h.z );\r\n\tvec3 p3 = vec3( a1.zw, h.w );\r\n\t\r\n\t// Normalise gradients\r\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\r\n\tp0 *= norm.x;\r\n\tp1 *= norm.y;\r\n\tp2 *= norm.z;\r\n\tp3 *= norm.w;\r\n\t\r\n\t// Mix final noise value\r\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\r\n\tm = m * m;\r\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\r\n\t\t\t\t\t\t\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\r\n}\r\n\r\nfloat surface3(vec3 coord)\r\n{\r\n\tfloat n = 0.0;\r\n\tn += 1.0 * abs(snoise(coord));\r\n\tn += 0.5 * abs(snoise(coord * 2.0));\r\n\tn += 0.25 * abs(snoise(coord * 4.0));\r\n\tn += 0.125 * abs(snoise(coord * 8.0));\r\n\treturn n;\r\n}\r\n\r\nvoid main()\r\n{\r\n\tvec4 hVal = texture2D(heightMap, vUvTexture);\r\n\r\n\tvec3 coord = vec3(vUvNoise, -time);\r\n\tfloat n = surface3(coord);\r\n\t\r\n\tgl_FragColor = mix(hVal, vec4(vec3(n, n, n), 1.0), noiseContribution);\r\n}";
game_world_NormalShader.vertex = "varying vec2 vUv;\r\n\r\nvoid main()\r\n{\r\n    vUv = uv;\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n}";
game_world_NormalShader.fragment = "uniform float height;\r\nuniform vec2 resolution;\r\nuniform sampler2D heightMap;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main()\r\n{\r\n    float val = texture2D(heightMap, vUv).x;\r\n    float valU = texture2D(heightMap, vUv + vec2(1.0 / resolution.x, 0.0)).x;\r\n    float valV = texture2D(heightMap, vUv + vec2(0.0, 1.0 / resolution.y)).x;\r\n\r\n    gl_FragColor = vec4((0.5 * normalize(vec3(val - valU, val - valV, height)) + 0.5), 1.0);\r\n}";
game_world_InfluenceMapShader.vertex = "uniform sampler2D tNormal;\r\nuniform sampler2D tDisplacement;\r\nuniform vec2 uRepeatBase;\r\nuniform float uDisplacementScale;\r\nuniform float uDisplacementBias;\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\nvarying vec3 vViewPosition;\r\n\r\nattribute vec4 tangent;\r\nattribute vec3 color;\r\n\r\nvoid main()\r\n{\r\n    vNormal = normalize(normalMatrix * normal);\r\n    vTangent = normalize(normalMatrix * tangent.xyz);\r\n    vBinormal = cross(vNormal, vTangent) * tangent.w;\r\n    vBinormal = normalize(vBinormal);\r\n    vUv = uv;\r\n    vec2 uvBase = uv * uRepeatBase;\r\n\r\n\tvec3 dv = texture2D(tDisplacement, uvBase).xyz;\r\n\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\r\n\tvec3 displacedPosition = normal * df + position;\r\n\tvec4 worldPosition = modelMatrix * vec4(displacedPosition, 1.0);\r\n\tvec4 mvPosition = modelViewMatrix * vec4(displacedPosition, 1.0);\r\n\t\r\n    gl_Position = projectionMatrix * mvPosition;\r\n    vViewPosition = -mvPosition.xyz;\r\n    vec3 normalTex = texture2D(tNormal, uvBase).xyz * 2.0 - 1.0;\r\n    vNormal = normalMatrix * normalTex;\r\n}";
game_world_InfluenceMapShader.fragment = "uniform sampler2D tDiffuse1;\r\nuniform sampler2D tDiffuse2;\r\nuniform sampler2D tDetail;\r\nuniform sampler2D tDisplacement;\r\nuniform vec4 diffuse;\r\nuniform float opacity;\r\nuniform float uNormalScale;\r\nuniform vec2 uRepeatOverlay;\r\nuniform vec2 uRepeatBase;\r\nuniform vec2 uOffset;\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\nvarying vec3 vViewPosition;\r\n\r\nvoid main()\r\n{\r\n    vec2 uvOverlay = uRepeatOverlay * vUv + uOffset;\r\n    vec2 uvBase = uRepeatBase * vUv;\r\n    vec3 normalTex = texture2D(tDetail, uvOverlay).xyz * 2.0 - 1.0;\r\n    normalTex.xy *= uNormalScale;\r\n\tnormalTex = normalize(normalTex);\r\n\r\n\tvec4 colDiffuse1 = texture2D(tDiffuse1, uvOverlay);\r\n\tvec4 colDiffuse2 = texture2D(tDiffuse2, uvOverlay);\r\n\tcolDiffuse1 = GammaToLinear(colDiffuse1, float(GAMMA_FACTOR));\r\n\tcolDiffuse2 = GammaToLinear(colDiffuse2, float(GAMMA_FACTOR));\r\n\t\r\n\tvec4 diffuseColor = mix(colDiffuse1, colDiffuse2, 1.0 - texture2D(tDisplacement, uvBase));\r\n\tdiffuseColor *= diffuse;\r\n\t\r\n    mat3 tsb = mat3(vTangent, vBinormal, vNormal);\r\n    vec3 finalNormal = tsb * normalTex;\r\n    vec3 normal = normalize(finalNormal);\r\n    vec3 viewPosition = normalize(vViewPosition);\r\n\t\r\n\t// TODO re-add lighting/normal usage\r\n\r\n    gl_FragColor = diffuseColor;\r\n}";
needs_util_InstanceId.instanceId = 0;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
